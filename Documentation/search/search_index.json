{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Deranged Senators Documentation Documentation Site for Deranged Senators. This site holds all of the documentation for our work. More to Follow!","title":"Deranged Senators Documentation"},{"location":"#deranged-senators-documentation","text":"Documentation Site for Deranged Senators. This site holds all of the documentation for our work. More to Follow!","title":"Deranged Senators Documentation"},{"location":"Cops%20And%20Robbers/","text":"Cops And Robbers Cops and Robbers is a 2D online multiplayer game developed using Unity, currently in development by Deranged Senators. These pages contain the documentation for the game","title":"Cops And Robbers"},{"location":"Cops%20And%20Robbers/#cops-and-robbers","text":"Cops and Robbers is a 2D online multiplayer game developed using Unity, currently in development by Deranged Senators. These pages contain the documentation for the game","title":"Cops And Robbers"},{"location":"Cops%20And%20Robbers/Classes/","text":"Classes namespace AOT class ChatController namespace Cinemachine namespace Conditional class EnvMapAnimator class GameManager namespace Guid namespace JetBrains::Annotations namespace Me namespace DerangedSenators namespace CopsAndRobbers class AttackCircle class AutoHostClient class CameraController Camera Controller script class CoinPickup Script for handling Coin Pickup Events class EndOfRoundScript class GameManager Singleton Class that manages the Game class GameNetworkManager class GameOverScript class GenericSingleton Generic singleton Class. Extend this class to make singleton component. Example: class HealthBar class MainMenu class Match class MatchExtensions class MatchMaker class MoneyManager class Player class PlayerAttack class PlayerCameraContoller Script which defines the follow attribute for the Cinemachine Virtual Camera class PlayerControls struct AttackMapActions struct CameraViewPointsActions interface IAttackMapActions interface ICameraViewPointsActions interface IKeyMapActions interface IMouseActionsActions struct KeyMapActions struct MouseActionsActions class PlayerHealth This script is responsible for the function of the health bar and damage class PlayerMovement Script that controls Player Movement class RoundBreakTimeManager class SyncListGameObject class SyncListMatch class TimeManager class TurnManager class UILobby class UIPlayer class VirtualCameraSingleton Singleton Class to provide access to the Virtual Camera class WeaponOffset namespace Mirror struct AddPlayerMessage namespace Authenticators class BasicAuthenticator struct AuthRequestMessage struct AuthResponseMessage class TimeoutAuthenticator An authenticator that disconnects connections if they don't authenticate within a specified time limit. class Channels class ClientAttribute Prevents the server from running this method. class ClientCallbackAttribute Prevents the server from running this method. class ClientRpcAttribute The server uses a Remote Procedure Call (RPC) to run this function on clients. class ClientScene A client manager which contains static client information and functions. namespace Cloud class ApiConnector Used to requests and responses from the mirror api class BaseApi struct CreatedIdJson struct EmptyJson struct ErrorJson class Extensions interface IApiConnector Used to requests and responses from the mirror api interface IBaseApi interface ICanBeJson Objects that can be sent to the Api must have this interface interface ICoroutineRunner interface IRequestCreator Methods to create and send UnityWebRequest interface IUnityEqualCheck Adds Extension to check if unity object is null. namespace ListServerService class CustomDataHelper interface IListServerClientApi interface IListServerServerApi struct KeyValue class ListServer class ListServerBaseApi class ListServerClientApi class ListServerServerApi struct PartialServerJson struct ServerCollectionJson struct ServerJson class Logger class MatchFoundEvent class RequestCreator Methods to create and send UnityWebRequest class ServerListEvent class UnityEqualCheckExtension class CommandAttribute Call this from a client to run this function on the server. struct CommandMessage class Compression Functions to Compress Quaternions and Floats struct ConnectMessage struct DisconnectMessage namespace Discovery class NetworkDiscovery class NetworkDiscoveryBase Base implementation for Network Discovery . Extend this component to provide custom discovery with game specific data NetworkDiscovery for a sample implementation class NetworkDiscoveryHUD class ServerFoundUnityEvent struct ServerRequest struct ServerResponse class DotNetCompatibility class EditorHelper namespace EditorScripts namespace Logging class LogLevelWindow class LogLevelsGUI class LogSettingsEditor class NetworkLogSettingsEditor class ScriptableObjectUtility class EnterPlayModeSettingsCheck struct ErrorMessage namespace Experimental class NetworkLerpRigidbody class NetworkRigidbody class ClientSyncState holds previously synced values class NetworkRigidbody2D class ClientSyncState holds previously synced values class NetworkTransform class NetworkTransformBase struct DataPoint class NetworkTransformChild A component to synchronize the position of child transforms of networked objects. class ExponentialMovingAverage class FallbackTransport class ILoggerExtensions interface IMessageBase class InspectorHelper class LLAPITransport class LocalConnectionBuffer class LogFactory class LogFilter namespace Logging class ConsoleColorLogHandler class LogSettings struct LoggerSettings class LogSettingsExt class NetworkHeadlessLogger Used to replace log hanlder with Console Color LogHandler class NetworkLogSettings Used to load LogSettings in build class MessageBase class MessagePacker class MiddlewareTransport Allows Middleware to override some of the transport methods or let the inner transport handle them. class MultiplexTransport class NetworkAnimator A component to synchronize Mecanim animation states for networked objects. class NetworkAuthenticator Base class for implementing component-based authentication during the Connect phase class NetworkBehaviour Base class which should be inherited by scripts which contain networking functionality. struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour class NetworkBehaviourInspector class NetworkClient This is a network client class used by the networking system. It contains a NetworkConnection that is used to connect to a network server. class NetworkConnection A High level network connection. This is used for connections from client-to-server and for connection from server-to-client. class NetworkConnectionToClient class NetworkConnectionToServer class NetworkDiagnostics Provides profiling information from mirror A profiler can subscribe to these events and present the data in a friendly way to the user struct MessageInfo Describes an outgoing message class NetworkIdentity The NetworkIdentity identifies objects across the network, between server and clients. Its primary data is a NetworkInstanceId which is allocated by the server and then set on clients. This is used in network communications to be able to lookup game objects on different machines. class NetworkInformationPreview struct NetworkBehaviourInfo struct NetworkIdentityInfo class Styles class NetworkLobbyManager This is a specialized NetworkManager that includes a networked lobby. class NetworkLobbyPlayer This component works in conjunction with the NetworkLobbyManager to make up the multiplayer lobby system. class NetworkManager class NetworkManagerEditor class NetworkManagerHUD An extension for the NetworkManager that displays a default HUD for controlling the network state of the game. class NetworkMatchChecker Component that controls visibility of networked objects based on match id. interface NetworkMessage class NetworkOwnerChecker Component that limits visibility of networked objects to the authority client. class NetworkPingDisplay Component that will display the clients ping in milliseconds struct NetworkPingMessage struct NetworkPongMessage class NetworkProximityChecker Component that controls visibility of networked objects for players. class NetworkReader Binary stream Reader. Supports simple types, buffers, arrays, structs, and nested types class NetworkReaderExtensions class NetworkReaderPool Pool of NetworkReaders class NetworkRoomManager This is a specialized NetworkManager that includes a networked room. struct PendingPlayer class NetworkRoomPlayer This component works in conjunction with the NetworkRoomManager to make up the multiplayer room system. class NetworkSceneChecker Component that controls visibility of networked objects between scenes. class NetworkScenePostProcess class NetworkServer The NetworkServer. class NetworkStartPosition This component is used to make a gameObject a starting position for spawning player objects in multiplayer games. class NetworkTime Synchronize time between the server and the clients class NetworkTransform class NetworkTransformBase class DataPoint class NetworkTransformChild A component to synchronize the position of child transforms of networked objects. class NetworkVisibility class NetworkWriter Binary stream Writer. Supports simple types, buffers, arrays, structs, and nested types class NetworkWriterExtensions class NetworkWriterPool Pool of NetworkWriters struct NotReadyMessage struct ObjectDestroyMessage struct ObjectHideMessage struct ObjectSpawnFinishedMessage struct ObjectSpawnStartedMessage class Pool class PooledNetworkReader NetworkReader to be used with [NetworkReaderPool] class PooledNetworkWriter NetworkWriter to be used with [NetworkWriterPool] class PreprocessorDefine class Reader a class that holds readers for the different types Note that c# creates a different static variable for each type This will be populated by the weaver struct ReadyMessage namespace RemoteCalls struct CommandInfo class Invoker class RemoteCallHelper Used to help manage remote calls for NetworkBehaviours struct RpcMessage class SceneAttribute Converts a string property into a Scene property in the inspector class SceneDrawer struct SceneMessage class ServerAttribute Prevents clients from running this method. class ServerCallbackAttribute Prevents clients from running this method. class ShowInInspectorAttribute Used to show private SyncList in the inspector, namespace SimpleWeb class ArrayBuffer class BufferBucket class BufferPool Collection of different sized buffers class ClientHandshake Handles Handshake to the server when it first connects class ClientSslHelper class Connection class Constants Constant values that should never change interface IBufferOwner class Log struct Message class MessageProcessor class ReadHelper class ReadHelperException class ReceiveLoop struct Config class SendLoop struct Config class MaskHelper class SendLoopConfig class ServerHandshake Handles Handshakes from new clients on the server class ServerSslHelper class SimpleWebClient Client used to control websockets class SimpleWebJSLib class SimpleWebServer class SimpleWebTransport struct SslConfig class SslConfigLoader struct Cert struct TcpConfig class Utils class WebSocketClientStandAlone class WebSocketClientWebGl class WebSocketServer struct SpawnMessage class StringHash class SyncDictionary class SyncHashSet class SyncIDictionary struct Change class SyncList struct Change struct Enumerator class SyncListBool class SyncListDrawer class SyncListField class SyncListFloat class SyncListInt class SyncListString class SyncListUInt interface SyncObject A sync object is an object that can synchronize it's state between server and client, such as a SyncList class SyncSet struct Change class SyncSortedSet class SyncVarAttribute SyncVars are used to synchronize a variable from the server to all clients automatically. class SyncVarAttributeDrawer class TargetRpcAttribute The server uses a Remote Procedure Call (RPC) to run this function on a specific client. class TelepathyTransport class Transport Abstract transport layer component struct UIntDecimal struct UIntDouble struct UIntFloat class ULocalConnectionToClient class ULocalConnectionToServer class UnityEventNetworkConnection Unity Event for the NetworkConnection struct UpdateVarsMessage namespace Weaver class CommandProcessor Processes [Command] methods in NetworkBehaviour class CompilationFinishedHook class Extensions class GenerateWriterException class Helpers class Log class MethodProcessor class MonoBehaviourProcessor only shows warnings in case we use SyncVars etc. for MonoBehaviour. class NetworkBehaviourProcessor processes SyncVars, Cmds, Rpcs, etc. of NetworkBehaviours struct ClientRpcResult struct CmdResult class PropertySiteProcessor class ReaderWriterProcessor class Readers class Resolvers class RpcProcessor Processes [Rpc] methods in NetworkBehaviour class ServerClientAttributeProcessor class SyncObjectInitializer class SyncObjectProcessor class SyncVarProcessor Processes [SyncVar] in NetworkBehaviour class TargetRpcProcessor Processes [TargetRpc] methods in NetworkBehaviour class TypeReferenceComparer Comparers TypeReference using FullName class Weaver class WeaverException class WeaverLists class WeaverTypes class Writers class Writer A class that holds writers for the different types namespace Mono::CecilX namespace Mono::CecilX::Cil namespace Mono::CecilX::Rocks namespace Object class Patrol class PauseMenu namespace Stopwatch namespace Telepathy class Client class Common class Logger struct Message class NetworkStreamExtensions class SafeQueue class Server class ClientToken class ThreadExtensions class Utils namespace Unity::Collections::LowLevel::Unsafe namespace UnityAssembly namespace UnityEditor namespace UnityEditor::Callbacks namespace UnityEditor::Compilation namespace UnityEditorInternal namespace kcp2k class Kcp struct AckItem class KcpClient class KcpClientConnection class KcpConnection class KcpServer class KcpServerConnection class KcpTransport class Log class Segment class Utils Updated on 29 January 2021 at 18:34:50 UTC","title":"Classes"},{"location":"Cops%20And%20Robbers/Classes/#classes","text":"namespace AOT class ChatController namespace Cinemachine namespace Conditional class EnvMapAnimator class GameManager namespace Guid namespace JetBrains::Annotations namespace Me namespace DerangedSenators namespace CopsAndRobbers class AttackCircle class AutoHostClient class CameraController Camera Controller script class CoinPickup Script for handling Coin Pickup Events class EndOfRoundScript class GameManager Singleton Class that manages the Game class GameNetworkManager class GameOverScript class GenericSingleton Generic singleton Class. Extend this class to make singleton component. Example: class HealthBar class MainMenu class Match class MatchExtensions class MatchMaker class MoneyManager class Player class PlayerAttack class PlayerCameraContoller Script which defines the follow attribute for the Cinemachine Virtual Camera class PlayerControls struct AttackMapActions struct CameraViewPointsActions interface IAttackMapActions interface ICameraViewPointsActions interface IKeyMapActions interface IMouseActionsActions struct KeyMapActions struct MouseActionsActions class PlayerHealth This script is responsible for the function of the health bar and damage class PlayerMovement Script that controls Player Movement class RoundBreakTimeManager class SyncListGameObject class SyncListMatch class TimeManager class TurnManager class UILobby class UIPlayer class VirtualCameraSingleton Singleton Class to provide access to the Virtual Camera class WeaponOffset namespace Mirror struct AddPlayerMessage namespace Authenticators class BasicAuthenticator struct AuthRequestMessage struct AuthResponseMessage class TimeoutAuthenticator An authenticator that disconnects connections if they don't authenticate within a specified time limit. class Channels class ClientAttribute Prevents the server from running this method. class ClientCallbackAttribute Prevents the server from running this method. class ClientRpcAttribute The server uses a Remote Procedure Call (RPC) to run this function on clients. class ClientScene A client manager which contains static client information and functions. namespace Cloud class ApiConnector Used to requests and responses from the mirror api class BaseApi struct CreatedIdJson struct EmptyJson struct ErrorJson class Extensions interface IApiConnector Used to requests and responses from the mirror api interface IBaseApi interface ICanBeJson Objects that can be sent to the Api must have this interface interface ICoroutineRunner interface IRequestCreator Methods to create and send UnityWebRequest interface IUnityEqualCheck Adds Extension to check if unity object is null. namespace ListServerService class CustomDataHelper interface IListServerClientApi interface IListServerServerApi struct KeyValue class ListServer class ListServerBaseApi class ListServerClientApi class ListServerServerApi struct PartialServerJson struct ServerCollectionJson struct ServerJson class Logger class MatchFoundEvent class RequestCreator Methods to create and send UnityWebRequest class ServerListEvent class UnityEqualCheckExtension class CommandAttribute Call this from a client to run this function on the server. struct CommandMessage class Compression Functions to Compress Quaternions and Floats struct ConnectMessage struct DisconnectMessage namespace Discovery class NetworkDiscovery class NetworkDiscoveryBase Base implementation for Network Discovery . Extend this component to provide custom discovery with game specific data NetworkDiscovery for a sample implementation class NetworkDiscoveryHUD class ServerFoundUnityEvent struct ServerRequest struct ServerResponse class DotNetCompatibility class EditorHelper namespace EditorScripts namespace Logging class LogLevelWindow class LogLevelsGUI class LogSettingsEditor class NetworkLogSettingsEditor class ScriptableObjectUtility class EnterPlayModeSettingsCheck struct ErrorMessage namespace Experimental class NetworkLerpRigidbody class NetworkRigidbody class ClientSyncState holds previously synced values class NetworkRigidbody2D class ClientSyncState holds previously synced values class NetworkTransform class NetworkTransformBase struct DataPoint class NetworkTransformChild A component to synchronize the position of child transforms of networked objects. class ExponentialMovingAverage class FallbackTransport class ILoggerExtensions interface IMessageBase class InspectorHelper class LLAPITransport class LocalConnectionBuffer class LogFactory class LogFilter namespace Logging class ConsoleColorLogHandler class LogSettings struct LoggerSettings class LogSettingsExt class NetworkHeadlessLogger Used to replace log hanlder with Console Color LogHandler class NetworkLogSettings Used to load LogSettings in build class MessageBase class MessagePacker class MiddlewareTransport Allows Middleware to override some of the transport methods or let the inner transport handle them. class MultiplexTransport class NetworkAnimator A component to synchronize Mecanim animation states for networked objects. class NetworkAuthenticator Base class for implementing component-based authentication during the Connect phase class NetworkBehaviour Base class which should be inherited by scripts which contain networking functionality. struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour class NetworkBehaviourInspector class NetworkClient This is a network client class used by the networking system. It contains a NetworkConnection that is used to connect to a network server. class NetworkConnection A High level network connection. This is used for connections from client-to-server and for connection from server-to-client. class NetworkConnectionToClient class NetworkConnectionToServer class NetworkDiagnostics Provides profiling information from mirror A profiler can subscribe to these events and present the data in a friendly way to the user struct MessageInfo Describes an outgoing message class NetworkIdentity The NetworkIdentity identifies objects across the network, between server and clients. Its primary data is a NetworkInstanceId which is allocated by the server and then set on clients. This is used in network communications to be able to lookup game objects on different machines. class NetworkInformationPreview struct NetworkBehaviourInfo struct NetworkIdentityInfo class Styles class NetworkLobbyManager This is a specialized NetworkManager that includes a networked lobby. class NetworkLobbyPlayer This component works in conjunction with the NetworkLobbyManager to make up the multiplayer lobby system. class NetworkManager class NetworkManagerEditor class NetworkManagerHUD An extension for the NetworkManager that displays a default HUD for controlling the network state of the game. class NetworkMatchChecker Component that controls visibility of networked objects based on match id. interface NetworkMessage class NetworkOwnerChecker Component that limits visibility of networked objects to the authority client. class NetworkPingDisplay Component that will display the clients ping in milliseconds struct NetworkPingMessage struct NetworkPongMessage class NetworkProximityChecker Component that controls visibility of networked objects for players. class NetworkReader Binary stream Reader. Supports simple types, buffers, arrays, structs, and nested types class NetworkReaderExtensions class NetworkReaderPool Pool of NetworkReaders class NetworkRoomManager This is a specialized NetworkManager that includes a networked room. struct PendingPlayer class NetworkRoomPlayer This component works in conjunction with the NetworkRoomManager to make up the multiplayer room system. class NetworkSceneChecker Component that controls visibility of networked objects between scenes. class NetworkScenePostProcess class NetworkServer The NetworkServer. class NetworkStartPosition This component is used to make a gameObject a starting position for spawning player objects in multiplayer games. class NetworkTime Synchronize time between the server and the clients class NetworkTransform class NetworkTransformBase class DataPoint class NetworkTransformChild A component to synchronize the position of child transforms of networked objects. class NetworkVisibility class NetworkWriter Binary stream Writer. Supports simple types, buffers, arrays, structs, and nested types class NetworkWriterExtensions class NetworkWriterPool Pool of NetworkWriters struct NotReadyMessage struct ObjectDestroyMessage struct ObjectHideMessage struct ObjectSpawnFinishedMessage struct ObjectSpawnStartedMessage class Pool class PooledNetworkReader NetworkReader to be used with [NetworkReaderPool] class PooledNetworkWriter NetworkWriter to be used with [NetworkWriterPool] class PreprocessorDefine class Reader a class that holds readers for the different types Note that c# creates a different static variable for each type This will be populated by the weaver struct ReadyMessage namespace RemoteCalls struct CommandInfo class Invoker class RemoteCallHelper Used to help manage remote calls for NetworkBehaviours struct RpcMessage class SceneAttribute Converts a string property into a Scene property in the inspector class SceneDrawer struct SceneMessage class ServerAttribute Prevents clients from running this method. class ServerCallbackAttribute Prevents clients from running this method. class ShowInInspectorAttribute Used to show private SyncList in the inspector, namespace SimpleWeb class ArrayBuffer class BufferBucket class BufferPool Collection of different sized buffers class ClientHandshake Handles Handshake to the server when it first connects class ClientSslHelper class Connection class Constants Constant values that should never change interface IBufferOwner class Log struct Message class MessageProcessor class ReadHelper class ReadHelperException class ReceiveLoop struct Config class SendLoop struct Config class MaskHelper class SendLoopConfig class ServerHandshake Handles Handshakes from new clients on the server class ServerSslHelper class SimpleWebClient Client used to control websockets class SimpleWebJSLib class SimpleWebServer class SimpleWebTransport struct SslConfig class SslConfigLoader struct Cert struct TcpConfig class Utils class WebSocketClientStandAlone class WebSocketClientWebGl class WebSocketServer struct SpawnMessage class StringHash class SyncDictionary class SyncHashSet class SyncIDictionary struct Change class SyncList struct Change struct Enumerator class SyncListBool class SyncListDrawer class SyncListField class SyncListFloat class SyncListInt class SyncListString class SyncListUInt interface SyncObject A sync object is an object that can synchronize it's state between server and client, such as a SyncList class SyncSet struct Change class SyncSortedSet class SyncVarAttribute SyncVars are used to synchronize a variable from the server to all clients automatically. class SyncVarAttributeDrawer class TargetRpcAttribute The server uses a Remote Procedure Call (RPC) to run this function on a specific client. class TelepathyTransport class Transport Abstract transport layer component struct UIntDecimal struct UIntDouble struct UIntFloat class ULocalConnectionToClient class ULocalConnectionToServer class UnityEventNetworkConnection Unity Event for the NetworkConnection struct UpdateVarsMessage namespace Weaver class CommandProcessor Processes [Command] methods in NetworkBehaviour class CompilationFinishedHook class Extensions class GenerateWriterException class Helpers class Log class MethodProcessor class MonoBehaviourProcessor only shows warnings in case we use SyncVars etc. for MonoBehaviour. class NetworkBehaviourProcessor processes SyncVars, Cmds, Rpcs, etc. of NetworkBehaviours struct ClientRpcResult struct CmdResult class PropertySiteProcessor class ReaderWriterProcessor class Readers class Resolvers class RpcProcessor Processes [Rpc] methods in NetworkBehaviour class ServerClientAttributeProcessor class SyncObjectInitializer class SyncObjectProcessor class SyncVarProcessor Processes [SyncVar] in NetworkBehaviour class TargetRpcProcessor Processes [TargetRpc] methods in NetworkBehaviour class TypeReferenceComparer Comparers TypeReference using FullName class Weaver class WeaverException class WeaverLists class WeaverTypes class Writers class Writer A class that holds writers for the different types namespace Mono::CecilX namespace Mono::CecilX::Cil namespace Mono::CecilX::Rocks namespace Object class Patrol class PauseMenu namespace Stopwatch namespace Telepathy class Client class Common class Logger struct Message class NetworkStreamExtensions class SafeQueue class Server class ClientToken class ThreadExtensions class Utils namespace Unity::Collections::LowLevel::Unsafe namespace UnityAssembly namespace UnityEditor namespace UnityEditor::Callbacks namespace UnityEditor::Compilation namespace UnityEditorInternal namespace kcp2k class Kcp struct AckItem class KcpClient class KcpClientConnection class KcpConnection class KcpServer class KcpServerConnection class KcpTransport class Log class Segment class Utils Updated on 29 January 2021 at 18:34:50 UTC","title":"Classes"},{"location":"Cops%20And%20Robbers/Classes/classChatController/","text":"ChatController Inherits from MonoBehaviour Public Attributes Name TMP_InputField TMP_ChatInput TMP_Text TMP_ChatOutput Scrollbar ChatScrollbar Public Attributes Documentation variable TMP_ChatInput TMP_InputField TMP_ChatInput ; variable TMP_ChatOutput TMP_Text TMP_ChatOutput ; variable ChatScrollbar Scrollbar ChatScrollbar ; Updated on 29 January 2021 at 18:34:47 UTC","title":"ChatController"},{"location":"Cops%20And%20Robbers/Classes/classChatController/#chatcontroller","text":"Inherits from MonoBehaviour","title":"ChatController"},{"location":"Cops%20And%20Robbers/Classes/classChatController/#public-attributes","text":"Name TMP_InputField TMP_ChatInput TMP_Text TMP_ChatOutput Scrollbar ChatScrollbar","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classChatController/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classChatController/#variable-tmp_chatinput","text":"TMP_InputField TMP_ChatInput ;","title":"variable TMP_ChatInput"},{"location":"Cops%20And%20Robbers/Classes/classChatController/#variable-tmp_chatoutput","text":"TMP_Text TMP_ChatOutput ;","title":"variable TMP_ChatOutput"},{"location":"Cops%20And%20Robbers/Classes/classChatController/#variable-chatscrollbar","text":"Scrollbar ChatScrollbar ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable ChatScrollbar"},{"location":"Cops%20And%20Robbers/Classes/classEnvMapAnimator/","text":"EnvMapAnimator Inherits from MonoBehaviour Public Attributes Name Vector3 RotationSpeeds Public Attributes Documentation variable RotationSpeeds Vector3 RotationSpeeds ; Updated on 29 January 2021 at 18:34:47 UTC","title":"EnvMapAnimator"},{"location":"Cops%20And%20Robbers/Classes/classEnvMapAnimator/#envmapanimator","text":"Inherits from MonoBehaviour","title":"EnvMapAnimator"},{"location":"Cops%20And%20Robbers/Classes/classEnvMapAnimator/#public-attributes","text":"Name Vector3 RotationSpeeds","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classEnvMapAnimator/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classEnvMapAnimator/#variable-rotationspeeds","text":"Vector3 RotationSpeeds ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable RotationSpeeds"},{"location":"Cops%20And%20Robbers/Classes/classGameManager/","text":"GameManager Inherits from MonoBehaviour Public Attributes Name GameManager gameManager Public Attributes Documentation variable gameManager static GameManager gameManager ; Updated on 29 January 2021 at 18:34:47 UTC","title":"GameManager"},{"location":"Cops%20And%20Robbers/Classes/classGameManager/#gamemanager","text":"Inherits from MonoBehaviour","title":"GameManager"},{"location":"Cops%20And%20Robbers/Classes/classGameManager/#public-attributes","text":"Name GameManager gameManager","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classGameManager/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classGameManager/#variable-gamemanager","text":"static GameManager gameManager ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable gameManager"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1AttackCircle/","text":"Me::DerangedSenators::CopsAndRobbers::AttackCircle Inherits from MonoBehaviour Public Attributes Name PlayerAttack playerAttack Public Attributes Documentation variable playerAttack PlayerAttack playerAttack ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::AttackCircle"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1AttackCircle/#mederangedsenatorscopsandrobbersattackcircle","text":"Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::AttackCircle"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1AttackCircle/#public-attributes","text":"Name PlayerAttack playerAttack","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1AttackCircle/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1AttackCircle/#variable-playerattack","text":"PlayerAttack playerAttack ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable playerAttack"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1AutoHostClient/","text":"Me::DerangedSenators::CopsAndRobbers::AutoHostClient Inherits from NetworkBehaviour , MonoBehaviour Public Functions Name void JoinLocal () Additional inherited members Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Public Functions Documentation function JoinLocal inline void JoinLocal () Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::AutoHostClient"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1AutoHostClient/#mederangedsenatorscopsandrobbersautohostclient","text":"Inherits from NetworkBehaviour , MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::AutoHostClient"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1AutoHostClient/#public-functions","text":"Name void JoinLocal ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1AutoHostClient/#additional-inherited-members","text":"Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1AutoHostClient/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1AutoHostClient/#function-joinlocal","text":"inline void JoinLocal () Updated on 29 January 2021 at 18:34:49 UTC","title":"function JoinLocal"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1CameraController/","text":"Me::DerangedSenators::CopsAndRobbers::CameraController Camera Controller script Inherits from NetworkBehaviour , MonoBehaviour Public Functions Name virtual override void OnStartLocalPlayer () Called when the local player object has been set up. Public Attributes Name GameManager mGameManager CinemachineVirtualCamera mVirtualCamera Transform playerPrefab Additional inherited members Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Public Functions Documentation function OnStartLocalPlayer inline virtual override void OnStartLocalPlayer () Called when the local player object has been set up. Reimplements : Mirror::NetworkBehaviour::OnStartLocalPlayer This happens after OnStartClient() , as it is triggered by an ownership message from the server. This is an appropriate place to activate components or functionality that should only be active for the local player, such as cameras and input. Public Attributes Documentation variable mGameManager static GameManager mGameManager ; variable mVirtualCamera CinemachineVirtualCamera mVirtualCamera ; variable playerPrefab Transform playerPrefab ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::CameraController"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1CameraController/#mederangedsenatorscopsandrobberscameracontroller","text":"Camera Controller script Inherits from NetworkBehaviour , MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::CameraController"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1CameraController/#public-functions","text":"Name virtual override void OnStartLocalPlayer () Called when the local player object has been set up.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1CameraController/#public-attributes","text":"Name GameManager mGameManager CinemachineVirtualCamera mVirtualCamera Transform playerPrefab","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1CameraController/#additional-inherited-members","text":"Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1CameraController/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1CameraController/#function-onstartlocalplayer","text":"inline virtual override void OnStartLocalPlayer () Called when the local player object has been set up. Reimplements : Mirror::NetworkBehaviour::OnStartLocalPlayer This happens after OnStartClient() , as it is triggered by an ownership message from the server. This is an appropriate place to activate components or functionality that should only be active for the local player, such as cameras and input.","title":"function OnStartLocalPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1CameraController/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1CameraController/#variable-mgamemanager","text":"static GameManager mGameManager ;","title":"variable mGameManager"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1CameraController/#variable-mvirtualcamera","text":"CinemachineVirtualCamera mVirtualCamera ;","title":"variable mVirtualCamera"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1CameraController/#variable-playerprefab","text":"Transform playerPrefab ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable playerPrefab"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1CoinPickup/","text":"Me::DerangedSenators::CopsAndRobbers::CoinPickup Script for handling Coin Pickup Events Inherits from MonoBehaviour Public Attributes Name MoneyManager moneyManager GameObject moneyManagerGO Public Attributes Documentation variable moneyManager MoneyManager moneyManager ; variable moneyManagerGO GameObject moneyManagerGO ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::CoinPickup"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1CoinPickup/#mederangedsenatorscopsandrobberscoinpickup","text":"Script for handling Coin Pickup Events Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::CoinPickup"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1CoinPickup/#public-attributes","text":"Name MoneyManager moneyManager GameObject moneyManagerGO","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1CoinPickup/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1CoinPickup/#variable-moneymanager","text":"MoneyManager moneyManager ;","title":"variable moneyManager"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1CoinPickup/#variable-moneymanagergo","text":"GameObject moneyManagerGO ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable moneyManagerGO"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1EndOfRoundScript/","text":"Me::DerangedSenators::CopsAndRobbers::EndOfRoundScript Inherits from MonoBehaviour Public Functions Name void NextRound () Public Functions Documentation function NextRound inline void NextRound () Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::EndOfRoundScript"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1EndOfRoundScript/#mederangedsenatorscopsandrobbersendofroundscript","text":"Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::EndOfRoundScript"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1EndOfRoundScript/#public-functions","text":"Name void NextRound ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1EndOfRoundScript/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1EndOfRoundScript/#function-nextround","text":"inline void NextRound () Updated on 29 January 2021 at 18:34:49 UTC","title":"function NextRound"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GameManager/","text":"Me::DerangedSenators::CopsAndRobbers::GameManager Singleton Class that manages the Game Inherits from MonoBehaviour Public Attributes Name GameManager gameManager Public Attributes Documentation variable gameManager static GameManager gameManager ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::GameManager"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GameManager/#mederangedsenatorscopsandrobbersgamemanager","text":"Singleton Class that manages the Game Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::GameManager"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GameManager/#public-attributes","text":"Name GameManager gameManager","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GameManager/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GameManager/#variable-gamemanager","text":"static GameManager gameManager ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable gameManager"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GameNetworkManager/","text":"Me::DerangedSenators::CopsAndRobbers::GameNetworkManager Inherits from MonoBehaviour Public Functions Name void ClientConnect () void ServerListen () Public Attributes Name GameObject moneyBagPrefab Public Functions Documentation function ClientConnect inline void ClientConnect () function ServerListen inline void ServerListen () Public Attributes Documentation variable moneyBagPrefab GameObject moneyBagPrefab ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::GameNetworkManager"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GameNetworkManager/#mederangedsenatorscopsandrobbersgamenetworkmanager","text":"Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::GameNetworkManager"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GameNetworkManager/#public-functions","text":"Name void ClientConnect () void ServerListen ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GameNetworkManager/#public-attributes","text":"Name GameObject moneyBagPrefab","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GameNetworkManager/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GameNetworkManager/#function-clientconnect","text":"inline void ClientConnect ()","title":"function ClientConnect"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GameNetworkManager/#function-serverlisten","text":"inline void ServerListen ()","title":"function ServerListen"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GameNetworkManager/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GameNetworkManager/#variable-moneybagprefab","text":"GameObject moneyBagPrefab ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable moneyBagPrefab"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GameOverScript/","text":"Me::DerangedSenators::CopsAndRobbers::GameOverScript Inherits from MonoBehaviour Public Functions Name void NextRound () Public Functions Documentation function NextRound inline void NextRound () Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::GameOverScript"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GameOverScript/#mederangedsenatorscopsandrobbersgameoverscript","text":"Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::GameOverScript"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GameOverScript/#public-functions","text":"Name void NextRound ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GameOverScript/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GameOverScript/#function-nextround","text":"inline void NextRound () Updated on 29 January 2021 at 18:34:49 UTC","title":"function NextRound"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GenericSingleton/","text":"title: Me::DerangedSenators::CopsAndRobbers::GenericSingleton summary: Generic singleton Class. Extend this class to make singleton component. Example: Me::DerangedSenators::CopsAndRobbers::GenericSingleton Generic singleton Class. Extend this class to make singleton component. Example: More... Inherits from MonoBehaviour Public Functions Name void Init () This function is called when the instance is used the first time Put all the initializations you need here, as you would do in Awake Protected Functions Name virtual void Awake () virtual abstract void InternalInit () =0 virtual abstract void InternalOnDestroy () =0 Public Properties Name T instance Detailed Description template < T > class Me :: DerangedSenators :: CopsAndRobbers :: GenericSingleton ; Generic singleton Class. Extend this class to make singleton component. Example: public class Foo : GenericSingleton<Foo> . To get the instance of Foo class, use Foo.instance Override [Init()](/Documentation/Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GenericSingleton/#function-init) method instead of using Awake() from this class. Public Functions Documentation function Init inline void Init () This function is called when the instance is used the first time Put all the initializations you need here, as you would do in Awake Protected Functions Documentation function Awake inline virtual void Awake () function InternalInit virtual abstract void InternalInit () = 0 function InternalOnDestroy virtual abstract void InternalOnDestroy () = 0 Public Property Documentation property instance static T instance ; Updated on 29 January 2021 at 18:34:49 UTC","title":"classMe 1 1DerangedSenators 1 1CopsAndRobbers 1 1GenericSingleton"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GenericSingleton/#mederangedsenatorscopsandrobbersgenericsingleton","text":"Generic singleton Class. Extend this class to make singleton component. Example: More... Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::GenericSingleton"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GenericSingleton/#public-functions","text":"Name void Init () This function is called when the instance is used the first time Put all the initializations you need here, as you would do in Awake","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GenericSingleton/#protected-functions","text":"Name virtual void Awake () virtual abstract void InternalInit () =0 virtual abstract void InternalOnDestroy () =0","title":"Protected Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GenericSingleton/#public-properties","text":"Name T instance","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GenericSingleton/#detailed-description","text":"template < T > class Me :: DerangedSenators :: CopsAndRobbers :: GenericSingleton ; Generic singleton Class. Extend this class to make singleton component. Example: public class Foo : GenericSingleton<Foo> . To get the instance of Foo class, use Foo.instance Override [Init()](/Documentation/Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GenericSingleton/#function-init) method instead of using Awake() from this class.","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GenericSingleton/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GenericSingleton/#function-init","text":"inline void Init () This function is called when the instance is used the first time Put all the initializations you need here, as you would do in Awake","title":"function Init"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GenericSingleton/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GenericSingleton/#function-awake","text":"inline virtual void Awake ()","title":"function Awake"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GenericSingleton/#function-internalinit","text":"virtual abstract void InternalInit () = 0","title":"function InternalInit"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GenericSingleton/#function-internalondestroy","text":"virtual abstract void InternalOnDestroy () = 0","title":"function InternalOnDestroy"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GenericSingleton/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1GenericSingleton/#property-instance","text":"static T instance ; Updated on 29 January 2021 at 18:34:49 UTC","title":"property instance"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/","text":"Me::DerangedSenators::CopsAndRobbers::HealthBar Inherits from MonoBehaviour Public Functions Name void SetMaxHealth (float health) Setting health bar to max health. void SetHealth (float health) Updating health bar to current health. Public Attributes Name Slider slider Gradient gradient Image fill Public Functions Documentation function SetMaxHealth inline void SetMaxHealth ( float health ) Setting health bar to max health. Parameters : health Amount of health to be set to health bar at the beginning. function SetHealth inline void SetHealth ( float health ) Updating health bar to current health. Parameters : health Amount of health to be set to health bar. Public Attributes Documentation variable slider Slider slider ; variable gradient Gradient gradient ; variable fill Image fill ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::HealthBar"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/#mederangedsenatorscopsandrobbershealthbar","text":"Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::HealthBar"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/#public-functions","text":"Name void SetMaxHealth (float health) Setting health bar to max health. void SetHealth (float health) Updating health bar to current health.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/#public-attributes","text":"Name Slider slider Gradient gradient Image fill","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/#function-setmaxhealth","text":"inline void SetMaxHealth ( float health ) Setting health bar to max health. Parameters : health Amount of health to be set to health bar at the beginning.","title":"function SetMaxHealth"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/#function-sethealth","text":"inline void SetHealth ( float health ) Updating health bar to current health. Parameters : health Amount of health to be set to health bar.","title":"function SetHealth"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/#variable-slider","text":"Slider slider ;","title":"variable slider"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/#variable-gradient","text":"Gradient gradient ;","title":"variable gradient"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/#variable-fill","text":"Image fill ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable fill"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MainMenu/","text":"Me::DerangedSenators::CopsAndRobbers::MainMenu Inherits from MonoBehaviour Public Functions Name void PlayGame () Start the game void QuitGame () Quit the application Public Functions Documentation function PlayGame inline void PlayGame () Start the game function QuitGame inline void QuitGame () Quit the application Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::MainMenu"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MainMenu/#mederangedsenatorscopsandrobbersmainmenu","text":"Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::MainMenu"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MainMenu/#public-functions","text":"Name void PlayGame () Start the game void QuitGame () Quit the application","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MainMenu/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MainMenu/#function-playgame","text":"inline void PlayGame () Start the game","title":"function PlayGame"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MainMenu/#function-quitgame","text":"inline void QuitGame () Quit the application Updated on 29 January 2021 at 18:34:49 UTC","title":"function QuitGame"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Match/","text":"Me::DerangedSenators::CopsAndRobbers::Match Public Functions Name Match (string matchId, GameObject host) Match () Public Attributes Name string matchId SyncListGameObject players bool publicMatch bool inMatch bool matchFull Public Functions Documentation function Match inline Match ( string matchId , GameObject host ) function Match inline Match () Public Attributes Documentation variable matchId string matchId ; variable players SyncListGameObject players = new [ SyncListGameObject ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1SyncListGameObject / )(); variable publicMatch bool publicMatch ; variable inMatch bool inMatch ; variable matchFull bool matchFull ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::Match"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Match/#mederangedsenatorscopsandrobbersmatch","text":"","title":"Me::DerangedSenators::CopsAndRobbers::Match"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Match/#public-functions","text":"Name Match (string matchId, GameObject host) Match ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Match/#public-attributes","text":"Name string matchId SyncListGameObject players bool publicMatch bool inMatch bool matchFull","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Match/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Match/#function-match","text":"inline Match ( string matchId , GameObject host )","title":"function Match"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Match/#function-match_1","text":"inline Match ()","title":"function Match"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Match/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Match/#variable-matchid","text":"string matchId ;","title":"variable matchId"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Match/#variable-players","text":"SyncListGameObject players = new [ SyncListGameObject ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1SyncListGameObject / )();","title":"variable players"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Match/#variable-publicmatch","text":"bool publicMatch ;","title":"variable publicMatch"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Match/#variable-inmatch","text":"bool inMatch ;","title":"variable inMatch"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Match/#variable-matchfull","text":"bool matchFull ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable matchFull"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchExtensions/","text":"Me::DerangedSenators::CopsAndRobbers::MatchExtensions Public Functions Name Guid ToGuid (this string id) Public Functions Documentation function ToGuid static inline Guid ToGuid ( this string id ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::MatchExtensions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchExtensions/#mederangedsenatorscopsandrobbersmatchextensions","text":"","title":"Me::DerangedSenators::CopsAndRobbers::MatchExtensions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchExtensions/#public-functions","text":"Name Guid ToGuid (this string id)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchExtensions/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchExtensions/#function-toguid","text":"static inline Guid ToGuid ( this string id ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function ToGuid"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchMaker/","text":"Me::DerangedSenators::CopsAndRobbers::MatchMaker Inherits from NetworkBehaviour , MonoBehaviour Public Functions Name bool HostGame (string matchId, GameObject host, bool publicMatch, out int playerIndex, out int teamId) bool JoinGame (string matchId, GameObject player, out int playerIndex, out int teamId) bool SearchGame (GameObject player, out int playerIndex, out string matchId, out int teamId) void BeginGame (string matchId) void PlayerDisconnected ( Player player, string matchId) string GetRandomMatchId () Public Attributes Name MatchMaker instance SyncListMatch matches SyncList < string > matchIds Additional inherited members Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Public Functions Documentation function HostGame inline bool HostGame ( string matchId , GameObject host , bool publicMatch , out int playerIndex , out int teamId ) function JoinGame inline bool JoinGame ( string matchId , GameObject player , out int playerIndex , out int teamId ) function SearchGame inline bool SearchGame ( GameObject player , out int playerIndex , out string matchId , out int teamId ) function BeginGame inline void BeginGame ( string matchId ) function PlayerDisconnected inline void PlayerDisconnected ( Player player , string matchId ) function GetRandomMatchId static inline string GetRandomMatchId () Public Attributes Documentation variable instance static MatchMaker instance ; variable matches SyncListMatch matches = new [ SyncListMatch ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1SyncListMatch / )(); variable matchIds SyncList < string > matchIds = new [ SyncList ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1SyncList / ) < string > (); Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::MatchMaker"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchMaker/#mederangedsenatorscopsandrobbersmatchmaker","text":"Inherits from NetworkBehaviour , MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::MatchMaker"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchMaker/#public-functions","text":"Name bool HostGame (string matchId, GameObject host, bool publicMatch, out int playerIndex, out int teamId) bool JoinGame (string matchId, GameObject player, out int playerIndex, out int teamId) bool SearchGame (GameObject player, out int playerIndex, out string matchId, out int teamId) void BeginGame (string matchId) void PlayerDisconnected ( Player player, string matchId) string GetRandomMatchId ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchMaker/#public-attributes","text":"Name MatchMaker instance SyncListMatch matches SyncList < string > matchIds","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchMaker/#additional-inherited-members","text":"Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchMaker/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchMaker/#function-hostgame","text":"inline bool HostGame ( string matchId , GameObject host , bool publicMatch , out int playerIndex , out int teamId )","title":"function HostGame"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchMaker/#function-joingame","text":"inline bool JoinGame ( string matchId , GameObject player , out int playerIndex , out int teamId )","title":"function JoinGame"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchMaker/#function-searchgame","text":"inline bool SearchGame ( GameObject player , out int playerIndex , out string matchId , out int teamId )","title":"function SearchGame"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchMaker/#function-begingame","text":"inline void BeginGame ( string matchId )","title":"function BeginGame"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchMaker/#function-playerdisconnected","text":"inline void PlayerDisconnected ( Player player , string matchId )","title":"function PlayerDisconnected"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchMaker/#function-getrandommatchid","text":"static inline string GetRandomMatchId ()","title":"function GetRandomMatchId"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchMaker/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchMaker/#variable-instance","text":"static MatchMaker instance ;","title":"variable instance"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchMaker/#variable-matches","text":"SyncListMatch matches = new [ SyncListMatch ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1SyncListMatch / )();","title":"variable matches"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MatchMaker/#variable-matchids","text":"SyncList < string > matchIds = new [ SyncList ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1SyncList / ) < string > (); Updated on 29 January 2021 at 18:34:49 UTC","title":"variable matchIds"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MoneyManager/","text":"Me::DerangedSenators::CopsAndRobbers::MoneyManager Inherits from NetworkBehaviour , MonoBehaviour Public Functions Name void CollectMoney () Adds $100 to treasury. long getMoneyCount () Get amount of money in treasury. Additional inherited members Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Public Functions Documentation function CollectMoney inline void CollectMoney () Adds $100 to treasury. function getMoneyCount inline long getMoneyCount () Get amount of money in treasury. Return : amount of amount in treasury Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::MoneyManager"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MoneyManager/#mederangedsenatorscopsandrobbersmoneymanager","text":"Inherits from NetworkBehaviour , MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::MoneyManager"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MoneyManager/#public-functions","text":"Name void CollectMoney () Adds $100 to treasury. long getMoneyCount () Get amount of money in treasury.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MoneyManager/#additional-inherited-members","text":"Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MoneyManager/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MoneyManager/#function-collectmoney","text":"inline void CollectMoney () Adds $100 to treasury.","title":"function CollectMoney"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MoneyManager/#function-getmoneycount","text":"inline long getMoneyCount () Get amount of money in treasury. Return : amount of amount in treasury Updated on 29 January 2021 at 18:34:49 UTC","title":"function getMoneyCount"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/","text":"Me::DerangedSenators::CopsAndRobbers::Player Inherits from NetworkBehaviour , MonoBehaviour Public Functions Name virtual override void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual override void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual override void OnStopServer () Invoked on the server when the object is unspawned void HostGame (bool publicMatch) void JoinGame (string matchId) void SearchGame () void BeginGame () void StartGame () void DisconnectGame () int GetTeamId () Public Attributes Name Player localPlayer string MatchId int playerIndex int teamId Match currentMatch Additional inherited members Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Public Functions Documentation function OnStartClient inline virtual override void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. Reimplements : Mirror::NetworkBehaviour::OnStartClient Objects on the host have this function called, as there is a local client on the host. The values of SyncVars on object are guaranteed to be initialized correctly with the latest state from the server when this function is called on the client. function OnStopClient inline virtual override void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. Reimplements : Mirror::NetworkBehaviour::OnStopClient This can be used as a hook to invoke effects or do client specific cleanup. function OnStopServer inline virtual override void OnStopServer () Invoked on the server when the object is unspawned Reimplements : Mirror::NetworkBehaviour::OnStopServer Useful for saving object data in persistant storage function HostGame inline void HostGame ( bool publicMatch ) function JoinGame inline void JoinGame ( string matchId ) function SearchGame inline void SearchGame () function BeginGame inline void BeginGame () function StartGame inline void StartGame () function DisconnectGame inline void DisconnectGame () function GetTeamId inline int GetTeamId () Public Attributes Documentation variable localPlayer static Player localPlayer ; variable MatchId string MatchId ; variable playerIndex int playerIndex ; variable teamId int teamId ; variable currentMatch Match currentMatch ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::Player"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#mederangedsenatorscopsandrobbersplayer","text":"Inherits from NetworkBehaviour , MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::Player"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#public-functions","text":"Name virtual override void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual override void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual override void OnStopServer () Invoked on the server when the object is unspawned void HostGame (bool publicMatch) void JoinGame (string matchId) void SearchGame () void BeginGame () void StartGame () void DisconnectGame () int GetTeamId ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#public-attributes","text":"Name Player localPlayer string MatchId int playerIndex int teamId Match currentMatch","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#additional-inherited-members","text":"Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#function-onstartclient","text":"inline virtual override void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. Reimplements : Mirror::NetworkBehaviour::OnStartClient Objects on the host have this function called, as there is a local client on the host. The values of SyncVars on object are guaranteed to be initialized correctly with the latest state from the server when this function is called on the client.","title":"function OnStartClient"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#function-onstopclient","text":"inline virtual override void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. Reimplements : Mirror::NetworkBehaviour::OnStopClient This can be used as a hook to invoke effects or do client specific cleanup.","title":"function OnStopClient"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#function-onstopserver","text":"inline virtual override void OnStopServer () Invoked on the server when the object is unspawned Reimplements : Mirror::NetworkBehaviour::OnStopServer Useful for saving object data in persistant storage","title":"function OnStopServer"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#function-hostgame","text":"inline void HostGame ( bool publicMatch )","title":"function HostGame"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#function-joingame","text":"inline void JoinGame ( string matchId )","title":"function JoinGame"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#function-searchgame","text":"inline void SearchGame ()","title":"function SearchGame"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#function-begingame","text":"inline void BeginGame ()","title":"function BeginGame"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#function-startgame","text":"inline void StartGame ()","title":"function StartGame"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#function-disconnectgame","text":"inline void DisconnectGame ()","title":"function DisconnectGame"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#function-getteamid","text":"inline int GetTeamId ()","title":"function GetTeamId"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#variable-localplayer","text":"static Player localPlayer ;","title":"variable localPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#variable-matchid","text":"string MatchId ;","title":"variable MatchId"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#variable-playerindex","text":"int playerIndex ;","title":"variable playerIndex"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#variable-teamid","text":"int teamId ;","title":"variable teamId"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1Player/#variable-currentmatch","text":"Match currentMatch ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable currentMatch"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/","text":"Me::DerangedSenators::CopsAndRobbers::PlayerAttack Inherits from NetworkBehaviour , MonoBehaviour Public Functions Name void OnDrawGizmosSelected () Draw a circle around the player showing the attackRadius visually. Vector3 GetAttackPoint () Vector3 GetAttackPoint (float offset) int MouseXPositionRelativeToPlayer () Return -1 if mouse is left, 1 if mouse is right or 0. Public Attributes Name LayerMask enemyLayer float damage Additional inherited members Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Public Functions Documentation function OnDrawGizmosSelected inline void OnDrawGizmosSelected () Draw a circle around the player showing the attackRadius visually. function GetAttackPoint inline Vector3 GetAttackPoint () function GetAttackPoint inline Vector3 GetAttackPoint ( float offset ) function MouseXPositionRelativeToPlayer inline int MouseXPositionRelativeToPlayer () Return -1 if mouse is left, 1 if mouse is right or 0. Return : Return -1 if mouse is left, 1 if mouse is right or 0. Public Attributes Documentation variable enemyLayer LayerMask enemyLayer ; variable damage float damage = 10f ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::PlayerAttack"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#mederangedsenatorscopsandrobbersplayerattack","text":"Inherits from NetworkBehaviour , MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::PlayerAttack"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#public-functions","text":"Name void OnDrawGizmosSelected () Draw a circle around the player showing the attackRadius visually. Vector3 GetAttackPoint () Vector3 GetAttackPoint (float offset) int MouseXPositionRelativeToPlayer () Return -1 if mouse is left, 1 if mouse is right or 0.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#public-attributes","text":"Name LayerMask enemyLayer float damage","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#additional-inherited-members","text":"Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#function-ondrawgizmosselected","text":"inline void OnDrawGizmosSelected () Draw a circle around the player showing the attackRadius visually.","title":"function OnDrawGizmosSelected"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#function-getattackpoint","text":"inline Vector3 GetAttackPoint ()","title":"function GetAttackPoint"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#function-getattackpoint_1","text":"inline Vector3 GetAttackPoint ( float offset )","title":"function GetAttackPoint"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#function-mousexpositionrelativetoplayer","text":"inline int MouseXPositionRelativeToPlayer () Return -1 if mouse is left, 1 if mouse is right or 0. Return : Return -1 if mouse is left, 1 if mouse is right or 0.","title":"function MouseXPositionRelativeToPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#variable-enemylayer","text":"LayerMask enemyLayer ;","title":"variable enemyLayer"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#variable-damage","text":"float damage = 10f ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable damage"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerCameraContoller/","text":"Me::DerangedSenators::CopsAndRobbers::PlayerCameraContoller Script which defines the follow attribute for the Cinemachine Virtual Camera Inherits from NetworkBehaviour , MonoBehaviour Public Attributes Name Transform playerTransform Additional inherited members Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Public Attributes Documentation variable playerTransform Transform playerTransform ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::PlayerCameraContoller"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerCameraContoller/#mederangedsenatorscopsandrobbersplayercameracontoller","text":"Script which defines the follow attribute for the Cinemachine Virtual Camera Inherits from NetworkBehaviour , MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::PlayerCameraContoller"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerCameraContoller/#public-attributes","text":"Name Transform playerTransform","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerCameraContoller/#additional-inherited-members","text":"Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerCameraContoller/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerCameraContoller/#variable-playertransform","text":"Transform playerTransform ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable playerTransform"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/","text":"Me::DerangedSenators::CopsAndRobbers::PlayerControls Inherits from IInputActionCollection, IDisposable Public Classes Name struct AttackMapActions struct CameraViewPointsActions interface IAttackMapActions interface ICameraViewPointsActions interface IKeyMapActions interface IMouseActionsActions struct KeyMapActions struct MouseActionsActions Public Functions Name PlayerControls () void Dispose () bool Contains (InputAction action) IEnumerator< InputAction > GetEnumerator () void Enable () void Disable () Public Properties Name InputActionAsset asset InputBinding bindingMask ReadOnlyArray< InputDevice > devices InputControlScheme KeyboardMouseScheme Public Attributes Name ReadOnlyArray< InputControlScheme > controlSchemes KeyMapActions KeyMap AttackMapActions AttackMap CameraViewPointsActions CameraViewPoints MouseActionsActions MouseActions Public Functions Documentation function PlayerControls inline PlayerControls () function Dispose inline void Dispose () function Contains inline bool Contains ( InputAction action ) function GetEnumerator inline IEnumerator < InputAction > GetEnumerator () function Enable inline void Enable () function Disable inline void Disable () Public Property Documentation property asset InputActionAsset asset ; property bindingMask InputBinding bindingMask ; property devices ReadOnlyArray < InputDevice > devices ; property KeyboardMouseScheme InputControlScheme KeyboardMouseScheme ; Public Attributes Documentation variable controlSchemes ReadOnlyArray < InputControlScheme > controlSchemes => asset . controlSchemes ; variable KeyMap KeyMapActions KeyMap => new [ KeyMapActions ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1KeyMapActions / )( this ); variable AttackMap AttackMapActions AttackMap => new [ AttackMapActions ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1AttackMapActions / )( this ); variable CameraViewPoints CameraViewPointsActions CameraViewPoints => new [ CameraViewPointsActions ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1CameraViewPointsActions / )( this ); variable MouseActions MouseActionsActions MouseActions => new [ MouseActionsActions ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1MouseActionsActions / )( this ); Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::PlayerControls"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#mederangedsenatorscopsandrobbersplayercontrols","text":"Inherits from IInputActionCollection, IDisposable","title":"Me::DerangedSenators::CopsAndRobbers::PlayerControls"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#public-classes","text":"Name struct AttackMapActions struct CameraViewPointsActions interface IAttackMapActions interface ICameraViewPointsActions interface IKeyMapActions interface IMouseActionsActions struct KeyMapActions struct MouseActionsActions","title":"Public Classes"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#public-functions","text":"Name PlayerControls () void Dispose () bool Contains (InputAction action) IEnumerator< InputAction > GetEnumerator () void Enable () void Disable ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#public-properties","text":"Name InputActionAsset asset InputBinding bindingMask ReadOnlyArray< InputDevice > devices InputControlScheme KeyboardMouseScheme","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#public-attributes","text":"Name ReadOnlyArray< InputControlScheme > controlSchemes KeyMapActions KeyMap AttackMapActions AttackMap CameraViewPointsActions CameraViewPoints MouseActionsActions MouseActions","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#function-playercontrols","text":"inline PlayerControls ()","title":"function PlayerControls"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#function-dispose","text":"inline void Dispose ()","title":"function Dispose"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#function-contains","text":"inline bool Contains ( InputAction action )","title":"function Contains"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#function-getenumerator","text":"inline IEnumerator < InputAction > GetEnumerator ()","title":"function GetEnumerator"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#function-enable","text":"inline void Enable ()","title":"function Enable"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#function-disable","text":"inline void Disable ()","title":"function Disable"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#property-asset","text":"InputActionAsset asset ;","title":"property asset"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#property-bindingmask","text":"InputBinding bindingMask ;","title":"property bindingMask"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#property-devices","text":"ReadOnlyArray < InputDevice > devices ;","title":"property devices"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#property-keyboardmousescheme","text":"InputControlScheme KeyboardMouseScheme ;","title":"property KeyboardMouseScheme"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#variable-controlschemes","text":"ReadOnlyArray < InputControlScheme > controlSchemes => asset . controlSchemes ;","title":"variable controlSchemes"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#variable-keymap","text":"KeyMapActions KeyMap => new [ KeyMapActions ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1KeyMapActions / )( this );","title":"variable KeyMap"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#variable-attackmap","text":"AttackMapActions AttackMap => new [ AttackMapActions ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1AttackMapActions / )( this );","title":"variable AttackMap"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#variable-cameraviewpoints","text":"CameraViewPointsActions CameraViewPoints => new [ CameraViewPointsActions ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1CameraViewPointsActions / )( this );","title":"variable CameraViewPoints"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls/#variable-mouseactions","text":"MouseActionsActions MouseActions => new [ MouseActionsActions ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1MouseActionsActions / )( this ); Updated on 29 January 2021 at 18:34:49 UTC","title":"variable MouseActions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/","text":"Me::DerangedSenators::CopsAndRobbers::PlayerHealth This script is responsible for the function of the health bar and damage Inherits from NetworkBehaviour , MonoBehaviour Public Functions Name void Start () At the start of the project the player's health will equal to the max health void Update () This function checks if a user Used Space if it does the player will take 1.5 dmg void Damage (float damage) Server-Callable Function which can be used to handle player damage globally. Public Attributes Name float maxHealth float currentHealth HealthBar healthBar Additional inherited members Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Public Functions Documentation function Start inline void Start () At the start of the project the player's health will equal to the max health function Update inline void Update () This function checks if a user Used Space if it does the player will take 1.5 dmg function Damage inline void Damage ( float damage ) Server-Callable Function which can be used to handle player damage globally. Parameters : damage Amount of damage taken, to update health bar Public Attributes Documentation variable maxHealth float maxHealth = 100f ; variable currentHealth float currentHealth ; variable healthBar HealthBar healthBar ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::PlayerHealth"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#mederangedsenatorscopsandrobbersplayerhealth","text":"This script is responsible for the function of the health bar and damage Inherits from NetworkBehaviour , MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::PlayerHealth"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#public-functions","text":"Name void Start () At the start of the project the player's health will equal to the max health void Update () This function checks if a user Used Space if it does the player will take 1.5 dmg void Damage (float damage) Server-Callable Function which can be used to handle player damage globally.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#public-attributes","text":"Name float maxHealth float currentHealth HealthBar healthBar","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#additional-inherited-members","text":"Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#function-start","text":"inline void Start () At the start of the project the player's health will equal to the max health","title":"function Start"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#function-update","text":"inline void Update () This function checks if a user Used Space if it does the player will take 1.5 dmg","title":"function Update"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#function-damage","text":"inline void Damage ( float damage ) Server-Callable Function which can be used to handle player damage globally. Parameters : damage Amount of damage taken, to update health bar","title":"function Damage"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#variable-maxhealth","text":"float maxHealth = 100f ;","title":"variable maxHealth"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#variable-currenthealth","text":"float currentHealth ;","title":"variable currentHealth"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#variable-healthbar","text":"HealthBar healthBar ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable healthBar"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/","text":"Me::DerangedSenators::CopsAndRobbers::PlayerMovement Script that controls Player Movement More... Inherits from NetworkBehaviour , MonoBehaviour Public Functions Name Vector3 GetPosition () Public Attributes Name Animator animator float moveSpeed Rigidbody2D rigidBody float runSpeed Additional inherited members Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Detailed Description class Me :: DerangedSenators :: CopsAndRobbers :: PlayerMovement ; Script that controls Player Movement Author : Nisath Mohammed Hanzalah Ravat Public Functions Documentation function GetPosition inline Vector3 GetPosition () Public Attributes Documentation variable animator Animator animator ; variable moveSpeed float moveSpeed = 20f ; variable rigidBody Rigidbody2D rigidBody ; variable runSpeed float runSpeed = 300f ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::PlayerMovement"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#mederangedsenatorscopsandrobbersplayermovement","text":"Script that controls Player Movement More... Inherits from NetworkBehaviour , MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::PlayerMovement"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#public-functions","text":"Name Vector3 GetPosition ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#public-attributes","text":"Name Animator animator float moveSpeed Rigidbody2D rigidBody float runSpeed","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#additional-inherited-members","text":"Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#detailed-description","text":"class Me :: DerangedSenators :: CopsAndRobbers :: PlayerMovement ; Script that controls Player Movement Author : Nisath Mohammed Hanzalah Ravat","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#function-getposition","text":"inline Vector3 GetPosition ()","title":"function GetPosition"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#variable-animator","text":"Animator animator ;","title":"variable animator"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#variable-movespeed","text":"float moveSpeed = 20f ;","title":"variable moveSpeed"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#variable-rigidbody","text":"Rigidbody2D rigidBody ;","title":"variable rigidBody"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#variable-runspeed","text":"float runSpeed = 300f ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable runSpeed"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1RoundBreakTimeManager/","text":"Me::DerangedSenators::CopsAndRobbers::RoundBreakTimeManager Inherits from MonoBehaviour Public Functions Name void EndTimer () Call this method to force-end the timer + move to next scene. Public Attributes Name Button continueButton Public Functions Documentation function EndTimer inline void EndTimer () Call this method to force-end the timer + move to next scene. Public Attributes Documentation variable continueButton Button continueButton ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::RoundBreakTimeManager"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1RoundBreakTimeManager/#mederangedsenatorscopsandrobbersroundbreaktimemanager","text":"Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::RoundBreakTimeManager"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1RoundBreakTimeManager/#public-functions","text":"Name void EndTimer () Call this method to force-end the timer + move to next scene.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1RoundBreakTimeManager/#public-attributes","text":"Name Button continueButton","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1RoundBreakTimeManager/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1RoundBreakTimeManager/#function-endtimer","text":"inline void EndTimer () Call this method to force-end the timer + move to next scene.","title":"function EndTimer"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1RoundBreakTimeManager/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1RoundBreakTimeManager/#variable-continuebutton","text":"Button continueButton ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable continueButton"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1SyncListGameObject/","text":"Me::DerangedSenators::CopsAndRobbers::SyncListGameObject Inherits from SyncList< GameObject > , IList< T >, SyncObject Additional inherited members Public Classes inherited from SyncList< GameObject > Name struct Enumerator Public Events inherited from SyncList< GameObject > Name SyncListChanged Callback () Public Functions inherited from SyncList< GameObject > Name delegate void SyncListChanged (Operation op, int itemIndex, T oldItem, T newItem) SyncList () SyncList (IEqualityComparer< T > comparer) SyncList (IList< T > objects, IEqualityComparer< T > comparer =null) void Flush () Discard all the queued changes void Reset () Resets the SyncObject so that it can be re-used void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Add (T item) void AddRange (IEnumerable< T > range) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) int IndexOf (T item) int FindIndex (Predicate< T > match) T Find (Predicate< T > match) List< T > FindAll (Predicate< T > match) void Insert (int index, T item) void InsertRange (int index, IEnumerable< T > range) bool Remove (T item) void RemoveAt (int index) int RemoveAll (Predicate< T > match) Enumerator GetEnumerator () Public Properties inherited from SyncList< GameObject > Name bool IsReadOnly T this[int i] Public Attributes inherited from SyncList< GameObject > Name int Count bool IsDirty Public Functions inherited from SyncObject Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties inherited from SyncObject Name bool IsDirty true if there are changes since the last flush Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::SyncListGameObject"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1SyncListGameObject/#mederangedsenatorscopsandrobberssynclistgameobject","text":"Inherits from SyncList< GameObject > , IList< T >, SyncObject","title":"Me::DerangedSenators::CopsAndRobbers::SyncListGameObject"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1SyncListGameObject/#additional-inherited-members","text":"Public Classes inherited from SyncList< GameObject > Name struct Enumerator Public Events inherited from SyncList< GameObject > Name SyncListChanged Callback () Public Functions inherited from SyncList< GameObject > Name delegate void SyncListChanged (Operation op, int itemIndex, T oldItem, T newItem) SyncList () SyncList (IEqualityComparer< T > comparer) SyncList (IList< T > objects, IEqualityComparer< T > comparer =null) void Flush () Discard all the queued changes void Reset () Resets the SyncObject so that it can be re-used void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Add (T item) void AddRange (IEnumerable< T > range) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) int IndexOf (T item) int FindIndex (Predicate< T > match) T Find (Predicate< T > match) List< T > FindAll (Predicate< T > match) void Insert (int index, T item) void InsertRange (int index, IEnumerable< T > range) bool Remove (T item) void RemoveAt (int index) int RemoveAll (Predicate< T > match) Enumerator GetEnumerator () Public Properties inherited from SyncList< GameObject > Name bool IsReadOnly T this[int i] Public Attributes inherited from SyncList< GameObject > Name int Count bool IsDirty Public Functions inherited from SyncObject Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties inherited from SyncObject Name bool IsDirty true if there are changes since the last flush Updated on 29 January 2021 at 18:34:49 UTC","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1SyncListMatch/","text":"Me::DerangedSenators::CopsAndRobbers::SyncListMatch Inherits from SyncList< Match > , IList< T >, SyncObject Additional inherited members Public Classes inherited from SyncList< Match > Name struct Enumerator Public Events inherited from SyncList< Match > Name SyncListChanged Callback () Public Functions inherited from SyncList< Match > Name delegate void SyncListChanged (Operation op, int itemIndex, T oldItem, T newItem) SyncList () SyncList (IEqualityComparer< T > comparer) SyncList (IList< T > objects, IEqualityComparer< T > comparer =null) void Flush () Discard all the queued changes void Reset () Resets the SyncObject so that it can be re-used void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Add (T item) void AddRange (IEnumerable< T > range) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) int IndexOf (T item) int FindIndex (Predicate< T > match) T Find (Predicate< T > match) List< T > FindAll (Predicate< T > match) void Insert (int index, T item) void InsertRange (int index, IEnumerable< T > range) bool Remove (T item) void RemoveAt (int index) int RemoveAll (Predicate< T > match) Enumerator GetEnumerator () Public Properties inherited from SyncList< Match > Name bool IsReadOnly T this[int i] Public Attributes inherited from SyncList< Match > Name int Count bool IsDirty Public Functions inherited from SyncObject Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties inherited from SyncObject Name bool IsDirty true if there are changes since the last flush Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::SyncListMatch"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1SyncListMatch/#mederangedsenatorscopsandrobberssynclistmatch","text":"Inherits from SyncList< Match > , IList< T >, SyncObject","title":"Me::DerangedSenators::CopsAndRobbers::SyncListMatch"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1SyncListMatch/#additional-inherited-members","text":"Public Classes inherited from SyncList< Match > Name struct Enumerator Public Events inherited from SyncList< Match > Name SyncListChanged Callback () Public Functions inherited from SyncList< Match > Name delegate void SyncListChanged (Operation op, int itemIndex, T oldItem, T newItem) SyncList () SyncList (IEqualityComparer< T > comparer) SyncList (IList< T > objects, IEqualityComparer< T > comparer =null) void Flush () Discard all the queued changes void Reset () Resets the SyncObject so that it can be re-used void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Add (T item) void AddRange (IEnumerable< T > range) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) int IndexOf (T item) int FindIndex (Predicate< T > match) T Find (Predicate< T > match) List< T > FindAll (Predicate< T > match) void Insert (int index, T item) void InsertRange (int index, IEnumerable< T > range) bool Remove (T item) void RemoveAt (int index) int RemoveAll (Predicate< T > match) Enumerator GetEnumerator () Public Properties inherited from SyncList< Match > Name bool IsReadOnly T this[int i] Public Attributes inherited from SyncList< Match > Name int Count bool IsDirty Public Functions inherited from SyncObject Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties inherited from SyncObject Name bool IsDirty true if there are changes since the last flush Updated on 29 January 2021 at 18:34:49 UTC","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1TimeManager/","text":"Me::DerangedSenators::CopsAndRobbers::TimeManager Inherits from MonoBehaviour Public Functions Name void EndTimer () Call this method to force-end the timer + move to next scene. Public Functions Documentation function EndTimer inline void EndTimer () Call this method to force-end the timer + move to next scene. Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::TimeManager"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1TimeManager/#mederangedsenatorscopsandrobberstimemanager","text":"Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::TimeManager"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1TimeManager/#public-functions","text":"Name void EndTimer () Call this method to force-end the timer + move to next scene.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1TimeManager/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1TimeManager/#function-endtimer","text":"inline void EndTimer () Call this method to force-end the timer + move to next scene. Updated on 29 January 2021 at 18:34:49 UTC","title":"function EndTimer"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1TurnManager/","text":"Me::DerangedSenators::CopsAndRobbers::TurnManager Inherits from NetworkBehaviour , MonoBehaviour Public Functions Name void AddPlayer ( Player player) Additional inherited members Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Public Functions Documentation function AddPlayer inline void AddPlayer ( Player player ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::TurnManager"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1TurnManager/#mederangedsenatorscopsandrobbersturnmanager","text":"Inherits from NetworkBehaviour , MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::TurnManager"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1TurnManager/#public-functions","text":"Name void AddPlayer ( Player player)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1TurnManager/#additional-inherited-members","text":"Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1TurnManager/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1TurnManager/#function-addplayer","text":"inline void AddPlayer ( Player player ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function AddPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UILobby/","text":"Me::DerangedSenators::CopsAndRobbers::UILobby Inherits from MonoBehaviour Public Functions Name void HostPrivate () void HostPublic () void HostSuccess (bool success, string matchId) void Join () void JoinSuccess (bool success, string matchId) GameObject SpawnUIPlayerPrefab ( Player player) void BeginGame () void SearchGame () void SearchSuccess (bool success, string matchId) void SearchCancel () void DisconnectLobby () Public Attributes Name UILobby instance Public Functions Documentation function HostPrivate inline void HostPrivate () function HostPublic inline void HostPublic () function HostSuccess inline void HostSuccess ( bool success , string matchId ) function Join inline void Join () function JoinSuccess inline void JoinSuccess ( bool success , string matchId ) function SpawnUIPlayerPrefab inline GameObject SpawnUIPlayerPrefab ( Player player ) function BeginGame inline void BeginGame () function SearchGame inline void SearchGame () function SearchSuccess inline void SearchSuccess ( bool success , string matchId ) function SearchCancel inline void SearchCancel () function DisconnectLobby inline void DisconnectLobby () Public Attributes Documentation variable instance static UILobby instance ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::UILobby"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UILobby/#mederangedsenatorscopsandrobbersuilobby","text":"Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::UILobby"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UILobby/#public-functions","text":"Name void HostPrivate () void HostPublic () void HostSuccess (bool success, string matchId) void Join () void JoinSuccess (bool success, string matchId) GameObject SpawnUIPlayerPrefab ( Player player) void BeginGame () void SearchGame () void SearchSuccess (bool success, string matchId) void SearchCancel () void DisconnectLobby ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UILobby/#public-attributes","text":"Name UILobby instance","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UILobby/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UILobby/#function-hostprivate","text":"inline void HostPrivate ()","title":"function HostPrivate"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UILobby/#function-hostpublic","text":"inline void HostPublic ()","title":"function HostPublic"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UILobby/#function-hostsuccess","text":"inline void HostSuccess ( bool success , string matchId )","title":"function HostSuccess"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UILobby/#function-join","text":"inline void Join ()","title":"function Join"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UILobby/#function-joinsuccess","text":"inline void JoinSuccess ( bool success , string matchId )","title":"function JoinSuccess"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UILobby/#function-spawnuiplayerprefab","text":"inline GameObject SpawnUIPlayerPrefab ( Player player )","title":"function SpawnUIPlayerPrefab"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UILobby/#function-begingame","text":"inline void BeginGame ()","title":"function BeginGame"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UILobby/#function-searchgame","text":"inline void SearchGame ()","title":"function SearchGame"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UILobby/#function-searchsuccess","text":"inline void SearchSuccess ( bool success , string matchId )","title":"function SearchSuccess"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UILobby/#function-searchcancel","text":"inline void SearchCancel ()","title":"function SearchCancel"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UILobby/#function-disconnectlobby","text":"inline void DisconnectLobby ()","title":"function DisconnectLobby"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UILobby/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UILobby/#variable-instance","text":"static UILobby instance ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable instance"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UIPlayer/","text":"Me::DerangedSenators::CopsAndRobbers::UIPlayer Inherits from MonoBehaviour Public Functions Name void SetPlayer ( Player player) Public Functions Documentation function SetPlayer inline void SetPlayer ( Player player ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::UIPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UIPlayer/#mederangedsenatorscopsandrobbersuiplayer","text":"Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::UIPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UIPlayer/#public-functions","text":"Name void SetPlayer ( Player player)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UIPlayer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1UIPlayer/#function-setplayer","text":"inline void SetPlayer ( Player player ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function SetPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1VirtualCameraSingleton/","text":"Me::DerangedSenators::CopsAndRobbers::VirtualCameraSingleton Singleton Class to provide access to the Virtual Camera Inherits from MonoBehaviour Public Functions Name void HelloWorld () void assignFollowTransform (Transform toAssign) Public Properties Name VirtualCameraSingleton Instance Public Attributes Name CinemachineVirtualCamera mVirtualCamera Public Functions Documentation function HelloWorld inline void HelloWorld () function assignFollowTransform inline void assignFollowTransform ( Transform toAssign ) Public Property Documentation property Instance static VirtualCameraSingleton Instance ; Public Attributes Documentation variable mVirtualCamera CinemachineVirtualCamera mVirtualCamera ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::VirtualCameraSingleton"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1VirtualCameraSingleton/#mederangedsenatorscopsandrobbersvirtualcamerasingleton","text":"Singleton Class to provide access to the Virtual Camera Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::VirtualCameraSingleton"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1VirtualCameraSingleton/#public-functions","text":"Name void HelloWorld () void assignFollowTransform (Transform toAssign)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1VirtualCameraSingleton/#public-properties","text":"Name VirtualCameraSingleton Instance","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1VirtualCameraSingleton/#public-attributes","text":"Name CinemachineVirtualCamera mVirtualCamera","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1VirtualCameraSingleton/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1VirtualCameraSingleton/#function-helloworld","text":"inline void HelloWorld ()","title":"function HelloWorld"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1VirtualCameraSingleton/#function-assignfollowtransform","text":"inline void assignFollowTransform ( Transform toAssign )","title":"function assignFollowTransform"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1VirtualCameraSingleton/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1VirtualCameraSingleton/#property-instance","text":"static VirtualCameraSingleton Instance ;","title":"property Instance"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1VirtualCameraSingleton/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1VirtualCameraSingleton/#variable-mvirtualcamera","text":"CinemachineVirtualCamera mVirtualCamera ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable mVirtualCamera"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1WeaponOffset/","text":"Me::DerangedSenators::CopsAndRobbers::WeaponOffset Inherits from MonoBehaviour Public Attributes Name SpriteRenderer weaponSpriteRenderer GameObject cop Public Attributes Documentation variable weaponSpriteRenderer SpriteRenderer weaponSpriteRenderer ; variable cop GameObject cop ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::WeaponOffset"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1WeaponOffset/#mederangedsenatorscopsandrobbersweaponoffset","text":"Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::WeaponOffset"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1WeaponOffset/#public-attributes","text":"Name SpriteRenderer weaponSpriteRenderer GameObject cop","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1WeaponOffset/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1WeaponOffset/#variable-weaponspriterenderer","text":"SpriteRenderer weaponSpriteRenderer ;","title":"variable weaponSpriteRenderer"},{"location":"Cops%20And%20Robbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1WeaponOffset/#variable-cop","text":"GameObject cop ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable cop"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1BasicAuthenticator/","text":"Mirror::Authenticators::BasicAuthenticator Inherits from NetworkAuthenticator , MonoBehaviour Public Classes Name struct AuthRequestMessage struct AuthResponseMessage Public Functions Name virtual override void OnStartServer () Called on server from StartServer to initialize the Authenticator virtual override void OnStopServer () Called on server from StopServer to reset the Authenticator virtual override void OnServerAuthenticate ( NetworkConnection conn) Called on server from OnServerAuthenticateInternal when a client needs to authenticate void OnAuthRequestMessage ( NetworkConnection conn, AuthRequestMessage msg) Called on server when the client's AuthRequestMessage arrives virtual override void OnStartClient () Called on client from StartClient to initialize the Authenticator virtual override void OnStopClient () Called on client from StopClient to reset the Authenticator virtual override void OnClientAuthenticate ( NetworkConnection conn) Called on client from OnClientAuthenticateInternal when a client needs to authenticate void OnAuthResponseMessage ( NetworkConnection conn, AuthResponseMessage msg) Called on client when the server's AuthResponseMessage arrives Public Attributes Name string username string password Additional inherited members Protected Functions inherited from NetworkAuthenticator Name void ServerAccept ( NetworkConnection conn) void ServerReject ( NetworkConnection conn) void ClientAccept ( NetworkConnection conn) void ClientReject ( NetworkConnection conn) Public Attributes inherited from NetworkAuthenticator Name UnityEventNetworkConnection OnServerAuthenticated Notify subscribers on the server when a client is authenticated UnityEventNetworkConnection OnClientAuthenticated Notify subscribers on the client when the client is authenticated Public Functions Documentation function OnStartServer inline virtual override void OnStartServer () Called on server from StartServer to initialize the Authenticator Reimplements : Mirror::NetworkAuthenticator::OnStartServer Server message handlers should be registered in this method. function OnStopServer inline virtual override void OnStopServer () Called on server from StopServer to reset the Authenticator Reimplements : Mirror::NetworkAuthenticator::OnStopServer Server message handlers should be registered in this method. function OnServerAuthenticate inline virtual override void OnServerAuthenticate ( NetworkConnection conn ) Called on server from OnServerAuthenticateInternal when a client needs to authenticate Parameters : conn Connection to client. Reimplements : Mirror::NetworkAuthenticator::OnServerAuthenticate function OnAuthRequestMessage inline void OnAuthRequestMessage ( NetworkConnection conn , AuthRequestMessage msg ) Called on server when the client's AuthRequestMessage arrives Parameters : conn Connection to client. msg The message payload function OnStartClient inline virtual override void OnStartClient () Called on client from StartClient to initialize the Authenticator Reimplements : Mirror::NetworkAuthenticator::OnStartClient Client message handlers should be registered in this method. function OnStopClient inline virtual override void OnStopClient () Called on client from StopClient to reset the Authenticator Reimplements : Mirror::NetworkAuthenticator::OnStopClient Client message handlers should be unregistered in this method. function OnClientAuthenticate inline virtual override void OnClientAuthenticate ( NetworkConnection conn ) Called on client from OnClientAuthenticateInternal when a client needs to authenticate Parameters : conn Connection of the client. Reimplements : Mirror::NetworkAuthenticator::OnClientAuthenticate function OnAuthResponseMessage inline void OnAuthResponseMessage ( NetworkConnection conn , AuthResponseMessage msg ) Called on client when the server's AuthResponseMessage arrives Parameters : conn Connection to client. msg The message payload Public Attributes Documentation variable username string username ; variable password string password ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Authenticators::BasicAuthenticator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1BasicAuthenticator/#mirrorauthenticatorsbasicauthenticator","text":"Inherits from NetworkAuthenticator , MonoBehaviour","title":"Mirror::Authenticators::BasicAuthenticator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1BasicAuthenticator/#public-classes","text":"Name struct AuthRequestMessage struct AuthResponseMessage","title":"Public Classes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1BasicAuthenticator/#public-functions","text":"Name virtual override void OnStartServer () Called on server from StartServer to initialize the Authenticator virtual override void OnStopServer () Called on server from StopServer to reset the Authenticator virtual override void OnServerAuthenticate ( NetworkConnection conn) Called on server from OnServerAuthenticateInternal when a client needs to authenticate void OnAuthRequestMessage ( NetworkConnection conn, AuthRequestMessage msg) Called on server when the client's AuthRequestMessage arrives virtual override void OnStartClient () Called on client from StartClient to initialize the Authenticator virtual override void OnStopClient () Called on client from StopClient to reset the Authenticator virtual override void OnClientAuthenticate ( NetworkConnection conn) Called on client from OnClientAuthenticateInternal when a client needs to authenticate void OnAuthResponseMessage ( NetworkConnection conn, AuthResponseMessage msg) Called on client when the server's AuthResponseMessage arrives","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1BasicAuthenticator/#public-attributes","text":"Name string username string password","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1BasicAuthenticator/#additional-inherited-members","text":"Protected Functions inherited from NetworkAuthenticator Name void ServerAccept ( NetworkConnection conn) void ServerReject ( NetworkConnection conn) void ClientAccept ( NetworkConnection conn) void ClientReject ( NetworkConnection conn) Public Attributes inherited from NetworkAuthenticator Name UnityEventNetworkConnection OnServerAuthenticated Notify subscribers on the server when a client is authenticated UnityEventNetworkConnection OnClientAuthenticated Notify subscribers on the client when the client is authenticated","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1BasicAuthenticator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1BasicAuthenticator/#function-onstartserver","text":"inline virtual override void OnStartServer () Called on server from StartServer to initialize the Authenticator Reimplements : Mirror::NetworkAuthenticator::OnStartServer Server message handlers should be registered in this method.","title":"function OnStartServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1BasicAuthenticator/#function-onstopserver","text":"inline virtual override void OnStopServer () Called on server from StopServer to reset the Authenticator Reimplements : Mirror::NetworkAuthenticator::OnStopServer Server message handlers should be registered in this method.","title":"function OnStopServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1BasicAuthenticator/#function-onserverauthenticate","text":"inline virtual override void OnServerAuthenticate ( NetworkConnection conn ) Called on server from OnServerAuthenticateInternal when a client needs to authenticate Parameters : conn Connection to client. Reimplements : Mirror::NetworkAuthenticator::OnServerAuthenticate","title":"function OnServerAuthenticate"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1BasicAuthenticator/#function-onauthrequestmessage","text":"inline void OnAuthRequestMessage ( NetworkConnection conn , AuthRequestMessage msg ) Called on server when the client's AuthRequestMessage arrives Parameters : conn Connection to client. msg The message payload","title":"function OnAuthRequestMessage"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1BasicAuthenticator/#function-onstartclient","text":"inline virtual override void OnStartClient () Called on client from StartClient to initialize the Authenticator Reimplements : Mirror::NetworkAuthenticator::OnStartClient Client message handlers should be registered in this method.","title":"function OnStartClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1BasicAuthenticator/#function-onstopclient","text":"inline virtual override void OnStopClient () Called on client from StopClient to reset the Authenticator Reimplements : Mirror::NetworkAuthenticator::OnStopClient Client message handlers should be unregistered in this method.","title":"function OnStopClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1BasicAuthenticator/#function-onclientauthenticate","text":"inline virtual override void OnClientAuthenticate ( NetworkConnection conn ) Called on client from OnClientAuthenticateInternal when a client needs to authenticate Parameters : conn Connection of the client. Reimplements : Mirror::NetworkAuthenticator::OnClientAuthenticate","title":"function OnClientAuthenticate"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1BasicAuthenticator/#function-onauthresponsemessage","text":"inline void OnAuthResponseMessage ( NetworkConnection conn , AuthResponseMessage msg ) Called on client when the server's AuthResponseMessage arrives Parameters : conn Connection to client. msg The message payload","title":"function OnAuthResponseMessage"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1BasicAuthenticator/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1BasicAuthenticator/#variable-username","text":"string username ;","title":"variable username"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1BasicAuthenticator/#variable-password","text":"string password ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable password"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1TimeoutAuthenticator/","text":"Mirror::Authenticators::TimeoutAuthenticator An authenticator that disconnects connections if they don't authenticate within a specified time limit. Inherits from NetworkAuthenticator , MonoBehaviour Public Functions Name void Awake () virtual override void OnStartServer () Called on server from StartServer to initialize the Authenticator virtual override void OnStopServer () Called on server from StopServer to reset the Authenticator virtual override void OnStartClient () Called on client from StartClient to initialize the Authenticator virtual override void OnStopClient () Called on client from StopClient to reset the Authenticator virtual override void OnServerAuthenticate ( NetworkConnection conn) Called on server from OnServerAuthenticateInternal when a client needs to authenticate virtual override void OnClientAuthenticate ( NetworkConnection conn) Called on client from OnClientAuthenticateInternal when a client needs to authenticate Public Attributes Name NetworkAuthenticator authenticator float timeout Additional inherited members Protected Functions inherited from NetworkAuthenticator Name void ServerAccept ( NetworkConnection conn) void ServerReject ( NetworkConnection conn) void ClientAccept ( NetworkConnection conn) void ClientReject ( NetworkConnection conn) Public Attributes inherited from NetworkAuthenticator Name UnityEventNetworkConnection OnServerAuthenticated Notify subscribers on the server when a client is authenticated UnityEventNetworkConnection OnClientAuthenticated Notify subscribers on the client when the client is authenticated Public Functions Documentation function Awake inline void Awake () function OnStartServer inline virtual override void OnStartServer () Called on server from StartServer to initialize the Authenticator Reimplements : Mirror::NetworkAuthenticator::OnStartServer Server message handlers should be registered in this method. function OnStopServer inline virtual override void OnStopServer () Called on server from StopServer to reset the Authenticator Reimplements : Mirror::NetworkAuthenticator::OnStopServer Server message handlers should be unregistered in this method. function OnStartClient inline virtual override void OnStartClient () Called on client from StartClient to initialize the Authenticator Reimplements : Mirror::NetworkAuthenticator::OnStartClient Client message handlers should be registered in this method. function OnStopClient inline virtual override void OnStopClient () Called on client from StopClient to reset the Authenticator Reimplements : Mirror::NetworkAuthenticator::OnStopClient Client message handlers should be unregistered in this method. function OnServerAuthenticate inline virtual override void OnServerAuthenticate ( NetworkConnection conn ) Called on server from OnServerAuthenticateInternal when a client needs to authenticate Parameters : conn Connection to client. Reimplements : Mirror::NetworkAuthenticator::OnServerAuthenticate function OnClientAuthenticate inline virtual override void OnClientAuthenticate ( NetworkConnection conn ) Called on client from OnClientAuthenticateInternal when a client needs to authenticate Parameters : conn Connection of the client. Reimplements : Mirror::NetworkAuthenticator::OnClientAuthenticate Public Attributes Documentation variable authenticator NetworkAuthenticator authenticator ; variable timeout float timeout = 60 ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Authenticators::TimeoutAuthenticator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1TimeoutAuthenticator/#mirrorauthenticatorstimeoutauthenticator","text":"An authenticator that disconnects connections if they don't authenticate within a specified time limit. Inherits from NetworkAuthenticator , MonoBehaviour","title":"Mirror::Authenticators::TimeoutAuthenticator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1TimeoutAuthenticator/#public-functions","text":"Name void Awake () virtual override void OnStartServer () Called on server from StartServer to initialize the Authenticator virtual override void OnStopServer () Called on server from StopServer to reset the Authenticator virtual override void OnStartClient () Called on client from StartClient to initialize the Authenticator virtual override void OnStopClient () Called on client from StopClient to reset the Authenticator virtual override void OnServerAuthenticate ( NetworkConnection conn) Called on server from OnServerAuthenticateInternal when a client needs to authenticate virtual override void OnClientAuthenticate ( NetworkConnection conn) Called on client from OnClientAuthenticateInternal when a client needs to authenticate","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1TimeoutAuthenticator/#public-attributes","text":"Name NetworkAuthenticator authenticator float timeout","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1TimeoutAuthenticator/#additional-inherited-members","text":"Protected Functions inherited from NetworkAuthenticator Name void ServerAccept ( NetworkConnection conn) void ServerReject ( NetworkConnection conn) void ClientAccept ( NetworkConnection conn) void ClientReject ( NetworkConnection conn) Public Attributes inherited from NetworkAuthenticator Name UnityEventNetworkConnection OnServerAuthenticated Notify subscribers on the server when a client is authenticated UnityEventNetworkConnection OnClientAuthenticated Notify subscribers on the client when the client is authenticated","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1TimeoutAuthenticator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1TimeoutAuthenticator/#function-awake","text":"inline void Awake ()","title":"function Awake"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1TimeoutAuthenticator/#function-onstartserver","text":"inline virtual override void OnStartServer () Called on server from StartServer to initialize the Authenticator Reimplements : Mirror::NetworkAuthenticator::OnStartServer Server message handlers should be registered in this method.","title":"function OnStartServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1TimeoutAuthenticator/#function-onstopserver","text":"inline virtual override void OnStopServer () Called on server from StopServer to reset the Authenticator Reimplements : Mirror::NetworkAuthenticator::OnStopServer Server message handlers should be unregistered in this method.","title":"function OnStopServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1TimeoutAuthenticator/#function-onstartclient","text":"inline virtual override void OnStartClient () Called on client from StartClient to initialize the Authenticator Reimplements : Mirror::NetworkAuthenticator::OnStartClient Client message handlers should be registered in this method.","title":"function OnStartClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1TimeoutAuthenticator/#function-onstopclient","text":"inline virtual override void OnStopClient () Called on client from StopClient to reset the Authenticator Reimplements : Mirror::NetworkAuthenticator::OnStopClient Client message handlers should be unregistered in this method.","title":"function OnStopClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1TimeoutAuthenticator/#function-onserverauthenticate","text":"inline virtual override void OnServerAuthenticate ( NetworkConnection conn ) Called on server from OnServerAuthenticateInternal when a client needs to authenticate Parameters : conn Connection to client. Reimplements : Mirror::NetworkAuthenticator::OnServerAuthenticate","title":"function OnServerAuthenticate"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1TimeoutAuthenticator/#function-onclientauthenticate","text":"inline virtual override void OnClientAuthenticate ( NetworkConnection conn ) Called on client from OnClientAuthenticateInternal when a client needs to authenticate Parameters : conn Connection of the client. Reimplements : Mirror::NetworkAuthenticator::OnClientAuthenticate","title":"function OnClientAuthenticate"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1TimeoutAuthenticator/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1TimeoutAuthenticator/#variable-authenticator","text":"NetworkAuthenticator authenticator ;","title":"variable authenticator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Authenticators_1_1TimeoutAuthenticator/#variable-timeout","text":"float timeout = 60 ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable timeout"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Channels/","text":"Mirror::Channels Public Attributes Name const int DefaultReliable const int DefaultUnreliable Public Attributes Documentation variable DefaultReliable const int DefaultReliable = 0 ; variable DefaultUnreliable const int DefaultUnreliable = 1 ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::Channels"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Channels/#mirrorchannels","text":"","title":"Mirror::Channels"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Channels/#public-attributes","text":"Name const int DefaultReliable const int DefaultUnreliable","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Channels/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Channels/#variable-defaultreliable","text":"const int DefaultReliable = 0 ;","title":"variable DefaultReliable"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Channels/#variable-defaultunreliable","text":"const int DefaultUnreliable = 1 ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable DefaultUnreliable"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientAttribute/","text":"Mirror::ClientAttribute Prevents the server from running this method. More... Inherits from Attribute Detailed Description class Mirror :: ClientAttribute ; Prevents the server from running this method. Prints a warning if the server tries to execute this method. Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::ClientAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientAttribute/#mirrorclientattribute","text":"Prevents the server from running this method. More... Inherits from Attribute","title":"Mirror::ClientAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientAttribute/#detailed-description","text":"class Mirror :: ClientAttribute ; Prevents the server from running this method. Prints a warning if the server tries to execute this method. Updated on 29 January 2021 at 18:34:47 UTC","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientCallbackAttribute/","text":"Mirror::ClientCallbackAttribute Prevents the server from running this method. More... Inherits from Attribute Detailed Description class Mirror :: ClientCallbackAttribute ; Prevents the server from running this method. No warning is printed. Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::ClientCallbackAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientCallbackAttribute/#mirrorclientcallbackattribute","text":"Prevents the server from running this method. More... Inherits from Attribute","title":"Mirror::ClientCallbackAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientCallbackAttribute/#detailed-description","text":"class Mirror :: ClientCallbackAttribute ; Prevents the server from running this method. No warning is printed. Updated on 29 January 2021 at 18:34:47 UTC","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientRpcAttribute/","text":"Mirror::ClientRpcAttribute The server uses a Remote Procedure Call (RPC) to run this function on clients. Inherits from Attribute Public Attributes Name int channel bool excludeOwner Public Attributes Documentation variable channel int channel = Channels . DefaultReliable ; variable excludeOwner bool excludeOwner = false ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::ClientRpcAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientRpcAttribute/#mirrorclientrpcattribute","text":"The server uses a Remote Procedure Call (RPC) to run this function on clients. Inherits from Attribute","title":"Mirror::ClientRpcAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientRpcAttribute/#public-attributes","text":"Name int channel bool excludeOwner","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientRpcAttribute/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientRpcAttribute/#variable-channel","text":"int channel = Channels . DefaultReliable ;","title":"variable channel"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientRpcAttribute/#variable-excludeowner","text":"bool excludeOwner = false ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable excludeOwner"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/","text":"Mirror::ClientScene A client manager which contains static client information and functions. More... Public Events Name LocalplayerChanged onLocalPlayerChanged () Public Functions Name delegate void LocalplayerChanged ( NetworkIdentity oldPlayer, NetworkIdentity newPlayer) bool AddPlayer ( NetworkConnection readyConn) This adds a player GameObject for this client. This causes an AddPlayer message to be sent to the server, and NetworkManager.OnServerAddPlayer is called. bool Ready ( NetworkConnection conn) Signal that the client connection is ready to enter the game. void PrepareToSpawnSceneObjects () Call this after loading/unloading a scene in the client after connection to register the spawnable objects bool GetPrefab (Guid assetId, out GameObject prefab) Find the registered prefab for this asset id. Useful for debuggers void RegisterPrefab (GameObject prefab, Guid newAssetId) Registers a prefab with the spawning system. void RegisterPrefab (GameObject prefab) Registers a prefab with the spawning system. void RegisterPrefab (GameObject prefab, Guid newAssetId, SpawnDelegate spawnHandler, UnSpawnDelegate unspawnHandler) Registers a prefab with the spawning system. void RegisterPrefab (GameObject prefab, SpawnDelegate spawnHandler, UnSpawnDelegate unspawnHandler) Registers a prefab with the spawning system. void RegisterPrefab (GameObject prefab, Guid newAssetId, SpawnHandlerDelegate spawnHandler, UnSpawnDelegate unspawnHandler) Registers a prefab with the spawning system. void RegisterPrefab (GameObject prefab, SpawnHandlerDelegate spawnHandler, UnSpawnDelegate unspawnHandler) Registers a prefab with the spawning system. void UnregisterPrefab (GameObject prefab) Removes a registered spawn prefab that was setup with ClientScene.RegisterPrefab. void RegisterSpawnHandler (Guid assetId, SpawnDelegate spawnHandler, UnSpawnDelegate unspawnHandler) This is an advanced spawning function that registers a custom assetId with the UNET spawning system. void RegisterSpawnHandler (Guid assetId, SpawnHandlerDelegate spawnHandler, UnSpawnDelegate unspawnHandler) This is an advanced spawning function that registers a custom assetId with the UNET spawning system. void UnregisterSpawnHandler (Guid assetId) Removes a registered spawn handler function that was registered with ClientScene.RegisterHandler(). void ClearSpawners () This clears the registered spawn prefabs and spawn handler functions for this client. void DestroyAllClientObjects () Destroys all networked objects on the client. Public Properties Name NetworkIdentity localPlayer NetworkIdentity of the localPlayer bool ready Returns true when a client's connection has been set to ready. NetworkConnection readyConnection The NetworkConnection object that is currently \"ready\". This is the connection to the server where objects are spawned from. Public Attributes Name readonly Dictionary< Guid, GameObject > prefabs This is a dictionary of the prefabs that are registered on the client with ClientScene.RegisterPrefab(). readonly Dictionary< ulong, NetworkIdentity > spawnableObjects This is dictionary of the disabled NetworkIdentity objects in the scene that could be spawned by messages from the server. Detailed Description class Mirror :: ClientScene ; A client manager which contains static client information and functions. This manager contains references to tracked static local objects such as spawner registrations. It also has the default message handlers used by clients when they registered none themselves. The manager handles adding/removing player objects to the game after a client connection has been set as ready. The ClientScene is a singleton, and it has static convenience methods such as ClientScene.Ready(). The ClientScene is used by the NetworkManager , but it can be used by itself. As the ClientScene manages player objects on the client, it is where clients request to add players. The NetworkManager does this via the ClientScene automatically when auto-add-players is set, but it can be done through code using the function ClientScene.AddPlayer(). This sends an AddPlayer message to the server and will cause a player object to be created for this client. Like NetworkServer, the ClientScene understands the concept of the local client. The function ClientScene.ConnectLocalServer() is used to become a host by starting a local client (when a server is already running). Public Events Documentation event onLocalPlayerChanged static LocalplayerChanged onLocalPlayerChanged () Public Functions Documentation function LocalplayerChanged delegate void LocalplayerChanged ( NetworkIdentity oldPlayer , NetworkIdentity newPlayer ) function AddPlayer static inline bool AddPlayer ( NetworkConnection readyConn ) This adds a player GameObject for this client. This causes an AddPlayer message to be sent to the server, and NetworkManager.OnServerAddPlayer is called. Parameters : readyConn The connection to become ready for this client. Return : True if AddPlayer message was sent function Ready static inline bool Ready ( NetworkConnection conn ) Signal that the client connection is ready to enter the game. Parameters : conn The client connection which is ready. Return : True if succcessful This could be for example when a client enters an ongoing game and has finished loading the current scene. The server should respond to the SYSTEM_READY event with an appropriate handler which instantiates the players object for example. function PrepareToSpawnSceneObjects static inline void PrepareToSpawnSceneObjects () Call this after loading/unloading a scene in the client after connection to register the spawnable objects function GetPrefab static inline bool GetPrefab ( Guid assetId , out GameObject prefab ) Find the registered prefab for this asset id. Useful for debuggers Parameters : assetId asset id of the prefab prefab the prefab gameobject Return : true if prefab was registered function RegisterPrefab static inline void RegisterPrefab ( GameObject prefab , Guid newAssetId ) Registers a prefab with the spawning system. Parameters : prefab A GameObject that will be spawned. newAssetId An assetId to be assigned to this GameObject. This allows a dynamically created game object to be registered for an already known asset Id. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references. NOTE: newAssetId can not be set on GameObjects that already have an assetId function RegisterPrefab static inline void RegisterPrefab ( GameObject prefab ) Registers a prefab with the spawning system. Parameters : prefab A Prefab that will be spawned. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references. function RegisterPrefab static inline void RegisterPrefab ( GameObject prefab , Guid newAssetId , SpawnDelegate spawnHandler , UnSpawnDelegate unspawnHandler ) Registers a prefab with the spawning system. Parameters : prefab A GameObject that will be spawned. newAssetId An assetId to be assigned to this GameObject. This allows a dynamically created game object to be registered for an already known asset Id. spawnHandler A method to use as a custom spawnhandler on clients. unspawnHandler A method to use as a custom un-spawnhandler on clients. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references. NOTE: newAssetId can not be set on GameObjects that already have an assetId function RegisterPrefab static inline void RegisterPrefab ( GameObject prefab , SpawnDelegate spawnHandler , UnSpawnDelegate unspawnHandler ) Registers a prefab with the spawning system. Parameters : prefab A Prefab that will be spawned. spawnHandler A method to use as a custom spawnhandler on clients. unspawnHandler A method to use as a custom un-spawnhandler on clients. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references. function RegisterPrefab static inline void RegisterPrefab ( GameObject prefab , Guid newAssetId , SpawnHandlerDelegate spawnHandler , UnSpawnDelegate unspawnHandler ) Registers a prefab with the spawning system. Parameters : prefab A GameObject that will be spawned. newAssetId An assetId to be assigned to this GameObject. This allows a dynamically created game object to be registered for an already known asset Id. spawnHandler A method to use as a custom spawnhandler on clients. unspawnHandler A method to use as a custom un-spawnhandler on clients. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references. NOTE: newAssetId can not be set on GameObjects that already have an assetId function RegisterPrefab static inline void RegisterPrefab ( GameObject prefab , SpawnHandlerDelegate spawnHandler , UnSpawnDelegate unspawnHandler ) Registers a prefab with the spawning system. Parameters : prefab A Prefab that will be spawned. spawnHandler A method to use as a custom spawnhandler on clients. unspawnHandler A method to use as a custom un-spawnhandler on clients. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references. function UnregisterPrefab static inline void UnregisterPrefab ( GameObject prefab ) Removes a registered spawn prefab that was setup with ClientScene.RegisterPrefab. Parameters : prefab The prefab to be removed from registration. function RegisterSpawnHandler static inline void RegisterSpawnHandler ( Guid assetId , SpawnDelegate spawnHandler , UnSpawnDelegate unspawnHandler ) This is an advanced spawning function that registers a custom assetId with the UNET spawning system. Parameters : assetId Custom assetId string. spawnHandler A method to use as a custom spawnhandler on clients. unspawnHandler A method to use as a custom un-spawnhandler on clients. This can be used to register custom spawning methods for an assetId - instead of the usual method of registering spawning methods for a prefab. This should be used when no prefab exists for the spawned objects - such as when they are constructed dynamically at runtime from configuration data. function RegisterSpawnHandler static inline void RegisterSpawnHandler ( Guid assetId , SpawnHandlerDelegate spawnHandler , UnSpawnDelegate unspawnHandler ) This is an advanced spawning function that registers a custom assetId with the UNET spawning system. Parameters : assetId Custom assetId string. spawnHandler A method to use as a custom spawnhandler on clients. unspawnHandler A method to use as a custom un-spawnhandler on clients. This can be used to register custom spawning methods for an assetId - instead of the usual method of registering spawning methods for a prefab. This should be used when no prefab exists for the spawned objects - such as when they are constructed dynamically at runtime from configuration data. function UnregisterSpawnHandler static inline void UnregisterSpawnHandler ( Guid assetId ) Removes a registered spawn handler function that was registered with ClientScene.RegisterHandler(). Parameters : assetId The assetId for the handler to be removed for. function ClearSpawners static inline void ClearSpawners () This clears the registered spawn prefabs and spawn handler functions for this client. function DestroyAllClientObjects static inline void DestroyAllClientObjects () Destroys all networked objects on the client. This can be used to clean up when a network connection is closed. Public Property Documentation property localPlayer static NetworkIdentity localPlayer ; NetworkIdentity of the localPlayer property ready static bool ready ; Returns true when a client's connection has been set to ready. A client that is ready recieves state updates from the server, while a client that is not ready does not. This useful when the state of the game is not normal, such as a scene change or end-of-game. This is read-only. To change the ready state of a client, use ClientScene.Ready(). The server is able to set the ready state of clients using NetworkServer.SetClientReady(), NetworkServer.SetClientNotReady() and NetworkServer.SetAllClientsNotReady(). This is done when changing scenes so that clients don't receive state update messages during scene loading. property readyConnection static NetworkConnection readyConnection ; The NetworkConnection object that is currently \"ready\". This is the connection to the server where objects are spawned from. This connection can be used to send messages to the server. There can only be one ClientScene and ready connection at a time. Public Attributes Documentation variable prefabs static readonly Dictionary < Guid , GameObject > prefabs = new Dictionary < Guid , GameObject > (); This is a dictionary of the prefabs that are registered on the client with ClientScene.RegisterPrefab(). The key to the dictionary is the prefab asset Id. variable spawnableObjects static readonly Dictionary < ulong , NetworkIdentity > spawnableObjects = new Dictionary < ulong , [ NetworkIdentity ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1NetworkIdentity / ) > (); This is dictionary of the disabled NetworkIdentity objects in the scene that could be spawned by messages from the server. The key to the dictionary is the NetworkIdentity sceneId. Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::ClientScene"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#mirrorclientscene","text":"A client manager which contains static client information and functions. More...","title":"Mirror::ClientScene"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#public-events","text":"Name LocalplayerChanged onLocalPlayerChanged ()","title":"Public Events"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#public-functions","text":"Name delegate void LocalplayerChanged ( NetworkIdentity oldPlayer, NetworkIdentity newPlayer) bool AddPlayer ( NetworkConnection readyConn) This adds a player GameObject for this client. This causes an AddPlayer message to be sent to the server, and NetworkManager.OnServerAddPlayer is called. bool Ready ( NetworkConnection conn) Signal that the client connection is ready to enter the game. void PrepareToSpawnSceneObjects () Call this after loading/unloading a scene in the client after connection to register the spawnable objects bool GetPrefab (Guid assetId, out GameObject prefab) Find the registered prefab for this asset id. Useful for debuggers void RegisterPrefab (GameObject prefab, Guid newAssetId) Registers a prefab with the spawning system. void RegisterPrefab (GameObject prefab) Registers a prefab with the spawning system. void RegisterPrefab (GameObject prefab, Guid newAssetId, SpawnDelegate spawnHandler, UnSpawnDelegate unspawnHandler) Registers a prefab with the spawning system. void RegisterPrefab (GameObject prefab, SpawnDelegate spawnHandler, UnSpawnDelegate unspawnHandler) Registers a prefab with the spawning system. void RegisterPrefab (GameObject prefab, Guid newAssetId, SpawnHandlerDelegate spawnHandler, UnSpawnDelegate unspawnHandler) Registers a prefab with the spawning system. void RegisterPrefab (GameObject prefab, SpawnHandlerDelegate spawnHandler, UnSpawnDelegate unspawnHandler) Registers a prefab with the spawning system. void UnregisterPrefab (GameObject prefab) Removes a registered spawn prefab that was setup with ClientScene.RegisterPrefab. void RegisterSpawnHandler (Guid assetId, SpawnDelegate spawnHandler, UnSpawnDelegate unspawnHandler) This is an advanced spawning function that registers a custom assetId with the UNET spawning system. void RegisterSpawnHandler (Guid assetId, SpawnHandlerDelegate spawnHandler, UnSpawnDelegate unspawnHandler) This is an advanced spawning function that registers a custom assetId with the UNET spawning system. void UnregisterSpawnHandler (Guid assetId) Removes a registered spawn handler function that was registered with ClientScene.RegisterHandler(). void ClearSpawners () This clears the registered spawn prefabs and spawn handler functions for this client. void DestroyAllClientObjects () Destroys all networked objects on the client.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#public-properties","text":"Name NetworkIdentity localPlayer NetworkIdentity of the localPlayer bool ready Returns true when a client's connection has been set to ready. NetworkConnection readyConnection The NetworkConnection object that is currently \"ready\". This is the connection to the server where objects are spawned from.","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#public-attributes","text":"Name readonly Dictionary< Guid, GameObject > prefabs This is a dictionary of the prefabs that are registered on the client with ClientScene.RegisterPrefab(). readonly Dictionary< ulong, NetworkIdentity > spawnableObjects This is dictionary of the disabled NetworkIdentity objects in the scene that could be spawned by messages from the server.","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#detailed-description","text":"class Mirror :: ClientScene ; A client manager which contains static client information and functions. This manager contains references to tracked static local objects such as spawner registrations. It also has the default message handlers used by clients when they registered none themselves. The manager handles adding/removing player objects to the game after a client connection has been set as ready. The ClientScene is a singleton, and it has static convenience methods such as ClientScene.Ready(). The ClientScene is used by the NetworkManager , but it can be used by itself. As the ClientScene manages player objects on the client, it is where clients request to add players. The NetworkManager does this via the ClientScene automatically when auto-add-players is set, but it can be done through code using the function ClientScene.AddPlayer(). This sends an AddPlayer message to the server and will cause a player object to be created for this client. Like NetworkServer, the ClientScene understands the concept of the local client. The function ClientScene.ConnectLocalServer() is used to become a host by starting a local client (when a server is already running).","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#public-events-documentation","text":"","title":"Public Events Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#event-onlocalplayerchanged","text":"static LocalplayerChanged onLocalPlayerChanged ()","title":"event onLocalPlayerChanged"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#function-localplayerchanged","text":"delegate void LocalplayerChanged ( NetworkIdentity oldPlayer , NetworkIdentity newPlayer )","title":"function LocalplayerChanged"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#function-addplayer","text":"static inline bool AddPlayer ( NetworkConnection readyConn ) This adds a player GameObject for this client. This causes an AddPlayer message to be sent to the server, and NetworkManager.OnServerAddPlayer is called. Parameters : readyConn The connection to become ready for this client. Return : True if AddPlayer message was sent","title":"function AddPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#function-ready","text":"static inline bool Ready ( NetworkConnection conn ) Signal that the client connection is ready to enter the game. Parameters : conn The client connection which is ready. Return : True if succcessful This could be for example when a client enters an ongoing game and has finished loading the current scene. The server should respond to the SYSTEM_READY event with an appropriate handler which instantiates the players object for example.","title":"function Ready"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#function-preparetospawnsceneobjects","text":"static inline void PrepareToSpawnSceneObjects () Call this after loading/unloading a scene in the client after connection to register the spawnable objects","title":"function PrepareToSpawnSceneObjects"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#function-getprefab","text":"static inline bool GetPrefab ( Guid assetId , out GameObject prefab ) Find the registered prefab for this asset id. Useful for debuggers Parameters : assetId asset id of the prefab prefab the prefab gameobject Return : true if prefab was registered","title":"function GetPrefab"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#function-registerprefab","text":"static inline void RegisterPrefab ( GameObject prefab , Guid newAssetId ) Registers a prefab with the spawning system. Parameters : prefab A GameObject that will be spawned. newAssetId An assetId to be assigned to this GameObject. This allows a dynamically created game object to be registered for an already known asset Id. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references. NOTE: newAssetId can not be set on GameObjects that already have an assetId","title":"function RegisterPrefab"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#function-registerprefab_1","text":"static inline void RegisterPrefab ( GameObject prefab ) Registers a prefab with the spawning system. Parameters : prefab A Prefab that will be spawned. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references.","title":"function RegisterPrefab"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#function-registerprefab_2","text":"static inline void RegisterPrefab ( GameObject prefab , Guid newAssetId , SpawnDelegate spawnHandler , UnSpawnDelegate unspawnHandler ) Registers a prefab with the spawning system. Parameters : prefab A GameObject that will be spawned. newAssetId An assetId to be assigned to this GameObject. This allows a dynamically created game object to be registered for an already known asset Id. spawnHandler A method to use as a custom spawnhandler on clients. unspawnHandler A method to use as a custom un-spawnhandler on clients. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references. NOTE: newAssetId can not be set on GameObjects that already have an assetId","title":"function RegisterPrefab"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#function-registerprefab_3","text":"static inline void RegisterPrefab ( GameObject prefab , SpawnDelegate spawnHandler , UnSpawnDelegate unspawnHandler ) Registers a prefab with the spawning system. Parameters : prefab A Prefab that will be spawned. spawnHandler A method to use as a custom spawnhandler on clients. unspawnHandler A method to use as a custom un-spawnhandler on clients. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references.","title":"function RegisterPrefab"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#function-registerprefab_4","text":"static inline void RegisterPrefab ( GameObject prefab , Guid newAssetId , SpawnHandlerDelegate spawnHandler , UnSpawnDelegate unspawnHandler ) Registers a prefab with the spawning system. Parameters : prefab A GameObject that will be spawned. newAssetId An assetId to be assigned to this GameObject. This allows a dynamically created game object to be registered for an already known asset Id. spawnHandler A method to use as a custom spawnhandler on clients. unspawnHandler A method to use as a custom un-spawnhandler on clients. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references. NOTE: newAssetId can not be set on GameObjects that already have an assetId","title":"function RegisterPrefab"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#function-registerprefab_5","text":"static inline void RegisterPrefab ( GameObject prefab , SpawnHandlerDelegate spawnHandler , UnSpawnDelegate unspawnHandler ) Registers a prefab with the spawning system. Parameters : prefab A Prefab that will be spawned. spawnHandler A method to use as a custom spawnhandler on clients. unspawnHandler A method to use as a custom un-spawnhandler on clients. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references.","title":"function RegisterPrefab"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#function-unregisterprefab","text":"static inline void UnregisterPrefab ( GameObject prefab ) Removes a registered spawn prefab that was setup with ClientScene.RegisterPrefab. Parameters : prefab The prefab to be removed from registration.","title":"function UnregisterPrefab"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#function-registerspawnhandler","text":"static inline void RegisterSpawnHandler ( Guid assetId , SpawnDelegate spawnHandler , UnSpawnDelegate unspawnHandler ) This is an advanced spawning function that registers a custom assetId with the UNET spawning system. Parameters : assetId Custom assetId string. spawnHandler A method to use as a custom spawnhandler on clients. unspawnHandler A method to use as a custom un-spawnhandler on clients. This can be used to register custom spawning methods for an assetId - instead of the usual method of registering spawning methods for a prefab. This should be used when no prefab exists for the spawned objects - such as when they are constructed dynamically at runtime from configuration data.","title":"function RegisterSpawnHandler"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#function-registerspawnhandler_1","text":"static inline void RegisterSpawnHandler ( Guid assetId , SpawnHandlerDelegate spawnHandler , UnSpawnDelegate unspawnHandler ) This is an advanced spawning function that registers a custom assetId with the UNET spawning system. Parameters : assetId Custom assetId string. spawnHandler A method to use as a custom spawnhandler on clients. unspawnHandler A method to use as a custom un-spawnhandler on clients. This can be used to register custom spawning methods for an assetId - instead of the usual method of registering spawning methods for a prefab. This should be used when no prefab exists for the spawned objects - such as when they are constructed dynamically at runtime from configuration data.","title":"function RegisterSpawnHandler"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#function-unregisterspawnhandler","text":"static inline void UnregisterSpawnHandler ( Guid assetId ) Removes a registered spawn handler function that was registered with ClientScene.RegisterHandler(). Parameters : assetId The assetId for the handler to be removed for.","title":"function UnregisterSpawnHandler"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#function-clearspawners","text":"static inline void ClearSpawners () This clears the registered spawn prefabs and spawn handler functions for this client.","title":"function ClearSpawners"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#function-destroyallclientobjects","text":"static inline void DestroyAllClientObjects () Destroys all networked objects on the client. This can be used to clean up when a network connection is closed.","title":"function DestroyAllClientObjects"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#property-localplayer","text":"static NetworkIdentity localPlayer ; NetworkIdentity of the localPlayer","title":"property localPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#property-ready","text":"static bool ready ; Returns true when a client's connection has been set to ready. A client that is ready recieves state updates from the server, while a client that is not ready does not. This useful when the state of the game is not normal, such as a scene change or end-of-game. This is read-only. To change the ready state of a client, use ClientScene.Ready(). The server is able to set the ready state of clients using NetworkServer.SetClientReady(), NetworkServer.SetClientNotReady() and NetworkServer.SetAllClientsNotReady(). This is done when changing scenes so that clients don't receive state update messages during scene loading.","title":"property ready"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#property-readyconnection","text":"static NetworkConnection readyConnection ; The NetworkConnection object that is currently \"ready\". This is the connection to the server where objects are spawned from. This connection can be used to send messages to the server. There can only be one ClientScene and ready connection at a time.","title":"property readyConnection"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#variable-prefabs","text":"static readonly Dictionary < Guid , GameObject > prefabs = new Dictionary < Guid , GameObject > (); This is a dictionary of the prefabs that are registered on the client with ClientScene.RegisterPrefab(). The key to the dictionary is the prefab asset Id.","title":"variable prefabs"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ClientScene/#variable-spawnableobjects","text":"static readonly Dictionary < ulong , NetworkIdentity > spawnableObjects = new Dictionary < ulong , [ NetworkIdentity ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1NetworkIdentity / ) > (); This is dictionary of the disabled NetworkIdentity objects in the scene that could be spawned by messages from the server. The key to the dictionary is the NetworkIdentity sceneId. Updated on 29 January 2021 at 18:34:47 UTC","title":"variable spawnableObjects"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ApiConnector/","text":"Mirror::Cloud::ApiConnector Used to requests and responses from the mirror api Inherits from MonoBehaviour, IApiConnector , ICoroutineRunner , IUnityEqualCheck Public Functions Name void OnDestroy () Public Properties Name ListServer ListServer Additional inherited members Public Functions inherited from ICoroutineRunner Name Coroutine StartCoroutine (IEnumerator routine) void StopCoroutine (IEnumerator routine) void StopCoroutine (Coroutine routine) Public Functions Documentation function OnDestroy inline void OnDestroy () Public Property Documentation property ListServer ListServer ListServer ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::ApiConnector"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ApiConnector/#mirrorcloudapiconnector","text":"Used to requests and responses from the mirror api Inherits from MonoBehaviour, IApiConnector , ICoroutineRunner , IUnityEqualCheck","title":"Mirror::Cloud::ApiConnector"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ApiConnector/#public-functions","text":"Name void OnDestroy ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ApiConnector/#public-properties","text":"Name ListServer ListServer","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ApiConnector/#additional-inherited-members","text":"Public Functions inherited from ICoroutineRunner Name Coroutine StartCoroutine (IEnumerator routine) void StopCoroutine (IEnumerator routine) void StopCoroutine (Coroutine routine)","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ApiConnector/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ApiConnector/#function-ondestroy","text":"inline void OnDestroy ()","title":"function OnDestroy"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ApiConnector/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ApiConnector/#property-listserver","text":"ListServer ListServer ; Updated on 29 January 2021 at 18:34:48 UTC","title":"property ListServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1BaseApi/","text":"Mirror::Cloud::BaseApi Inherited by ListServerBaseApi Protected Functions Name BaseApi ( ICoroutineRunner runner, IRequestCreator requestCreator) Protected Attributes Name readonly ICoroutineRunner runner readonly IRequestCreator requestCreator Protected Functions Documentation function BaseApi inline BaseApi ( ICoroutineRunner runner , IRequestCreator requestCreator ) Protected Attributes Documentation variable runner readonly ICoroutineRunner runner ; variable requestCreator readonly IRequestCreator requestCreator ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::BaseApi"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1BaseApi/#mirrorcloudbaseapi","text":"Inherited by ListServerBaseApi","title":"Mirror::Cloud::BaseApi"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1BaseApi/#protected-functions","text":"Name BaseApi ( ICoroutineRunner runner, IRequestCreator requestCreator)","title":"Protected Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1BaseApi/#protected-attributes","text":"Name readonly ICoroutineRunner runner readonly IRequestCreator requestCreator","title":"Protected Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1BaseApi/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1BaseApi/#function-baseapi","text":"inline BaseApi ( ICoroutineRunner runner , IRequestCreator requestCreator )","title":"function BaseApi"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1BaseApi/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1BaseApi/#variable-runner","text":"readonly ICoroutineRunner runner ;","title":"variable runner"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1BaseApi/#variable-requestcreator","text":"readonly IRequestCreator requestCreator ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable requestCreator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1Extensions/","text":"Mirror::Cloud::Extensions Public Functions Name bool IsOk (this UnityWebRequest webRequest) Public Functions Documentation function IsOk static inline bool IsOk ( this UnityWebRequest webRequest ) Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::Extensions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1Extensions/#mirrorcloudextensions","text":"","title":"Mirror::Cloud::Extensions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1Extensions/#public-functions","text":"Name bool IsOk (this UnityWebRequest webRequest)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1Extensions/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1Extensions/#function-isok","text":"static inline bool IsOk ( this UnityWebRequest webRequest ) Updated on 29 January 2021 at 18:34:48 UTC","title":"function IsOk"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1CustomDataHelper/","text":"Mirror::Cloud::ListServerService::CustomDataHelper Public Functions Name Dictionary< string, string > ToDictionary (this KeyValue [] keyValues) KeyValue [] ToKeyValueArray (this Dictionary< string, string > dictionary) void ValidateCustomData ( KeyValue [] customData) Public Functions Documentation function ToDictionary static inline Dictionary < string , string > ToDictionary ( this KeyValue [] keyValues ) function ToKeyValueArray static inline KeyValue [] ToKeyValueArray ( this Dictionary < string , string > dictionary ) function ValidateCustomData static inline void ValidateCustomData ( KeyValue [] customData ) Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::ListServerService::CustomDataHelper"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1CustomDataHelper/#mirrorcloudlistserverservicecustomdatahelper","text":"","title":"Mirror::Cloud::ListServerService::CustomDataHelper"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1CustomDataHelper/#public-functions","text":"Name Dictionary< string, string > ToDictionary (this KeyValue [] keyValues) KeyValue [] ToKeyValueArray (this Dictionary< string, string > dictionary) void ValidateCustomData ( KeyValue [] customData)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1CustomDataHelper/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1CustomDataHelper/#function-todictionary","text":"static inline Dictionary < string , string > ToDictionary ( this KeyValue [] keyValues )","title":"function ToDictionary"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1CustomDataHelper/#function-tokeyvaluearray","text":"static inline KeyValue [] ToKeyValueArray ( this Dictionary < string , string > dictionary )","title":"function ToKeyValueArray"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1CustomDataHelper/#function-validatecustomdata","text":"static inline void ValidateCustomData ( KeyValue [] customData ) Updated on 29 January 2021 at 18:34:48 UTC","title":"function ValidateCustomData"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServer/","text":"Mirror::Cloud::ListServerService::ListServer Public Functions Name ListServer ( IListServerServerApi serverApi, IListServerClientApi clientApi) Public Attributes Name readonly IListServerServerApi ServerApi readonly IListServerClientApi ClientApi Public Functions Documentation function ListServer inline ListServer ( IListServerServerApi serverApi , IListServerClientApi clientApi ) Public Attributes Documentation variable ServerApi readonly IListServerServerApi ServerApi ; variable ClientApi readonly IListServerClientApi ClientApi ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::ListServerService::ListServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServer/#mirrorcloudlistserverservicelistserver","text":"","title":"Mirror::Cloud::ListServerService::ListServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServer/#public-functions","text":"Name ListServer ( IListServerServerApi serverApi, IListServerClientApi clientApi)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServer/#public-attributes","text":"Name readonly IListServerServerApi ServerApi readonly IListServerClientApi ClientApi","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServer/#function-listserver","text":"inline ListServer ( IListServerServerApi serverApi , IListServerClientApi clientApi )","title":"function ListServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServer/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServer/#variable-serverapi","text":"readonly IListServerServerApi ServerApi ;","title":"variable ServerApi"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServer/#variable-clientapi","text":"readonly IListServerClientApi ClientApi ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable ClientApi"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerBaseApi/","text":"Mirror::Cloud::ListServerService::ListServerBaseApi Inherits from BaseApi Inherited by ListServerClientApi , ListServerServerApi Protected Functions Name ListServerBaseApi ( ICoroutineRunner runner, IRequestCreator requestCreator) Additional inherited members Protected Functions inherited from BaseApi Name BaseApi ( ICoroutineRunner runner, IRequestCreator requestCreator) Protected Attributes inherited from BaseApi Name readonly ICoroutineRunner runner readonly IRequestCreator requestCreator Protected Functions Documentation function ListServerBaseApi inline ListServerBaseApi ( ICoroutineRunner runner , IRequestCreator requestCreator ) Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::ListServerService::ListServerBaseApi"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerBaseApi/#mirrorcloudlistserverservicelistserverbaseapi","text":"Inherits from BaseApi Inherited by ListServerClientApi , ListServerServerApi","title":"Mirror::Cloud::ListServerService::ListServerBaseApi"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerBaseApi/#protected-functions","text":"Name ListServerBaseApi ( ICoroutineRunner runner, IRequestCreator requestCreator)","title":"Protected Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerBaseApi/#additional-inherited-members","text":"Protected Functions inherited from BaseApi Name BaseApi ( ICoroutineRunner runner, IRequestCreator requestCreator) Protected Attributes inherited from BaseApi Name readonly ICoroutineRunner runner readonly IRequestCreator requestCreator","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerBaseApi/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerBaseApi/#function-listserverbaseapi","text":"inline ListServerBaseApi ( ICoroutineRunner runner , IRequestCreator requestCreator ) Updated on 29 January 2021 at 18:34:48 UTC","title":"function ListServerBaseApi"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerClientApi/","text":"Mirror::Cloud::ListServerService::ListServerClientApi Inherits from ListServerBaseApi , IListServerClientApi , BaseApi , IBaseApi Public Functions Name ListServerClientApi ( ICoroutineRunner runner, IRequestCreator requestCreator, ServerListEvent onServerListUpdated) void Shutdown () Cleans up any data created by the instance void GetServerList () Get the server list once void StartGetServerListRepeat (int interval) Start getting the server list every interval void StopGetServerListRepeat () Stop getting the server list Public Properties Name UnityAction< ServerCollectionJson > onServerListUpdated Additional inherited members Protected Functions inherited from ListServerBaseApi Name ListServerBaseApi ( ICoroutineRunner runner, IRequestCreator requestCreator) Protected Functions inherited from BaseApi Name BaseApi ( ICoroutineRunner runner, IRequestCreator requestCreator) Protected Attributes inherited from BaseApi Name readonly ICoroutineRunner runner readonly IRequestCreator requestCreator Public Functions Documentation function ListServerClientApi inline ListServerClientApi ( ICoroutineRunner runner , IRequestCreator requestCreator , ServerListEvent onServerListUpdated ) function Shutdown inline void Shutdown () Cleans up any data created by the instance Reimplements : Mirror::Cloud::IBaseApi::Shutdown For Example: removing server from list function GetServerList inline void GetServerList () Get the server list once Reimplements : Mirror::Cloud::ListServerService::IListServerClientApi::GetServerList function StartGetServerListRepeat inline void StartGetServerListRepeat ( int interval ) Start getting the server list every interval Parameters : interval Reimplements : Mirror::Cloud::ListServerService::IListServerClientApi::StartGetServerListRepeat function StopGetServerListRepeat inline void StopGetServerListRepeat () Stop getting the server list Reimplements : Mirror::Cloud::ListServerService::IListServerClientApi::StopGetServerListRepeat Public Property Documentation property onServerListUpdated UnityAction < ServerCollectionJson > onServerListUpdated ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::ListServerService::ListServerClientApi"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerClientApi/#mirrorcloudlistserverservicelistserverclientapi","text":"Inherits from ListServerBaseApi , IListServerClientApi , BaseApi , IBaseApi","title":"Mirror::Cloud::ListServerService::ListServerClientApi"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerClientApi/#public-functions","text":"Name ListServerClientApi ( ICoroutineRunner runner, IRequestCreator requestCreator, ServerListEvent onServerListUpdated) void Shutdown () Cleans up any data created by the instance void GetServerList () Get the server list once void StartGetServerListRepeat (int interval) Start getting the server list every interval void StopGetServerListRepeat () Stop getting the server list","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerClientApi/#public-properties","text":"Name UnityAction< ServerCollectionJson > onServerListUpdated","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerClientApi/#additional-inherited-members","text":"Protected Functions inherited from ListServerBaseApi Name ListServerBaseApi ( ICoroutineRunner runner, IRequestCreator requestCreator) Protected Functions inherited from BaseApi Name BaseApi ( ICoroutineRunner runner, IRequestCreator requestCreator) Protected Attributes inherited from BaseApi Name readonly ICoroutineRunner runner readonly IRequestCreator requestCreator","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerClientApi/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerClientApi/#function-listserverclientapi","text":"inline ListServerClientApi ( ICoroutineRunner runner , IRequestCreator requestCreator , ServerListEvent onServerListUpdated )","title":"function ListServerClientApi"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerClientApi/#function-shutdown","text":"inline void Shutdown () Cleans up any data created by the instance Reimplements : Mirror::Cloud::IBaseApi::Shutdown For Example: removing server from list","title":"function Shutdown"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerClientApi/#function-getserverlist","text":"inline void GetServerList () Get the server list once Reimplements : Mirror::Cloud::ListServerService::IListServerClientApi::GetServerList","title":"function GetServerList"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerClientApi/#function-startgetserverlistrepeat","text":"inline void StartGetServerListRepeat ( int interval ) Start getting the server list every interval Parameters : interval Reimplements : Mirror::Cloud::ListServerService::IListServerClientApi::StartGetServerListRepeat","title":"function StartGetServerListRepeat"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerClientApi/#function-stopgetserverlistrepeat","text":"inline void StopGetServerListRepeat () Stop getting the server list Reimplements : Mirror::Cloud::ListServerService::IListServerClientApi::StopGetServerListRepeat","title":"function StopGetServerListRepeat"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerClientApi/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerClientApi/#property-onserverlistupdated","text":"UnityAction < ServerCollectionJson > onServerListUpdated ; Updated on 29 January 2021 at 18:34:48 UTC","title":"property onServerListUpdated"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerServerApi/","text":"Mirror::Cloud::ListServerService::ListServerServerApi Inherits from ListServerBaseApi , IListServerServerApi , BaseApi , IBaseApi Public Functions Name ListServerServerApi ( ICoroutineRunner runner, IRequestCreator requestCreator) void Shutdown () Cleans up any data created by the instance void AddServer ( ServerJson server) Add a server to the list void UpdateServer (int newPlayerCount) Update the current server void UpdateServer ( ServerJson server) Update the current server void RemoveServer () Removes the current server Public Attributes Name bool ServerInList Additional inherited members Protected Functions inherited from ListServerBaseApi Name ListServerBaseApi ( ICoroutineRunner runner, IRequestCreator requestCreator) Protected Functions inherited from BaseApi Name BaseApi ( ICoroutineRunner runner, IRequestCreator requestCreator) Protected Attributes inherited from BaseApi Name readonly ICoroutineRunner runner readonly IRequestCreator requestCreator Public Functions Documentation function ListServerServerApi inline ListServerServerApi ( ICoroutineRunner runner , IRequestCreator requestCreator ) function Shutdown inline void Shutdown () Cleans up any data created by the instance Reimplements : Mirror::Cloud::IBaseApi::Shutdown For Example: removing server from list function AddServer inline void AddServer ( ServerJson server ) Add a server to the list Parameters : server Reimplements : Mirror::Cloud::ListServerService::IListServerServerApi::AddServer function UpdateServer inline void UpdateServer ( int newPlayerCount ) Update the current server Parameters : newPlayerCount Reimplements : Mirror::Cloud::ListServerService::IListServerServerApi::UpdateServer function UpdateServer inline void UpdateServer ( ServerJson server ) Update the current server Parameters : server Reimplements : Mirror::Cloud::ListServerService::IListServerServerApi::UpdateServer function RemoveServer inline void RemoveServer () Removes the current server Reimplements : Mirror::Cloud::ListServerService::IListServerServerApi::RemoveServer Public Attributes Documentation variable ServerInList bool ServerInList => added ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::ListServerService::ListServerServerApi"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerServerApi/#mirrorcloudlistserverservicelistserverserverapi","text":"Inherits from ListServerBaseApi , IListServerServerApi , BaseApi , IBaseApi","title":"Mirror::Cloud::ListServerService::ListServerServerApi"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerServerApi/#public-functions","text":"Name ListServerServerApi ( ICoroutineRunner runner, IRequestCreator requestCreator) void Shutdown () Cleans up any data created by the instance void AddServer ( ServerJson server) Add a server to the list void UpdateServer (int newPlayerCount) Update the current server void UpdateServer ( ServerJson server) Update the current server void RemoveServer () Removes the current server","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerServerApi/#public-attributes","text":"Name bool ServerInList","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerServerApi/#additional-inherited-members","text":"Protected Functions inherited from ListServerBaseApi Name ListServerBaseApi ( ICoroutineRunner runner, IRequestCreator requestCreator) Protected Functions inherited from BaseApi Name BaseApi ( ICoroutineRunner runner, IRequestCreator requestCreator) Protected Attributes inherited from BaseApi Name readonly ICoroutineRunner runner readonly IRequestCreator requestCreator","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerServerApi/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerServerApi/#function-listserverserverapi","text":"inline ListServerServerApi ( ICoroutineRunner runner , IRequestCreator requestCreator )","title":"function ListServerServerApi"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerServerApi/#function-shutdown","text":"inline void Shutdown () Cleans up any data created by the instance Reimplements : Mirror::Cloud::IBaseApi::Shutdown For Example: removing server from list","title":"function Shutdown"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerServerApi/#function-addserver","text":"inline void AddServer ( ServerJson server ) Add a server to the list Parameters : server Reimplements : Mirror::Cloud::ListServerService::IListServerServerApi::AddServer","title":"function AddServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerServerApi/#function-updateserver","text":"inline void UpdateServer ( int newPlayerCount ) Update the current server Parameters : newPlayerCount Reimplements : Mirror::Cloud::ListServerService::IListServerServerApi::UpdateServer","title":"function UpdateServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerServerApi/#function-updateserver_1","text":"inline void UpdateServer ( ServerJson server ) Update the current server Parameters : server Reimplements : Mirror::Cloud::ListServerService::IListServerServerApi::UpdateServer","title":"function UpdateServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerServerApi/#function-removeserver","text":"inline void RemoveServer () Removes the current server Reimplements : Mirror::Cloud::ListServerService::IListServerServerApi::RemoveServer","title":"function RemoveServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerServerApi/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ListServerService_1_1ListServerServerApi/#variable-serverinlist","text":"bool ServerInList => added ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable ServerInList"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1Logger/","text":"Mirror::Cloud::Logger Public Functions Name void LogRequest (string page, string method, bool hasJson, string json) void LogResponse (UnityWebRequest statusRequest) Public Attributes Name bool VerboseLogging Public Functions Documentation function LogRequest static inline void LogRequest ( string page , string method , bool hasJson , string json ) function LogResponse static inline void LogResponse ( UnityWebRequest statusRequest ) Public Attributes Documentation variable VerboseLogging static bool VerboseLogging = false ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::Logger"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1Logger/#mirrorcloudlogger","text":"","title":"Mirror::Cloud::Logger"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1Logger/#public-functions","text":"Name void LogRequest (string page, string method, bool hasJson, string json) void LogResponse (UnityWebRequest statusRequest)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1Logger/#public-attributes","text":"Name bool VerboseLogging","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1Logger/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1Logger/#function-logrequest","text":"static inline void LogRequest ( string page , string method , bool hasJson , string json )","title":"function LogRequest"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1Logger/#function-logresponse","text":"static inline void LogResponse ( UnityWebRequest statusRequest )","title":"function LogResponse"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1Logger/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1Logger/#variable-verboselogging","text":"static bool VerboseLogging = false ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable VerboseLogging"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1MatchFoundEvent/","text":"Mirror::Cloud::MatchFoundEvent Inherits from UnityEvent< ServerJson > Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::MatchFoundEvent"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1MatchFoundEvent/#mirrorcloudmatchfoundevent","text":"Inherits from UnityEvent< ServerJson > Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::MatchFoundEvent"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1RequestCreator/","text":"Mirror::Cloud::RequestCreator Methods to create and send UnityWebRequest Inherits from IRequestCreator Public Functions Name RequestCreator (string baseAddress, string apiKey, ICoroutineRunner coroutineRunner) UnityWebRequest Get (string page) Create Get Request to page UnityWebRequest Post< T > (string page, T json) Creates Post Request to page with Json body UnityWebRequest Patch< T > (string page, T json) Creates Patch Request to page with Json body UnityWebRequest Delete (string page) Create Delete Request to page void SendRequest (UnityWebRequest request, RequestSuccess onSuccess =null, RequestFail onFail =null) Sends Request to api and invokes callback when finished IEnumerator SendRequestEnumerator (UnityWebRequest request, RequestSuccess onSuccess =null, RequestFail onFail =null) Sends Request to api and invokes callback when finished Public Attributes Name readonly string baseAddress readonly string apiKey Public Functions Documentation function RequestCreator inline RequestCreator ( string baseAddress , string apiKey , ICoroutineRunner coroutineRunner ) function Get inline UnityWebRequest Get ( string page ) Create Get Request to page Parameters : page Return : Reimplements : Mirror::Cloud::IRequestCreator::Get function Post< T > inline UnityWebRequest Post < T > ( string page , T json ) Creates Post Request to page with Json body Parameters : page json Template Parameters : T Return : Reimplements : Mirror::Cloud::IRequestCreator::Post< T > function Patch< T > inline UnityWebRequest Patch < T > ( string page , T json ) Creates Patch Request to page with Json body Parameters : page json Template Parameters : T Return : Reimplements : Mirror::Cloud::IRequestCreator::Patch< T > function Delete inline UnityWebRequest Delete ( string page ) Create Delete Request to page Parameters : page Return : Reimplements : Mirror::Cloud::IRequestCreator::Delete function SendRequest inline void SendRequest ( UnityWebRequest request , RequestSuccess onSuccess = null , RequestFail onFail = null ) Sends Request to api and invokes callback when finished Parameters : request onSuccess onFail Reimplements : Mirror::Cloud::IRequestCreator::SendRequest Starts Coroutine of SendRequestEnumerator function SendRequestEnumerator inline IEnumerator SendRequestEnumerator ( UnityWebRequest request , RequestSuccess onSuccess = null , RequestFail onFail = null ) Sends Request to api and invokes callback when finished Parameters : request onSuccess onFail Return : Reimplements : Mirror::Cloud::IRequestCreator::SendRequestEnumerator Public Attributes Documentation variable baseAddress readonly string baseAddress ; variable apiKey readonly string apiKey ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::RequestCreator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1RequestCreator/#mirrorcloudrequestcreator","text":"Methods to create and send UnityWebRequest Inherits from IRequestCreator","title":"Mirror::Cloud::RequestCreator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1RequestCreator/#public-functions","text":"Name RequestCreator (string baseAddress, string apiKey, ICoroutineRunner coroutineRunner) UnityWebRequest Get (string page) Create Get Request to page UnityWebRequest Post< T > (string page, T json) Creates Post Request to page with Json body UnityWebRequest Patch< T > (string page, T json) Creates Patch Request to page with Json body UnityWebRequest Delete (string page) Create Delete Request to page void SendRequest (UnityWebRequest request, RequestSuccess onSuccess =null, RequestFail onFail =null) Sends Request to api and invokes callback when finished IEnumerator SendRequestEnumerator (UnityWebRequest request, RequestSuccess onSuccess =null, RequestFail onFail =null) Sends Request to api and invokes callback when finished","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1RequestCreator/#public-attributes","text":"Name readonly string baseAddress readonly string apiKey","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1RequestCreator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1RequestCreator/#function-requestcreator","text":"inline RequestCreator ( string baseAddress , string apiKey , ICoroutineRunner coroutineRunner )","title":"function RequestCreator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1RequestCreator/#function-get","text":"inline UnityWebRequest Get ( string page ) Create Get Request to page Parameters : page Return : Reimplements : Mirror::Cloud::IRequestCreator::Get","title":"function Get"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1RequestCreator/#function-post-t","text":"inline UnityWebRequest Post < T > ( string page , T json ) Creates Post Request to page with Json body Parameters : page json Template Parameters : T Return : Reimplements : Mirror::Cloud::IRequestCreator::Post< T >","title":"function Post&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1RequestCreator/#function-patch-t","text":"inline UnityWebRequest Patch < T > ( string page , T json ) Creates Patch Request to page with Json body Parameters : page json Template Parameters : T Return : Reimplements : Mirror::Cloud::IRequestCreator::Patch< T >","title":"function Patch&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1RequestCreator/#function-delete","text":"inline UnityWebRequest Delete ( string page ) Create Delete Request to page Parameters : page Return : Reimplements : Mirror::Cloud::IRequestCreator::Delete","title":"function Delete"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1RequestCreator/#function-sendrequest","text":"inline void SendRequest ( UnityWebRequest request , RequestSuccess onSuccess = null , RequestFail onFail = null ) Sends Request to api and invokes callback when finished Parameters : request onSuccess onFail Reimplements : Mirror::Cloud::IRequestCreator::SendRequest Starts Coroutine of SendRequestEnumerator","title":"function SendRequest"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1RequestCreator/#function-sendrequestenumerator","text":"inline IEnumerator SendRequestEnumerator ( UnityWebRequest request , RequestSuccess onSuccess = null , RequestFail onFail = null ) Sends Request to api and invokes callback when finished Parameters : request onSuccess onFail Return : Reimplements : Mirror::Cloud::IRequestCreator::SendRequestEnumerator","title":"function SendRequestEnumerator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1RequestCreator/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1RequestCreator/#variable-baseaddress","text":"readonly string baseAddress ;","title":"variable baseAddress"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1RequestCreator/#variable-apikey","text":"readonly string apiKey ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable apiKey"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ServerListEvent/","text":"Mirror::Cloud::ServerListEvent Inherits from UnityEvent< ServerCollectionJson > Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::ServerListEvent"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1ServerListEvent/#mirrorcloudserverlistevent","text":"Inherits from UnityEvent< ServerCollectionJson > Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::ServerListEvent"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1UnityEqualCheckExtension/","text":"Mirror::Cloud::UnityEqualCheckExtension Public Functions Name bool IsNull (this IUnityEqualCheck obj) bool IsNotNull (this IUnityEqualCheck obj) Public Functions Documentation function IsNull static inline bool IsNull ( this IUnityEqualCheck obj ) function IsNotNull static inline bool IsNotNull ( this IUnityEqualCheck obj ) Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::UnityEqualCheckExtension"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1UnityEqualCheckExtension/#mirrorcloudunityequalcheckextension","text":"","title":"Mirror::Cloud::UnityEqualCheckExtension"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1UnityEqualCheckExtension/#public-functions","text":"Name bool IsNull (this IUnityEqualCheck obj) bool IsNotNull (this IUnityEqualCheck obj)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1UnityEqualCheckExtension/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1UnityEqualCheckExtension/#function-isnull","text":"static inline bool IsNull ( this IUnityEqualCheck obj )","title":"function IsNull"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Cloud_1_1UnityEqualCheckExtension/#function-isnotnull","text":"static inline bool IsNotNull ( this IUnityEqualCheck obj ) Updated on 29 January 2021 at 18:34:48 UTC","title":"function IsNotNull"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1CommandAttribute/","text":"Mirror::CommandAttribute Call this from a client to run this function on the server. More... Inherits from Attribute Public Attributes Name int channel bool ignoreAuthority Detailed Description class Mirror :: CommandAttribute ; Call this from a client to run this function on the server. Make sure to validate input etc. It's not possible to call this from a server. Public Attributes Documentation variable channel int channel = Channels . DefaultReliable ; variable ignoreAuthority bool ignoreAuthority = false ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::CommandAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1CommandAttribute/#mirrorcommandattribute","text":"Call this from a client to run this function on the server. More... Inherits from Attribute","title":"Mirror::CommandAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1CommandAttribute/#public-attributes","text":"Name int channel bool ignoreAuthority","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1CommandAttribute/#detailed-description","text":"class Mirror :: CommandAttribute ; Call this from a client to run this function on the server. Make sure to validate input etc. It's not possible to call this from a server.","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1CommandAttribute/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1CommandAttribute/#variable-channel","text":"int channel = Channels . DefaultReliable ;","title":"variable channel"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1CommandAttribute/#variable-ignoreauthority","text":"bool ignoreAuthority = false ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable ignoreAuthority"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Compression/","text":"Mirror::Compression Functions to Compress Quaternions and Floats More... Public Functions Name uint CompressQuaternion (Quaternion value) Used to Compress Quaternion into 4 bytes Quaternion DecompressQuaternion (uint packed) Used to read a Compressed Quaternion from 4 bytes uint ScaleToUInt (float value, float minFloat, float maxFloat, uint minUint, uint maxUint) Scales float from minFloat->maxFloat to minUint->maxUint float ScaleFromUInt (uint value, float minFloat, float maxFloat, uint minUint, uint maxUint) Scales uint from minUint->maxUint to minFloat->maxFloat Detailed Description class Mirror :: Compression ; Functions to Compress Quaternions and Floats Uncompressed Quaternion = 32 * 4 = 128 bits => send 16 bytes Quaternion is always normalized so we drop largest value and re-calculate it. We can encode which one is the largest using 2 bits x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 = 1 2nd largest value has max size of 1/sqrt(2) We can encode the smallest three components in [-1/sqrt(2),+1/sqrt(2)] instead of [-1,+1] c ^ 2 + c ^ 2 + 0 + 0 = 1 Sign of largest value doesnt matter Q * vec3 == ( - Q ) * vec3 RotationPrecision 2 / sqrt ( 2 ) / ( 2 ^ bitCount - 1 ) rotation precision +-0.00138 in range [-1,+1] 10 bits per value 2 + 10 * 3 = 32 bits => send 4 bytes Links for more info: GDC Talk Post on Snapshot Compression Public Functions Documentation function CompressQuaternion static inline uint CompressQuaternion ( Quaternion value ) Used to Compress Quaternion into 4 bytes function DecompressQuaternion static inline Quaternion DecompressQuaternion ( uint packed ) Used to read a Compressed Quaternion from 4 bytes Quaternion is normalized function ScaleToUInt static inline uint ScaleToUInt ( float value , float minFloat , float maxFloat , uint minUint , uint maxUint ) Scales float from minFloat->maxFloat to minUint->maxUint Parameters : value minFloat maxFloat minUint should be a power of 2, can be 0 maxUint should be a power of 2, for example 1 << 8 for value to take up 8 bytes Return : values out side of minFloat/maxFloat will return either 0 or maxUint function ScaleFromUInt static inline float ScaleFromUInt ( uint value , float minFloat , float maxFloat , uint minUint , uint maxUint ) Scales uint from minUint->maxUint to minFloat->maxFloat Parameters : value minFloat maxFloat minUint should be a power of 2, can be 0 maxUint should be a power of 2, for example 1 << 8 for value to take up 8 bytes Return : Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::Compression"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Compression/#mirrorcompression","text":"Functions to Compress Quaternions and Floats More...","title":"Mirror::Compression"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Compression/#public-functions","text":"Name uint CompressQuaternion (Quaternion value) Used to Compress Quaternion into 4 bytes Quaternion DecompressQuaternion (uint packed) Used to read a Compressed Quaternion from 4 bytes uint ScaleToUInt (float value, float minFloat, float maxFloat, uint minUint, uint maxUint) Scales float from minFloat->maxFloat to minUint->maxUint float ScaleFromUInt (uint value, float minFloat, float maxFloat, uint minUint, uint maxUint) Scales uint from minUint->maxUint to minFloat->maxFloat","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Compression/#detailed-description","text":"class Mirror :: Compression ; Functions to Compress Quaternions and Floats Uncompressed Quaternion = 32 * 4 = 128 bits => send 16 bytes Quaternion is always normalized so we drop largest value and re-calculate it. We can encode which one is the largest using 2 bits x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 = 1 2nd largest value has max size of 1/sqrt(2) We can encode the smallest three components in [-1/sqrt(2),+1/sqrt(2)] instead of [-1,+1] c ^ 2 + c ^ 2 + 0 + 0 = 1 Sign of largest value doesnt matter Q * vec3 == ( - Q ) * vec3 RotationPrecision 2 / sqrt ( 2 ) / ( 2 ^ bitCount - 1 ) rotation precision +-0.00138 in range [-1,+1] 10 bits per value 2 + 10 * 3 = 32 bits => send 4 bytes Links for more info: GDC Talk Post on Snapshot Compression","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Compression/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Compression/#function-compressquaternion","text":"static inline uint CompressQuaternion ( Quaternion value ) Used to Compress Quaternion into 4 bytes","title":"function CompressQuaternion"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Compression/#function-decompressquaternion","text":"static inline Quaternion DecompressQuaternion ( uint packed ) Used to read a Compressed Quaternion from 4 bytes Quaternion is normalized","title":"function DecompressQuaternion"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Compression/#function-scaletouint","text":"static inline uint ScaleToUInt ( float value , float minFloat , float maxFloat , uint minUint , uint maxUint ) Scales float from minFloat->maxFloat to minUint->maxUint Parameters : value minFloat maxFloat minUint should be a power of 2, can be 0 maxUint should be a power of 2, for example 1 << 8 for value to take up 8 bytes Return : values out side of minFloat/maxFloat will return either 0 or maxUint","title":"function ScaleToUInt"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Compression/#function-scalefromuint","text":"static inline float ScaleFromUInt ( uint value , float minFloat , float maxFloat , uint minUint , uint maxUint ) Scales uint from minUint->maxUint to minFloat->maxFloat Parameters : value minFloat maxFloat minUint should be a power of 2, can be 0 maxUint should be a power of 2, for example 1 << 8 for value to take up 8 bytes Return : Updated on 29 January 2021 at 18:34:47 UTC","title":"function ScaleFromUInt"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscovery/","text":"Mirror::Discovery::NetworkDiscovery Inherits from NetworkDiscoveryBase< ServerRequest, ServerResponse > , MonoBehaviour Public Functions Name virtual override void Start () virtual so that inheriting classes' Start() can call base.Start() too Protected Functions Name override ServerResponse ProcessRequest ( ServerRequest request, IPEndPoint endpoint) Process the request from a client virtual override ServerRequest GetRequest () Create a message that will be broadcasted on the network to discover servers override void ProcessResponse ( ServerResponse response, IPEndPoint endpoint) Process the answer from a server Public Properties Name long ServerId Public Attributes Name Transport transport ServerFoundUnityEvent OnServerFound Additional inherited members Public Functions inherited from NetworkDiscoveryBase< ServerRequest, ServerResponse > Name long RandomLong () void AdvertiseServer () Advertise this server in the local network async Task ServerListenAsync () void StartDiscovery () Start Active Discovery void StopDiscovery () Stop Active Discovery async Task ClientListenAsync () Awaits for server response void BroadcastDiscoveryRequest () Sends discovery request from client Protected Functions inherited from NetworkDiscoveryBase< ServerRequest, ServerResponse > Name virtual void ProcessClientRequest (Request request, IPEndPoint endpoint) Reply to the client to inform it of this server Public Properties inherited from NetworkDiscoveryBase< ServerRequest, ServerResponse > Name bool SupportedOnThisPlatform Public Attributes inherited from NetworkDiscoveryBase< ServerRequest, ServerResponse > Name long secretHandshake Protected Attributes inherited from NetworkDiscoveryBase< ServerRequest, ServerResponse > Name int serverBroadcastListenPort UdpClient serverUdpClient UdpClient clientUdpClient Public Functions Documentation function Start inline virtual override void Start () virtual so that inheriting classes' Start() can call base.Start() too Reimplements : Mirror::Discovery::NetworkDiscoveryBase::Start Protected Functions Documentation function ProcessRequest inline override ServerResponse ProcessRequest ( ServerRequest request , IPEndPoint endpoint ) Process the request from a client Parameters : request Request comming from client endpoint Address of the client that sent the request Return : The message to be sent back to the client or null Override if you wish to provide more information to the clients such as the name of the host player function GetRequest virtual override ServerRequest GetRequest () Create a message that will be broadcasted on the network to discover servers Return : An instance of ServerRequest with data to be broadcasted Reimplements : Mirror::Discovery::NetworkDiscoveryBase::GetRequest Override if you wish to include additional data in the discovery message such as desired game mode, language, difficulty, etc... function ProcessResponse inline override void ProcessResponse ( ServerResponse response , IPEndPoint endpoint ) Process the answer from a server Parameters : response Response that came from the server endpoint Address of the server that replied A client receives a reply from a server, this method processes the reply and raises an event Public Property Documentation property ServerId long ServerId ; Public Attributes Documentation variable transport Transport transport ; variable OnServerFound ServerFoundUnityEvent OnServerFound ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Discovery::NetworkDiscovery"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscovery/#mirrordiscoverynetworkdiscovery","text":"Inherits from NetworkDiscoveryBase< ServerRequest, ServerResponse > , MonoBehaviour","title":"Mirror::Discovery::NetworkDiscovery"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscovery/#public-functions","text":"Name virtual override void Start () virtual so that inheriting classes' Start() can call base.Start() too","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscovery/#protected-functions","text":"Name override ServerResponse ProcessRequest ( ServerRequest request, IPEndPoint endpoint) Process the request from a client virtual override ServerRequest GetRequest () Create a message that will be broadcasted on the network to discover servers override void ProcessResponse ( ServerResponse response, IPEndPoint endpoint) Process the answer from a server","title":"Protected Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscovery/#public-properties","text":"Name long ServerId","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscovery/#public-attributes","text":"Name Transport transport ServerFoundUnityEvent OnServerFound","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscovery/#additional-inherited-members","text":"Public Functions inherited from NetworkDiscoveryBase< ServerRequest, ServerResponse > Name long RandomLong () void AdvertiseServer () Advertise this server in the local network async Task ServerListenAsync () void StartDiscovery () Start Active Discovery void StopDiscovery () Stop Active Discovery async Task ClientListenAsync () Awaits for server response void BroadcastDiscoveryRequest () Sends discovery request from client Protected Functions inherited from NetworkDiscoveryBase< ServerRequest, ServerResponse > Name virtual void ProcessClientRequest (Request request, IPEndPoint endpoint) Reply to the client to inform it of this server Public Properties inherited from NetworkDiscoveryBase< ServerRequest, ServerResponse > Name bool SupportedOnThisPlatform Public Attributes inherited from NetworkDiscoveryBase< ServerRequest, ServerResponse > Name long secretHandshake Protected Attributes inherited from NetworkDiscoveryBase< ServerRequest, ServerResponse > Name int serverBroadcastListenPort UdpClient serverUdpClient UdpClient clientUdpClient","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscovery/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscovery/#function-start","text":"inline virtual override void Start () virtual so that inheriting classes' Start() can call base.Start() too Reimplements : Mirror::Discovery::NetworkDiscoveryBase::Start","title":"function Start"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscovery/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscovery/#function-processrequest","text":"inline override ServerResponse ProcessRequest ( ServerRequest request , IPEndPoint endpoint ) Process the request from a client Parameters : request Request comming from client endpoint Address of the client that sent the request Return : The message to be sent back to the client or null Override if you wish to provide more information to the clients such as the name of the host player","title":"function ProcessRequest"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscovery/#function-getrequest","text":"virtual override ServerRequest GetRequest () Create a message that will be broadcasted on the network to discover servers Return : An instance of ServerRequest with data to be broadcasted Reimplements : Mirror::Discovery::NetworkDiscoveryBase::GetRequest Override if you wish to include additional data in the discovery message such as desired game mode, language, difficulty, etc...","title":"function GetRequest"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscovery/#function-processresponse","text":"inline override void ProcessResponse ( ServerResponse response , IPEndPoint endpoint ) Process the answer from a server Parameters : response Response that came from the server endpoint Address of the server that replied A client receives a reply from a server, this method processes the reply and raises an event","title":"function ProcessResponse"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscovery/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscovery/#property-serverid","text":"long ServerId ;","title":"property ServerId"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscovery/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscovery/#variable-transport","text":"Transport transport ;","title":"variable transport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscovery/#variable-onserverfound","text":"ServerFoundUnityEvent OnServerFound ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable OnServerFound"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/","text":"Mirror::Discovery::NetworkDiscoveryBase Base implementation for Network Discovery . Extend this component to provide custom discovery with game specific data NetworkDiscovery for a sample implementation More... Inherits from MonoBehaviour Public Functions Name long RandomLong () virtual void Start () virtual so that inheriting classes' Start() can call base.Start() too void AdvertiseServer () Advertise this server in the local network async Task ServerListenAsync () void StartDiscovery () Start Active Discovery void StopDiscovery () Stop Active Discovery async Task ClientListenAsync () Awaits for server response void BroadcastDiscoveryRequest () Sends discovery request from client Protected Functions Name virtual void ProcessClientRequest (Request request, IPEndPoint endpoint) Reply to the client to inform it of this server virtual abstract Response ProcessRequest (Request request, IPEndPoint endpoint) =0 Process the request from a client virtual Request GetRequest () Create a message that will be broadcasted on the network to discover servers virtual abstract void ProcessResponse (Response response, IPEndPoint endpoint) =0 Process the answer from a server Public Properties Name bool SupportedOnThisPlatform Public Attributes Name long secretHandshake Protected Attributes Name int serverBroadcastListenPort UdpClient serverUdpClient UdpClient clientUdpClient Detailed Description template < Request , Response > class Mirror :: Discovery :: NetworkDiscoveryBase ; Base implementation for Network Discovery . Extend this component to provide custom discovery with game specific data NetworkDiscovery for a sample implementation Public Functions Documentation function RandomLong static inline long RandomLong () function Start inline virtual void Start () virtual so that inheriting classes' Start() can call base.Start() too Reimplemented by : Mirror::Discovery::NetworkDiscovery::Start function AdvertiseServer inline void AdvertiseServer () Advertise this server in the local network function ServerListenAsync inline async Task ServerListenAsync () function StartDiscovery inline void StartDiscovery () Start Active Discovery function StopDiscovery inline void StopDiscovery () Stop Active Discovery function ClientListenAsync inline async Task ClientListenAsync () Awaits for server response Return : ClientListenAsync Task function BroadcastDiscoveryRequest inline void BroadcastDiscoveryRequest () Sends discovery request from client Protected Functions Documentation function ProcessClientRequest inline virtual void ProcessClientRequest ( Request request , IPEndPoint endpoint ) Reply to the client to inform it of this server Parameters : request Request comming from client endpoint Address of the client that sent the request Override if you wish to ignore server requests based on custom criteria such as language, full server game mode or difficulty function ProcessRequest virtual abstract Response ProcessRequest ( Request request , IPEndPoint endpoint ) = 0 Process the request from a client Parameters : request Request comming from client endpoint Address of the client that sent the request Return : The message to be sent back to the client or null Override if you wish to provide more information to the clients such as the name of the host player function GetRequest virtual Request GetRequest () Create a message that will be broadcasted on the network to discover servers Return : An instance of ServerRequest with data to be broadcasted Reimplemented by : Mirror::Discovery::NetworkDiscovery::GetRequest Override if you wish to include additional data in the discovery message such as desired game mode, language, difficulty, etc... function ProcessResponse virtual abstract void ProcessResponse ( Response response , IPEndPoint endpoint ) = 0 Process the answer from a server Parameters : response Response that came from the server endpoint Address of the server that replied A client receives a reply from a server, this method processes the reply and raises an event Public Property Documentation property SupportedOnThisPlatform static bool SupportedOnThisPlatform ; Public Attributes Documentation variable secretHandshake long secretHandshake ; Protected Attributes Documentation variable serverBroadcastListenPort int serverBroadcastListenPort = 47777 ; variable serverUdpClient UdpClient serverUdpClient ; variable clientUdpClient UdpClient clientUdpClient ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Discovery::NetworkDiscoveryBase"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#mirrordiscoverynetworkdiscoverybase","text":"Base implementation for Network Discovery . Extend this component to provide custom discovery with game specific data NetworkDiscovery for a sample implementation More... Inherits from MonoBehaviour","title":"Mirror::Discovery::NetworkDiscoveryBase"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#public-functions","text":"Name long RandomLong () virtual void Start () virtual so that inheriting classes' Start() can call base.Start() too void AdvertiseServer () Advertise this server in the local network async Task ServerListenAsync () void StartDiscovery () Start Active Discovery void StopDiscovery () Stop Active Discovery async Task ClientListenAsync () Awaits for server response void BroadcastDiscoveryRequest () Sends discovery request from client","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#protected-functions","text":"Name virtual void ProcessClientRequest (Request request, IPEndPoint endpoint) Reply to the client to inform it of this server virtual abstract Response ProcessRequest (Request request, IPEndPoint endpoint) =0 Process the request from a client virtual Request GetRequest () Create a message that will be broadcasted on the network to discover servers virtual abstract void ProcessResponse (Response response, IPEndPoint endpoint) =0 Process the answer from a server","title":"Protected Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#public-properties","text":"Name bool SupportedOnThisPlatform","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#public-attributes","text":"Name long secretHandshake","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#protected-attributes","text":"Name int serverBroadcastListenPort UdpClient serverUdpClient UdpClient clientUdpClient","title":"Protected Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#detailed-description","text":"template < Request , Response > class Mirror :: Discovery :: NetworkDiscoveryBase ; Base implementation for Network Discovery . Extend this component to provide custom discovery with game specific data NetworkDiscovery for a sample implementation","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#function-randomlong","text":"static inline long RandomLong ()","title":"function RandomLong"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#function-start","text":"inline virtual void Start () virtual so that inheriting classes' Start() can call base.Start() too Reimplemented by : Mirror::Discovery::NetworkDiscovery::Start","title":"function Start"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#function-advertiseserver","text":"inline void AdvertiseServer () Advertise this server in the local network","title":"function AdvertiseServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#function-serverlistenasync","text":"inline async Task ServerListenAsync ()","title":"function ServerListenAsync"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#function-startdiscovery","text":"inline void StartDiscovery () Start Active Discovery","title":"function StartDiscovery"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#function-stopdiscovery","text":"inline void StopDiscovery () Stop Active Discovery","title":"function StopDiscovery"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#function-clientlistenasync","text":"inline async Task ClientListenAsync () Awaits for server response Return : ClientListenAsync Task","title":"function ClientListenAsync"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#function-broadcastdiscoveryrequest","text":"inline void BroadcastDiscoveryRequest () Sends discovery request from client","title":"function BroadcastDiscoveryRequest"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#function-processclientrequest","text":"inline virtual void ProcessClientRequest ( Request request , IPEndPoint endpoint ) Reply to the client to inform it of this server Parameters : request Request comming from client endpoint Address of the client that sent the request Override if you wish to ignore server requests based on custom criteria such as language, full server game mode or difficulty","title":"function ProcessClientRequest"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#function-processrequest","text":"virtual abstract Response ProcessRequest ( Request request , IPEndPoint endpoint ) = 0 Process the request from a client Parameters : request Request comming from client endpoint Address of the client that sent the request Return : The message to be sent back to the client or null Override if you wish to provide more information to the clients such as the name of the host player","title":"function ProcessRequest"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#function-getrequest","text":"virtual Request GetRequest () Create a message that will be broadcasted on the network to discover servers Return : An instance of ServerRequest with data to be broadcasted Reimplemented by : Mirror::Discovery::NetworkDiscovery::GetRequest Override if you wish to include additional data in the discovery message such as desired game mode, language, difficulty, etc...","title":"function GetRequest"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#function-processresponse","text":"virtual abstract void ProcessResponse ( Response response , IPEndPoint endpoint ) = 0 Process the answer from a server Parameters : response Response that came from the server endpoint Address of the server that replied A client receives a reply from a server, this method processes the reply and raises an event","title":"function ProcessResponse"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#property-supportedonthisplatform","text":"static bool SupportedOnThisPlatform ;","title":"property SupportedOnThisPlatform"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#variable-secrethandshake","text":"long secretHandshake ;","title":"variable secretHandshake"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#variable-serverbroadcastlistenport","text":"int serverBroadcastListenPort = 47777 ;","title":"variable serverBroadcastListenPort"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#variable-serverudpclient","text":"UdpClient serverUdpClient ;","title":"variable serverUdpClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryBase/#variable-clientudpclient","text":"UdpClient clientUdpClient ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable clientUdpClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryHUD/","text":"Mirror::Discovery::NetworkDiscoveryHUD Inherits from MonoBehaviour Public Functions Name void OnDiscoveredServer ( ServerResponse info) Public Attributes Name NetworkDiscovery networkDiscovery Public Functions Documentation function OnDiscoveredServer inline void OnDiscoveredServer ( ServerResponse info ) Public Attributes Documentation variable networkDiscovery NetworkDiscovery networkDiscovery ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Discovery::NetworkDiscoveryHUD"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryHUD/#mirrordiscoverynetworkdiscoveryhud","text":"Inherits from MonoBehaviour","title":"Mirror::Discovery::NetworkDiscoveryHUD"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryHUD/#public-functions","text":"Name void OnDiscoveredServer ( ServerResponse info)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryHUD/#public-attributes","text":"Name NetworkDiscovery networkDiscovery","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryHUD/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryHUD/#function-ondiscoveredserver","text":"inline void OnDiscoveredServer ( ServerResponse info )","title":"function OnDiscoveredServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryHUD/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1NetworkDiscoveryHUD/#variable-networkdiscovery","text":"NetworkDiscovery networkDiscovery ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable networkDiscovery"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1ServerFoundUnityEvent/","text":"Mirror::Discovery::ServerFoundUnityEvent Inherits from UnityEvent< ServerResponse > Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Discovery::ServerFoundUnityEvent"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Discovery_1_1ServerFoundUnityEvent/#mirrordiscoveryserverfoundunityevent","text":"Inherits from UnityEvent< ServerResponse > Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Discovery::ServerFoundUnityEvent"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1DotNetCompatibility/","text":"Mirror::DotNetCompatibility Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::DotNetCompatibility"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1DotNetCompatibility/#mirrordotnetcompatibility","text":"Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::DotNetCompatibility"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorHelper/","text":"Mirror::EditorHelper Public Functions Name string FindPath< T > () Public Functions Documentation function FindPath< T > static inline string FindPath < T > () Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::EditorHelper"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorHelper/#mirroreditorhelper","text":"","title":"Mirror::EditorHelper"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorHelper/#public-functions","text":"Name string FindPath< T > ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorHelper/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorHelper/#function-findpath-t","text":"static inline string FindPath < T > () Updated on 29 January 2021 at 18:34:47 UTC","title":"function FindPath&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1LogLevelWindow/","text":"Mirror::EditorScripts::Logging::LogLevelWindow Inherits from EditorWindow Public Functions Name void ShowWindow () Public Functions Documentation function ShowWindow static inline void ShowWindow () Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::EditorScripts::Logging::LogLevelWindow"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1LogLevelWindow/#mirroreditorscriptsloggingloglevelwindow","text":"Inherits from EditorWindow","title":"Mirror::EditorScripts::Logging::LogLevelWindow"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1LogLevelWindow/#public-functions","text":"Name void ShowWindow ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1LogLevelWindow/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1LogLevelWindow/#function-showwindow","text":"static inline void ShowWindow () Updated on 29 January 2021 at 18:34:48 UTC","title":"function ShowWindow"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1LogLevelsGUI/","text":"Mirror::EditorScripts::Logging::LogLevelsGUI Public Functions Name LogSettings DrawCreateNewButton () void DrawLogFactoryDictionary ( LogSettings settings) Public Functions Documentation function DrawCreateNewButton static inline LogSettings DrawCreateNewButton () function DrawLogFactoryDictionary static inline void DrawLogFactoryDictionary ( LogSettings settings ) Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::EditorScripts::Logging::LogLevelsGUI"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1LogLevelsGUI/#mirroreditorscriptsloggingloglevelsgui","text":"","title":"Mirror::EditorScripts::Logging::LogLevelsGUI"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1LogLevelsGUI/#public-functions","text":"Name LogSettings DrawCreateNewButton () void DrawLogFactoryDictionary ( LogSettings settings)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1LogLevelsGUI/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1LogLevelsGUI/#function-drawcreatenewbutton","text":"static inline LogSettings DrawCreateNewButton ()","title":"function DrawCreateNewButton"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1LogLevelsGUI/#function-drawlogfactorydictionary","text":"static inline void DrawLogFactoryDictionary ( LogSettings settings ) Updated on 29 January 2021 at 18:34:48 UTC","title":"function DrawLogFactoryDictionary"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1LogSettingsEditor/","text":"Mirror::EditorScripts::Logging::LogSettingsEditor Inherits from Editor Public Functions Name override void OnInspectorGUI () void CurrentScriptField () Public Functions Documentation function OnInspectorGUI inline override void OnInspectorGUI () function CurrentScriptField inline void CurrentScriptField () Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::EditorScripts::Logging::LogSettingsEditor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1LogSettingsEditor/#mirroreditorscriptslogginglogsettingseditor","text":"Inherits from Editor","title":"Mirror::EditorScripts::Logging::LogSettingsEditor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1LogSettingsEditor/#public-functions","text":"Name override void OnInspectorGUI () void CurrentScriptField ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1LogSettingsEditor/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1LogSettingsEditor/#function-oninspectorgui","text":"inline override void OnInspectorGUI ()","title":"function OnInspectorGUI"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1LogSettingsEditor/#function-currentscriptfield","text":"inline void CurrentScriptField () Updated on 29 January 2021 at 18:34:48 UTC","title":"function CurrentScriptField"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1NetworkLogSettingsEditor/","text":"Mirror::EditorScripts::Logging::NetworkLogSettingsEditor Inherits from Editor Public Functions Name override void OnInspectorGUI () Public Functions Documentation function OnInspectorGUI inline override void OnInspectorGUI () Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::EditorScripts::Logging::NetworkLogSettingsEditor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1NetworkLogSettingsEditor/#mirroreditorscriptsloggingnetworklogsettingseditor","text":"Inherits from Editor","title":"Mirror::EditorScripts::Logging::NetworkLogSettingsEditor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1NetworkLogSettingsEditor/#public-functions","text":"Name override void OnInspectorGUI ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1NetworkLogSettingsEditor/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1Logging_1_1NetworkLogSettingsEditor/#function-oninspectorgui","text":"inline override void OnInspectorGUI () Updated on 29 January 2021 at 18:34:48 UTC","title":"function OnInspectorGUI"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1ScriptableObjectUtility/","text":"Mirror::EditorScripts::ScriptableObjectUtility Public Functions Name T CreateAsset< T > (string defaultName) T CreateAsset< T > (string defaultName, string defaultFolder) This makes it easy to create, name and place unique new ScriptableObject asset files. Public Functions Documentation function CreateAsset< T > static T CreateAsset < T > ( string defaultName ) function CreateAsset< T > static inline T CreateAsset < T > ( string defaultName , string defaultFolder ) This makes it easy to create, name and place unique new ScriptableObject asset files. Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::EditorScripts::ScriptableObjectUtility"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1ScriptableObjectUtility/#mirroreditorscriptsscriptableobjectutility","text":"","title":"Mirror::EditorScripts::ScriptableObjectUtility"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1ScriptableObjectUtility/#public-functions","text":"Name T CreateAsset< T > (string defaultName) T CreateAsset< T > (string defaultName, string defaultFolder) This makes it easy to create, name and place unique new ScriptableObject asset files.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1ScriptableObjectUtility/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1ScriptableObjectUtility/#function-createasset-t","text":"static T CreateAsset < T > ( string defaultName )","title":"function CreateAsset&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EditorScripts_1_1ScriptableObjectUtility/#function-createasset-t_1","text":"static inline T CreateAsset < T > ( string defaultName , string defaultFolder ) This makes it easy to create, name and place unique new ScriptableObject asset files. Updated on 29 January 2021 at 18:34:48 UTC","title":"function CreateAsset&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EnterPlayModeSettingsCheck/","text":"Mirror::EnterPlayModeSettingsCheck Inherits from MonoBehaviour Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::EnterPlayModeSettingsCheck"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1EnterPlayModeSettingsCheck/#mirrorenterplaymodesettingscheck","text":"Inherits from MonoBehaviour Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::EnterPlayModeSettingsCheck"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkLerpRigidbody/","text":"Mirror::Experimental::NetworkLerpRigidbody Inherits from NetworkBehaviour , MonoBehaviour Additional inherited members Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Experimental::NetworkLerpRigidbody"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkLerpRigidbody/#mirrorexperimentalnetworklerprigidbody","text":"Inherits from NetworkBehaviour , MonoBehaviour","title":"Mirror::Experimental::NetworkLerpRigidbody"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkLerpRigidbody/#additional-inherited-members","text":"Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Updated on 29 January 2021 at 18:34:48 UTC","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody/","text":"Mirror::Experimental::NetworkRigidbody Inherits from NetworkBehaviour , MonoBehaviour Public Classes Name class ClientSyncState holds previously synced values Additional inherited members Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Experimental::NetworkRigidbody"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody/#mirrorexperimentalnetworkrigidbody","text":"Inherits from NetworkBehaviour , MonoBehaviour","title":"Mirror::Experimental::NetworkRigidbody"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody/#public-classes","text":"Name class ClientSyncState holds previously synced values","title":"Public Classes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody/#additional-inherited-members","text":"Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Updated on 29 January 2021 at 18:34:48 UTC","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody2D/","text":"Mirror::Experimental::NetworkRigidbody2D Inherits from NetworkBehaviour , MonoBehaviour Public Classes Name class ClientSyncState holds previously synced values Additional inherited members Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Experimental::NetworkRigidbody2D"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody2D/#mirrorexperimentalnetworkrigidbody2d","text":"Inherits from NetworkBehaviour , MonoBehaviour","title":"Mirror::Experimental::NetworkRigidbody2D"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody2D/#public-classes","text":"Name class ClientSyncState holds previously synced values","title":"Public Classes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody2D/#additional-inherited-members","text":"Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Updated on 29 January 2021 at 18:34:49 UTC","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody2D_1_1ClientSyncState/","text":"Mirror::Experimental::NetworkRigidbody2D::ClientSyncState holds previously synced values Public Attributes Name float nextSyncTime Next sync time that velocity will be synced, based on syncInterval. Vector2 velocity float angularVelocity bool isKinematic float gravityScale float drag float angularDrag Public Attributes Documentation variable nextSyncTime float nextSyncTime ; Next sync time that velocity will be synced, based on syncInterval. variable velocity Vector2 velocity ; variable angularVelocity float angularVelocity ; variable isKinematic bool isKinematic ; variable gravityScale float gravityScale ; variable drag float drag ; variable angularDrag float angularDrag ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Experimental::NetworkRigidbody2D::ClientSyncState"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody2D_1_1ClientSyncState/#mirrorexperimentalnetworkrigidbody2dclientsyncstate","text":"holds previously synced values","title":"Mirror::Experimental::NetworkRigidbody2D::ClientSyncState"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody2D_1_1ClientSyncState/#public-attributes","text":"Name float nextSyncTime Next sync time that velocity will be synced, based on syncInterval. Vector2 velocity float angularVelocity bool isKinematic float gravityScale float drag float angularDrag","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody2D_1_1ClientSyncState/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody2D_1_1ClientSyncState/#variable-nextsynctime","text":"float nextSyncTime ; Next sync time that velocity will be synced, based on syncInterval.","title":"variable nextSyncTime"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody2D_1_1ClientSyncState/#variable-velocity","text":"Vector2 velocity ;","title":"variable velocity"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody2D_1_1ClientSyncState/#variable-angularvelocity","text":"float angularVelocity ;","title":"variable angularVelocity"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody2D_1_1ClientSyncState/#variable-iskinematic","text":"bool isKinematic ;","title":"variable isKinematic"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody2D_1_1ClientSyncState/#variable-gravityscale","text":"float gravityScale ;","title":"variable gravityScale"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody2D_1_1ClientSyncState/#variable-drag","text":"float drag ;","title":"variable drag"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody2D_1_1ClientSyncState/#variable-angulardrag","text":"float angularDrag ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable angularDrag"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody_1_1ClientSyncState/","text":"Mirror::Experimental::NetworkRigidbody::ClientSyncState holds previously synced values Public Attributes Name float nextSyncTime Next sync time that velocity will be synced, based on syncInterval. Vector3 velocity Vector3 angularVelocity bool isKinematic bool useGravity float drag float angularDrag Public Attributes Documentation variable nextSyncTime float nextSyncTime ; Next sync time that velocity will be synced, based on syncInterval. variable velocity Vector3 velocity ; variable angularVelocity Vector3 angularVelocity ; variable isKinematic bool isKinematic ; variable useGravity bool useGravity ; variable drag float drag ; variable angularDrag float angularDrag ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Experimental::NetworkRigidbody::ClientSyncState"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody_1_1ClientSyncState/#mirrorexperimentalnetworkrigidbodyclientsyncstate","text":"holds previously synced values","title":"Mirror::Experimental::NetworkRigidbody::ClientSyncState"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody_1_1ClientSyncState/#public-attributes","text":"Name float nextSyncTime Next sync time that velocity will be synced, based on syncInterval. Vector3 velocity Vector3 angularVelocity bool isKinematic bool useGravity float drag float angularDrag","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody_1_1ClientSyncState/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody_1_1ClientSyncState/#variable-nextsynctime","text":"float nextSyncTime ; Next sync time that velocity will be synced, based on syncInterval.","title":"variable nextSyncTime"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody_1_1ClientSyncState/#variable-velocity","text":"Vector3 velocity ;","title":"variable velocity"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody_1_1ClientSyncState/#variable-angularvelocity","text":"Vector3 angularVelocity ;","title":"variable angularVelocity"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody_1_1ClientSyncState/#variable-iskinematic","text":"bool isKinematic ;","title":"variable isKinematic"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody_1_1ClientSyncState/#variable-usegravity","text":"bool useGravity ;","title":"variable useGravity"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody_1_1ClientSyncState/#variable-drag","text":"float drag ;","title":"variable drag"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkRigidbody_1_1ClientSyncState/#variable-angulardrag","text":"float angularDrag ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable angularDrag"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransform/","text":"Mirror::Experimental::NetworkTransform Inherits from NetworkTransformBase , NetworkBehaviour , MonoBehaviour Protected Attributes Name override Transform targetTransform Additional inherited members Public Classes inherited from NetworkTransformBase Name struct DataPoint Public Functions inherited from NetworkTransformBase Name void ServerTeleport (Vector3 localPosition) This method will override this GameObject's current Transform.localPosition to the specified Vector3 and update all clients. void ServerTeleport (Vector3 localPosition, Quaternion localRotation) This method will override this GameObject's current Transform.localPosition and Transform.localRotation to the specified Vector3 and Quaternion and update all clients. Public Attributes inherited from NetworkTransformBase Name bool clientAuthority bool excludeOwnerUpdate bool syncPosition bool syncRotation bool syncScale bool interpolatePosition bool interpolateRotation bool interpolateScale float localPositionSensitivity float localRotationSensitivity float localScaleSensitivity Vector3 lastPosition Quaternion lastRotation Vector3 lastScale DataPoint start DataPoint goal Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Protected Attributes Documentation variable targetTransform override Transform targetTransform => transform ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Experimental::NetworkTransform"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransform/#mirrorexperimentalnetworktransform","text":"Inherits from NetworkTransformBase , NetworkBehaviour , MonoBehaviour","title":"Mirror::Experimental::NetworkTransform"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransform/#protected-attributes","text":"Name override Transform targetTransform","title":"Protected Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransform/#additional-inherited-members","text":"Public Classes inherited from NetworkTransformBase Name struct DataPoint Public Functions inherited from NetworkTransformBase Name void ServerTeleport (Vector3 localPosition) This method will override this GameObject's current Transform.localPosition to the specified Vector3 and update all clients. void ServerTeleport (Vector3 localPosition, Quaternion localRotation) This method will override this GameObject's current Transform.localPosition and Transform.localRotation to the specified Vector3 and Quaternion and update all clients. Public Attributes inherited from NetworkTransformBase Name bool clientAuthority bool excludeOwnerUpdate bool syncPosition bool syncRotation bool syncScale bool interpolatePosition bool interpolateRotation bool interpolateScale float localPositionSensitivity float localRotationSensitivity float localScaleSensitivity Vector3 lastPosition Quaternion lastRotation Vector3 lastScale DataPoint start DataPoint goal Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransform/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransform/#variable-targettransform","text":"override Transform targetTransform => transform ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable targetTransform"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/","text":"Mirror::Experimental::NetworkTransformBase Inherits from NetworkBehaviour , MonoBehaviour Inherited by NetworkTransform , NetworkTransformChild Public Classes Name struct DataPoint Public Functions Name void ServerTeleport (Vector3 localPosition) This method will override this GameObject's current Transform.localPosition to the specified Vector3 and update all clients. void ServerTeleport (Vector3 localPosition, Quaternion localRotation) This method will override this GameObject's current Transform.localPosition and Transform.localRotation to the specified Vector3 and Quaternion and update all clients. Protected Properties Name abstract Transform targetTransform Public Attributes Name bool clientAuthority bool excludeOwnerUpdate bool syncPosition bool syncRotation bool syncScale bool interpolatePosition bool interpolateRotation bool interpolateScale float localPositionSensitivity float localRotationSensitivity float localScaleSensitivity Vector3 lastPosition Quaternion lastRotation Vector3 lastScale DataPoint start DataPoint goal Additional inherited members Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Public Functions Documentation function ServerTeleport inline void ServerTeleport ( Vector3 localPosition ) This method will override this GameObject's current Transform.localPosition to the specified Vector3 and update all clients. Parameters : localPosition Where to teleport this GameObject NOTE: position must be in LOCAL space if the transform has a parent function ServerTeleport inline void ServerTeleport ( Vector3 localPosition , Quaternion localRotation ) This method will override this GameObject's current Transform.localPosition and Transform.localRotation to the specified Vector3 and Quaternion and update all clients. Parameters : localPosition Where to teleport this GameObject localRotation Which rotation to set this GameObject NOTE: localPosition must be in LOCAL space if the transform has a parent NOTE: localRotation must be in LOCAL space if the transform has a parent Protected Property Documentation property targetTransform abstract Transform targetTransform ; Public Attributes Documentation variable clientAuthority bool clientAuthority ; variable excludeOwnerUpdate bool excludeOwnerUpdate = true ; variable syncPosition bool syncPosition = true ; variable syncRotation bool syncRotation = true ; variable syncScale bool syncScale = true ; variable interpolatePosition bool interpolatePosition = true ; variable interpolateRotation bool interpolateRotation = true ; variable interpolateScale bool interpolateScale = true ; variable localPositionSensitivity float localPositionSensitivity = .01f ; variable localRotationSensitivity float localRotationSensitivity = .01f ; variable localScaleSensitivity float localScaleSensitivity = .01f ; variable lastPosition Vector3 lastPosition ; variable lastRotation Quaternion lastRotation ; variable lastScale Vector3 lastScale ; variable start DataPoint start = new [ DataPoint ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structMirror_1_1Experimental_1_1NetworkTransformBase_1_1DataPoint / )(); variable goal DataPoint goal = new [ DataPoint ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structMirror_1_1Experimental_1_1NetworkTransformBase_1_1DataPoint / )(); Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Experimental::NetworkTransformBase"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#mirrorexperimentalnetworktransformbase","text":"Inherits from NetworkBehaviour , MonoBehaviour Inherited by NetworkTransform , NetworkTransformChild","title":"Mirror::Experimental::NetworkTransformBase"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#public-classes","text":"Name struct DataPoint","title":"Public Classes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#public-functions","text":"Name void ServerTeleport (Vector3 localPosition) This method will override this GameObject's current Transform.localPosition to the specified Vector3 and update all clients. void ServerTeleport (Vector3 localPosition, Quaternion localRotation) This method will override this GameObject's current Transform.localPosition and Transform.localRotation to the specified Vector3 and Quaternion and update all clients.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#protected-properties","text":"Name abstract Transform targetTransform","title":"Protected Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#public-attributes","text":"Name bool clientAuthority bool excludeOwnerUpdate bool syncPosition bool syncRotation bool syncScale bool interpolatePosition bool interpolateRotation bool interpolateScale float localPositionSensitivity float localRotationSensitivity float localScaleSensitivity Vector3 lastPosition Quaternion lastRotation Vector3 lastScale DataPoint start DataPoint goal","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#additional-inherited-members","text":"Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#function-serverteleport","text":"inline void ServerTeleport ( Vector3 localPosition ) This method will override this GameObject's current Transform.localPosition to the specified Vector3 and update all clients. Parameters : localPosition Where to teleport this GameObject NOTE: position must be in LOCAL space if the transform has a parent","title":"function ServerTeleport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#function-serverteleport_1","text":"inline void ServerTeleport ( Vector3 localPosition , Quaternion localRotation ) This method will override this GameObject's current Transform.localPosition and Transform.localRotation to the specified Vector3 and Quaternion and update all clients. Parameters : localPosition Where to teleport this GameObject localRotation Which rotation to set this GameObject NOTE: localPosition must be in LOCAL space if the transform has a parent NOTE: localRotation must be in LOCAL space if the transform has a parent","title":"function ServerTeleport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#protected-property-documentation","text":"","title":"Protected Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#property-targettransform","text":"abstract Transform targetTransform ;","title":"property targetTransform"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#variable-clientauthority","text":"bool clientAuthority ;","title":"variable clientAuthority"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#variable-excludeownerupdate","text":"bool excludeOwnerUpdate = true ;","title":"variable excludeOwnerUpdate"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#variable-syncposition","text":"bool syncPosition = true ;","title":"variable syncPosition"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#variable-syncrotation","text":"bool syncRotation = true ;","title":"variable syncRotation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#variable-syncscale","text":"bool syncScale = true ;","title":"variable syncScale"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#variable-interpolateposition","text":"bool interpolatePosition = true ;","title":"variable interpolatePosition"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#variable-interpolaterotation","text":"bool interpolateRotation = true ;","title":"variable interpolateRotation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#variable-interpolatescale","text":"bool interpolateScale = true ;","title":"variable interpolateScale"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#variable-localpositionsensitivity","text":"float localPositionSensitivity = .01f ;","title":"variable localPositionSensitivity"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#variable-localrotationsensitivity","text":"float localRotationSensitivity = .01f ;","title":"variable localRotationSensitivity"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#variable-localscalesensitivity","text":"float localScaleSensitivity = .01f ;","title":"variable localScaleSensitivity"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#variable-lastposition","text":"Vector3 lastPosition ;","title":"variable lastPosition"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#variable-lastrotation","text":"Quaternion lastRotation ;","title":"variable lastRotation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#variable-lastscale","text":"Vector3 lastScale ;","title":"variable lastScale"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#variable-start","text":"DataPoint start = new [ DataPoint ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structMirror_1_1Experimental_1_1NetworkTransformBase_1_1DataPoint / )();","title":"variable start"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformBase/#variable-goal","text":"DataPoint goal = new [ DataPoint ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structMirror_1_1Experimental_1_1NetworkTransformBase_1_1DataPoint / )(); Updated on 29 January 2021 at 18:34:49 UTC","title":"variable goal"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformChild/","text":"Mirror::Experimental::NetworkTransformChild A component to synchronize the position of child transforms of networked objects. More... Inherits from NetworkTransformBase , NetworkBehaviour , MonoBehaviour Public Attributes Name Transform target Protected Attributes Name override Transform targetTransform Additional inherited members Public Classes inherited from NetworkTransformBase Name struct DataPoint Public Functions inherited from NetworkTransformBase Name void ServerTeleport (Vector3 localPosition) This method will override this GameObject's current Transform.localPosition to the specified Vector3 and update all clients. void ServerTeleport (Vector3 localPosition, Quaternion localRotation) This method will override this GameObject's current Transform.localPosition and Transform.localRotation to the specified Vector3 and Quaternion and update all clients. Public Attributes inherited from NetworkTransformBase Name bool clientAuthority bool excludeOwnerUpdate bool syncPosition bool syncRotation bool syncScale bool interpolatePosition bool interpolateRotation bool interpolateScale float localPositionSensitivity float localRotationSensitivity float localScaleSensitivity Vector3 lastPosition Quaternion lastRotation Vector3 lastScale DataPoint start DataPoint goal Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Detailed Description class Mirror :: Experimental :: NetworkTransformChild ; A component to synchronize the position of child transforms of networked objects. There must be a NetworkTransform on the root object of the hierarchy. There can be multiple NetworkTransformChild components on an object. This does not use physics for synchronization, it simply synchronizes the localPosition and localRotation of the child transform and lerps towards the recieved values. Public Attributes Documentation variable target Transform target ; Protected Attributes Documentation variable targetTransform override Transform targetTransform => target ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Experimental::NetworkTransformChild"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformChild/#mirrorexperimentalnetworktransformchild","text":"A component to synchronize the position of child transforms of networked objects. More... Inherits from NetworkTransformBase , NetworkBehaviour , MonoBehaviour","title":"Mirror::Experimental::NetworkTransformChild"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformChild/#public-attributes","text":"Name Transform target","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformChild/#protected-attributes","text":"Name override Transform targetTransform","title":"Protected Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformChild/#additional-inherited-members","text":"Public Classes inherited from NetworkTransformBase Name struct DataPoint Public Functions inherited from NetworkTransformBase Name void ServerTeleport (Vector3 localPosition) This method will override this GameObject's current Transform.localPosition to the specified Vector3 and update all clients. void ServerTeleport (Vector3 localPosition, Quaternion localRotation) This method will override this GameObject's current Transform.localPosition and Transform.localRotation to the specified Vector3 and Quaternion and update all clients. Public Attributes inherited from NetworkTransformBase Name bool clientAuthority bool excludeOwnerUpdate bool syncPosition bool syncRotation bool syncScale bool interpolatePosition bool interpolateRotation bool interpolateScale float localPositionSensitivity float localRotationSensitivity float localScaleSensitivity Vector3 lastPosition Quaternion lastRotation Vector3 lastScale DataPoint start DataPoint goal Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformChild/#detailed-description","text":"class Mirror :: Experimental :: NetworkTransformChild ; A component to synchronize the position of child transforms of networked objects. There must be a NetworkTransform on the root object of the hierarchy. There can be multiple NetworkTransformChild components on an object. This does not use physics for synchronization, it simply synchronizes the localPosition and localRotation of the child transform and lerps towards the recieved values.","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformChild/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformChild/#variable-target","text":"Transform target ;","title":"variable target"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformChild/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Experimental_1_1NetworkTransformChild/#variable-targettransform","text":"override Transform targetTransform => target ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable targetTransform"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ExponentialMovingAverage/","text":"Mirror::ExponentialMovingAverage Public Functions Name ExponentialMovingAverage (int n) void Add (double newValue) Public Properties Name double Value double Var Public Functions Documentation function ExponentialMovingAverage inline ExponentialMovingAverage ( int n ) function Add inline void Add ( double newValue ) Public Property Documentation property Value double Value ; property Var double Var ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::ExponentialMovingAverage"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ExponentialMovingAverage/#mirrorexponentialmovingaverage","text":"","title":"Mirror::ExponentialMovingAverage"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ExponentialMovingAverage/#public-functions","text":"Name ExponentialMovingAverage (int n) void Add (double newValue)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ExponentialMovingAverage/#public-properties","text":"Name double Value double Var","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ExponentialMovingAverage/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ExponentialMovingAverage/#function-exponentialmovingaverage","text":"inline ExponentialMovingAverage ( int n )","title":"function ExponentialMovingAverage"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ExponentialMovingAverage/#function-add","text":"inline void Add ( double newValue )","title":"function Add"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ExponentialMovingAverage/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ExponentialMovingAverage/#property-value","text":"double Value ;","title":"property Value"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ExponentialMovingAverage/#property-var","text":"double Var ; Updated on 29 January 2021 at 18:34:47 UTC","title":"property Var"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/","text":"Mirror::FallbackTransport Inherits from Transport , MonoBehaviour Public Functions Name void Awake () virtual override bool Available () Is this transport available in the current platform? virtual override void ClientConnect (string address) Establish a connection to a server virtual override void ClientConnect (Uri uri) Establish a connection to a server virtual override bool ClientConnected () Determines if we are currently connected to the server virtual override void ClientDisconnect () Disconnect this client from the server virtual override void ClientSend (int channelId, ArraySegment< byte > segment) Send data to the server virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery virtual override bool ServerActive () Determines if the server is up and running virtual override string ServerGetClientAddress (int connectionId) Get the client address virtual override bool ServerDisconnect (int connectionId) Disconnect a client from this server. Useful to kick people out. virtual override void ServerSend (int connectionId, int channelId, ArraySegment< byte > segment) Send data to a client. virtual override void ServerStart () Start listening for clients virtual override void ServerStop () Stop listening for clients and disconnect all existing clients virtual override void Shutdown () Shut down the transport, both as client and server virtual override int GetMaxPacketSize (int channelId =0) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. override string ToString () Public Attributes Name Transport [] transports Additional inherited members Public Functions inherited from Transport Name void Update () virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor Public Attributes inherited from Transport Name Transport activeTransport The current transport used by Mirror . Action OnClientConnected Notify subscribers when when this client establish a successful connection to the server Action< ArraySegment< byte >, int > OnClientDataReceived Notify subscribers when this client receive data from the server Action< Exception > OnClientError Notify subscribers when this client encounters an error communicating with the server Action OnClientDisconnected Notify subscribers when this client disconnects from the server Action< int > OnServerConnected Notify subscribers when a client connects to this server Action< int, ArraySegment< byte >, int > OnServerDataReceived Notify subscribers when this server receives data from the client Action< int, Exception > OnServerError Notify subscribers when this server has some problem communicating with the client Action< int > OnServerDisconnected Notify subscribers when a client disconnects from this server Public Functions Documentation function Awake inline void Awake () function Available inline virtual override bool Available () Is this transport available in the current platform? Return : True if this transport works in the current platform Reimplements : Mirror::Transport::Available Some transports might only be available in mobile Many will not work in webgl Example usage: return Application.platform == RuntimePlatform.WebGLPlayer function ClientConnect inline virtual override void ClientConnect ( string address ) Establish a connection to a server Parameters : address The IP address or FQDN of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect function ClientConnect inline virtual override void ClientConnect ( Uri uri ) Establish a connection to a server Parameters : uri The address of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect function ClientConnected inline virtual override bool ClientConnected () Determines if we are currently connected to the server Return : True if a connection has been established to the server Reimplements : Mirror::Transport::ClientConnected function ClientDisconnect inline virtual override void ClientDisconnect () Disconnect this client from the server Reimplements : Mirror::Transport::ClientDisconnect function ClientSend inline virtual override void ClientSend ( int channelId , ArraySegment < byte > segment ) Send data to the server Parameters : channelId The channel to use. 0 is the default channel, but some transports might want to provide unreliable, encrypted, compressed, or any other feature as new channels segment The data to send to the server. Will be recycled after returning, so either use it directly or copy it internally. This allows for allocation-free sends! Reimplements : Mirror::Transport::ClientSend function ServerUri virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery Return : the url at which this server can be reached Reimplements : Mirror::Transport::ServerUri function ServerActive inline virtual override bool ServerActive () Determines if the server is up and running Return : true if the transport is ready for connections from clients Reimplements : Mirror::Transport::ServerActive function ServerGetClientAddress inline virtual override string ServerGetClientAddress ( int connectionId ) Get the client address Parameters : connectionId id of the client Return : address of the client Reimplements : Mirror::Transport::ServerGetClientAddress function ServerDisconnect inline virtual override bool ServerDisconnect ( int connectionId ) Disconnect a client from this server. Useful to kick people out. Parameters : connectionId the id of the client to disconnect Return : true if the client was kicked Reimplements : Mirror::Transport::ServerDisconnect function ServerSend inline virtual override void ServerSend ( int connectionId , int channelId , ArraySegment < byte > segment ) Send data to a client. Parameters : connectionId The client connection id to send the data to channelId The channel to be used. Transports can use channels to implement other features such as unreliable, encryption, compression, etc... data Reimplements : Mirror::Transport::ServerSend function ServerStart inline virtual override void ServerStart () Start listening for clients Reimplements : Mirror::Transport::ServerStart function ServerStop inline virtual override void ServerStop () Stop listening for clients and disconnect all existing clients Reimplements : Mirror::Transport::ServerStop function Shutdown inline virtual override void Shutdown () Shut down the transport, both as client and server Reimplements : Mirror::Transport::Shutdown function GetMaxPacketSize inline virtual override int GetMaxPacketSize ( int channelId = 0 ) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. Parameters : channelId channel id Return : the size in bytes that can be sent via the provided channel Reimplements : Mirror::Transport::GetMaxPacketSize GetMaxPacketSize needs to return a value at all times. Even if the Transport isn't running, or isn't Available() . This is because Fallback and Multiplex transports need to find the smallest possible packet size at runtime. function ToString inline override string ToString () Public Attributes Documentation variable transports Transport [] transports ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::FallbackTransport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#mirrorfallbacktransport","text":"Inherits from Transport , MonoBehaviour","title":"Mirror::FallbackTransport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#public-functions","text":"Name void Awake () virtual override bool Available () Is this transport available in the current platform? virtual override void ClientConnect (string address) Establish a connection to a server virtual override void ClientConnect (Uri uri) Establish a connection to a server virtual override bool ClientConnected () Determines if we are currently connected to the server virtual override void ClientDisconnect () Disconnect this client from the server virtual override void ClientSend (int channelId, ArraySegment< byte > segment) Send data to the server virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery virtual override bool ServerActive () Determines if the server is up and running virtual override string ServerGetClientAddress (int connectionId) Get the client address virtual override bool ServerDisconnect (int connectionId) Disconnect a client from this server. Useful to kick people out. virtual override void ServerSend (int connectionId, int channelId, ArraySegment< byte > segment) Send data to a client. virtual override void ServerStart () Start listening for clients virtual override void ServerStop () Stop listening for clients and disconnect all existing clients virtual override void Shutdown () Shut down the transport, both as client and server virtual override int GetMaxPacketSize (int channelId =0) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. override string ToString ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#public-attributes","text":"Name Transport [] transports","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#additional-inherited-members","text":"Public Functions inherited from Transport Name void Update () virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor Public Attributes inherited from Transport Name Transport activeTransport The current transport used by Mirror . Action OnClientConnected Notify subscribers when when this client establish a successful connection to the server Action< ArraySegment< byte >, int > OnClientDataReceived Notify subscribers when this client receive data from the server Action< Exception > OnClientError Notify subscribers when this client encounters an error communicating with the server Action OnClientDisconnected Notify subscribers when this client disconnects from the server Action< int > OnServerConnected Notify subscribers when a client connects to this server Action< int, ArraySegment< byte >, int > OnServerDataReceived Notify subscribers when this server receives data from the client Action< int, Exception > OnServerError Notify subscribers when this server has some problem communicating with the client Action< int > OnServerDisconnected Notify subscribers when a client disconnects from this server","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#function-awake","text":"inline void Awake ()","title":"function Awake"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#function-available","text":"inline virtual override bool Available () Is this transport available in the current platform? Return : True if this transport works in the current platform Reimplements : Mirror::Transport::Available Some transports might only be available in mobile Many will not work in webgl Example usage: return Application.platform == RuntimePlatform.WebGLPlayer","title":"function Available"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#function-clientconnect","text":"inline virtual override void ClientConnect ( string address ) Establish a connection to a server Parameters : address The IP address or FQDN of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect","title":"function ClientConnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#function-clientconnect_1","text":"inline virtual override void ClientConnect ( Uri uri ) Establish a connection to a server Parameters : uri The address of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect","title":"function ClientConnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#function-clientconnected","text":"inline virtual override bool ClientConnected () Determines if we are currently connected to the server Return : True if a connection has been established to the server Reimplements : Mirror::Transport::ClientConnected","title":"function ClientConnected"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#function-clientdisconnect","text":"inline virtual override void ClientDisconnect () Disconnect this client from the server Reimplements : Mirror::Transport::ClientDisconnect","title":"function ClientDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#function-clientsend","text":"inline virtual override void ClientSend ( int channelId , ArraySegment < byte > segment ) Send data to the server Parameters : channelId The channel to use. 0 is the default channel, but some transports might want to provide unreliable, encrypted, compressed, or any other feature as new channels segment The data to send to the server. Will be recycled after returning, so either use it directly or copy it internally. This allows for allocation-free sends! Reimplements : Mirror::Transport::ClientSend","title":"function ClientSend"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#function-serveruri","text":"virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery Return : the url at which this server can be reached Reimplements : Mirror::Transport::ServerUri","title":"function ServerUri"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#function-serveractive","text":"inline virtual override bool ServerActive () Determines if the server is up and running Return : true if the transport is ready for connections from clients Reimplements : Mirror::Transport::ServerActive","title":"function ServerActive"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#function-servergetclientaddress","text":"inline virtual override string ServerGetClientAddress ( int connectionId ) Get the client address Parameters : connectionId id of the client Return : address of the client Reimplements : Mirror::Transport::ServerGetClientAddress","title":"function ServerGetClientAddress"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#function-serverdisconnect","text":"inline virtual override bool ServerDisconnect ( int connectionId ) Disconnect a client from this server. Useful to kick people out. Parameters : connectionId the id of the client to disconnect Return : true if the client was kicked Reimplements : Mirror::Transport::ServerDisconnect","title":"function ServerDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#function-serversend","text":"inline virtual override void ServerSend ( int connectionId , int channelId , ArraySegment < byte > segment ) Send data to a client. Parameters : connectionId The client connection id to send the data to channelId The channel to be used. Transports can use channels to implement other features such as unreliable, encryption, compression, etc... data Reimplements : Mirror::Transport::ServerSend","title":"function ServerSend"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#function-serverstart","text":"inline virtual override void ServerStart () Start listening for clients Reimplements : Mirror::Transport::ServerStart","title":"function ServerStart"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#function-serverstop","text":"inline virtual override void ServerStop () Stop listening for clients and disconnect all existing clients Reimplements : Mirror::Transport::ServerStop","title":"function ServerStop"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#function-shutdown","text":"inline virtual override void Shutdown () Shut down the transport, both as client and server Reimplements : Mirror::Transport::Shutdown","title":"function Shutdown"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#function-getmaxpacketsize","text":"inline virtual override int GetMaxPacketSize ( int channelId = 0 ) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. Parameters : channelId channel id Return : the size in bytes that can be sent via the provided channel Reimplements : Mirror::Transport::GetMaxPacketSize GetMaxPacketSize needs to return a value at all times. Even if the Transport isn't running, or isn't Available() . This is because Fallback and Multiplex transports need to find the smallest possible packet size at runtime.","title":"function GetMaxPacketSize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#function-tostring","text":"inline override string ToString ()","title":"function ToString"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1FallbackTransport/#variable-transports","text":"Transport [] transports ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable transports"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ILoggerExtensions/","text":"Mirror::ILoggerExtensions Public Functions Name void LogError (this ILogger logger, object message) void Assert (this ILogger logger, bool condition, string message) void LogWarning (this ILogger logger, object message) bool LogEnabled (this ILogger logger) bool WarnEnabled (this ILogger logger) bool ErrorEnabled (this ILogger logger) Public Functions Documentation function LogError static inline void LogError ( this ILogger logger , object message ) function Assert static inline void Assert ( this ILogger logger , bool condition , string message ) function LogWarning static inline void LogWarning ( this ILogger logger , object message ) function LogEnabled static bool LogEnabled ( this ILogger logger ) function WarnEnabled static bool WarnEnabled ( this ILogger logger ) function ErrorEnabled static bool ErrorEnabled ( this ILogger logger ) Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::ILoggerExtensions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ILoggerExtensions/#mirroriloggerextensions","text":"","title":"Mirror::ILoggerExtensions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ILoggerExtensions/#public-functions","text":"Name void LogError (this ILogger logger, object message) void Assert (this ILogger logger, bool condition, string message) void LogWarning (this ILogger logger, object message) bool LogEnabled (this ILogger logger) bool WarnEnabled (this ILogger logger) bool ErrorEnabled (this ILogger logger)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ILoggerExtensions/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ILoggerExtensions/#function-logerror","text":"static inline void LogError ( this ILogger logger , object message )","title":"function LogError"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ILoggerExtensions/#function-assert","text":"static inline void Assert ( this ILogger logger , bool condition , string message )","title":"function Assert"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ILoggerExtensions/#function-logwarning","text":"static inline void LogWarning ( this ILogger logger , object message )","title":"function LogWarning"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ILoggerExtensions/#function-logenabled","text":"static bool LogEnabled ( this ILogger logger )","title":"function LogEnabled"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ILoggerExtensions/#function-warnenabled","text":"static bool WarnEnabled ( this ILogger logger )","title":"function WarnEnabled"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ILoggerExtensions/#function-errorenabled","text":"static bool ErrorEnabled ( this ILogger logger ) Updated on 29 January 2021 at 18:34:47 UTC","title":"function ErrorEnabled"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1InspectorHelper/","text":"Mirror::InspectorHelper Public Functions Name IEnumerable< FieldInfo > GetAllFields (Type type, Type deepestBaseType) Gets all public and private fields for a type bool IsSyncVar (this FieldInfo field) bool IsSerializeField (this FieldInfo field) bool IsVisibleField (this FieldInfo field) bool IsSyncObject (this FieldInfo field) bool HasShowInInspector (this FieldInfo field) bool IsVisibleSyncObject (this FieldInfo field) Public Functions Documentation function GetAllFields static inline IEnumerable < FieldInfo > GetAllFields ( Type type , Type deepestBaseType ) Gets all public and private fields for a type Parameters : type deepestBaseType Stops at this base type (exclusive) Return : function IsSyncVar static inline bool IsSyncVar ( this FieldInfo field ) function IsSerializeField static inline bool IsSerializeField ( this FieldInfo field ) function IsVisibleField static inline bool IsVisibleField ( this FieldInfo field ) function IsSyncObject static inline bool IsSyncObject ( this FieldInfo field ) function HasShowInInspector static inline bool HasShowInInspector ( this FieldInfo field ) function IsVisibleSyncObject static inline bool IsVisibleSyncObject ( this FieldInfo field ) Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::InspectorHelper"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1InspectorHelper/#mirrorinspectorhelper","text":"","title":"Mirror::InspectorHelper"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1InspectorHelper/#public-functions","text":"Name IEnumerable< FieldInfo > GetAllFields (Type type, Type deepestBaseType) Gets all public and private fields for a type bool IsSyncVar (this FieldInfo field) bool IsSerializeField (this FieldInfo field) bool IsVisibleField (this FieldInfo field) bool IsSyncObject (this FieldInfo field) bool HasShowInInspector (this FieldInfo field) bool IsVisibleSyncObject (this FieldInfo field)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1InspectorHelper/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1InspectorHelper/#function-getallfields","text":"static inline IEnumerable < FieldInfo > GetAllFields ( Type type , Type deepestBaseType ) Gets all public and private fields for a type Parameters : type deepestBaseType Stops at this base type (exclusive) Return :","title":"function GetAllFields"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1InspectorHelper/#function-issyncvar","text":"static inline bool IsSyncVar ( this FieldInfo field )","title":"function IsSyncVar"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1InspectorHelper/#function-isserializefield","text":"static inline bool IsSerializeField ( this FieldInfo field )","title":"function IsSerializeField"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1InspectorHelper/#function-isvisiblefield","text":"static inline bool IsVisibleField ( this FieldInfo field )","title":"function IsVisibleField"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1InspectorHelper/#function-issyncobject","text":"static inline bool IsSyncObject ( this FieldInfo field )","title":"function IsSyncObject"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1InspectorHelper/#function-hasshowininspector","text":"static inline bool HasShowInInspector ( this FieldInfo field )","title":"function HasShowInInspector"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1InspectorHelper/#function-isvisiblesyncobject","text":"static inline bool IsVisibleSyncObject ( this FieldInfo field ) Updated on 29 January 2021 at 18:34:47 UTC","title":"function IsVisibleSyncObject"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/","text":"Mirror::LLAPITransport Inherits from Transport , MonoBehaviour Public Functions Name virtual override bool Available () Is this transport available in the current platform? virtual override bool ClientConnected () Determines if we are currently connected to the server virtual override void ClientConnect (string address) Establish a connection to a server virtual override void ClientConnect (Uri uri) Establish a connection to a server virtual override void ClientSend (int channelId, ArraySegment< byte > segment) Send data to the server bool ProcessClientMessage () string ClientGetAddress () virtual override void ClientDisconnect () Disconnect this client from the server virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery virtual override bool ServerActive () Determines if the server is up and running virtual override void ServerStart () Start listening for clients virtual override void ServerSend (int connectionId, int channelId, ArraySegment< byte > segment) Send data to a client. bool ProcessServerMessage () virtual override bool ServerDisconnect (int connectionId) Disconnect a client from this server. Useful to kick people out. virtual override string ServerGetClientAddress (int connectionId) Get the client address virtual override void ServerStop () Stop listening for clients and disconnect all existing clients void LateUpdate () virtual override void Shutdown () Shut down the transport, both as client and server virtual override int GetMaxPacketSize (int channelId) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. override string ToString () Public Attributes Name const string Scheme ushort port bool useWebsockets ConnectionConfig connectionConfig GlobalConfig globalConfig Additional inherited members Public Functions inherited from Transport Name void Update () virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor Public Attributes inherited from Transport Name Transport activeTransport The current transport used by Mirror . Action OnClientConnected Notify subscribers when when this client establish a successful connection to the server Action< ArraySegment< byte >, int > OnClientDataReceived Notify subscribers when this client receive data from the server Action< Exception > OnClientError Notify subscribers when this client encounters an error communicating with the server Action OnClientDisconnected Notify subscribers when this client disconnects from the server Action< int > OnServerConnected Notify subscribers when a client connects to this server Action< int, ArraySegment< byte >, int > OnServerDataReceived Notify subscribers when this server receives data from the client Action< int, Exception > OnServerError Notify subscribers when this server has some problem communicating with the client Action< int > OnServerDisconnected Notify subscribers when a client disconnects from this server Public Functions Documentation function Available inline virtual override bool Available () Is this transport available in the current platform? Return : True if this transport works in the current platform Reimplements : Mirror::Transport::Available Some transports might only be available in mobile Many will not work in webgl Example usage: return Application.platform == RuntimePlatform.WebGLPlayer function ClientConnected inline virtual override bool ClientConnected () Determines if we are currently connected to the server Return : True if a connection has been established to the server Reimplements : Mirror::Transport::ClientConnected function ClientConnect inline virtual override void ClientConnect ( string address ) Establish a connection to a server Parameters : address The IP address or FQDN of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect function ClientConnect inline virtual override void ClientConnect ( Uri uri ) Establish a connection to a server Parameters : uri The address of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect function ClientSend inline virtual override void ClientSend ( int channelId , ArraySegment < byte > segment ) Send data to the server Parameters : channelId The channel to use. 0 is the default channel, but some transports might want to provide unreliable, encrypted, compressed, or any other feature as new channels segment The data to send to the server. Will be recycled after returning, so either use it directly or copy it internally. This allows for allocation-free sends! Reimplements : Mirror::Transport::ClientSend function ProcessClientMessage inline bool ProcessClientMessage () function ClientGetAddress inline string ClientGetAddress () function ClientDisconnect inline virtual override void ClientDisconnect () Disconnect this client from the server Reimplements : Mirror::Transport::ClientDisconnect function ServerUri inline virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery Return : the url at which this server can be reached Reimplements : Mirror::Transport::ServerUri function ServerActive inline virtual override bool ServerActive () Determines if the server is up and running Return : true if the transport is ready for connections from clients Reimplements : Mirror::Transport::ServerActive function ServerStart inline virtual override void ServerStart () Start listening for clients Reimplements : Mirror::Transport::ServerStart function ServerSend inline virtual override void ServerSend ( int connectionId , int channelId , ArraySegment < byte > segment ) Send data to a client. Parameters : connectionId The client connection id to send the data to channelId The channel to be used. Transports can use channels to implement other features such as unreliable, encryption, compression, etc... data Reimplements : Mirror::Transport::ServerSend function ProcessServerMessage inline bool ProcessServerMessage () function ServerDisconnect inline virtual override bool ServerDisconnect ( int connectionId ) Disconnect a client from this server. Useful to kick people out. Parameters : connectionId the id of the client to disconnect Return : true if the client was kicked Reimplements : Mirror::Transport::ServerDisconnect function ServerGetClientAddress inline virtual override string ServerGetClientAddress ( int connectionId ) Get the client address Parameters : connectionId id of the client Return : address of the client Reimplements : Mirror::Transport::ServerGetClientAddress function ServerStop inline virtual override void ServerStop () Stop listening for clients and disconnect all existing clients Reimplements : Mirror::Transport::ServerStop function LateUpdate inline void LateUpdate () function Shutdown inline virtual override void Shutdown () Shut down the transport, both as client and server Reimplements : Mirror::Transport::Shutdown function GetMaxPacketSize inline virtual override int GetMaxPacketSize ( int channelId ) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. Parameters : channelId channel id Return : the size in bytes that can be sent via the provided channel Reimplements : Mirror::Transport::GetMaxPacketSize GetMaxPacketSize needs to return a value at all times. Even if the Transport isn't running, or isn't Available() . This is because Fallback and Multiplex transports need to find the smallest possible packet size at runtime. function ToString inline override string ToString () Public Attributes Documentation variable Scheme const string Scheme = \"unet\" ; variable port ushort port = 7777 ; variable useWebsockets bool useWebsockets ; variable connectionConfig ConnectionConfig connectionConfig = new ConnectionConfig { PacketSize = 1500 , FragmentSize = 500 , ResendTimeout = 1200 , DisconnectTimeout = 6000 , ConnectTimeout = 6000 , MinUpdateTimeout = 1 , PingTimeout = 2000 , ReducedPingTimeout = 100 , AllCostTimeout = 20 , NetworkDropThreshold = 80 , OverflowDropThreshold = 80 , MaxConnectionAttempt = 10 , AckDelay = 33 , SendDelay = 10 , MaxCombinedReliableMessageSize = 100 , MaxCombinedReliableMessageCount = 10 , MaxSentMessageQueueSize = 512 , AcksType = ConnectionAcksType . Acks128 , InitialBandwidth = 0 , BandwidthPeakFactor = 2 , WebSocketReceiveBufferMaxSize = 0 , UdpSocketReceiveBufferMaxSize = 0 }; variable globalConfig GlobalConfig globalConfig = new GlobalConfig { ReactorModel = ReactorModel . SelectReactor , ThreadAwakeTimeout = 1 , ReactorMaximumSentMessages = 4096 , ReactorMaximumReceivedMessages = 4096 , MaxPacketSize = 2000 , MaxHosts = 16 , ThreadPoolSize = 3 , MinTimerTimeout = 1 , MaxTimerTimeout = 12000 }; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::LLAPITransport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#mirrorllapitransport","text":"Inherits from Transport , MonoBehaviour","title":"Mirror::LLAPITransport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#public-functions","text":"Name virtual override bool Available () Is this transport available in the current platform? virtual override bool ClientConnected () Determines if we are currently connected to the server virtual override void ClientConnect (string address) Establish a connection to a server virtual override void ClientConnect (Uri uri) Establish a connection to a server virtual override void ClientSend (int channelId, ArraySegment< byte > segment) Send data to the server bool ProcessClientMessage () string ClientGetAddress () virtual override void ClientDisconnect () Disconnect this client from the server virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery virtual override bool ServerActive () Determines if the server is up and running virtual override void ServerStart () Start listening for clients virtual override void ServerSend (int connectionId, int channelId, ArraySegment< byte > segment) Send data to a client. bool ProcessServerMessage () virtual override bool ServerDisconnect (int connectionId) Disconnect a client from this server. Useful to kick people out. virtual override string ServerGetClientAddress (int connectionId) Get the client address virtual override void ServerStop () Stop listening for clients and disconnect all existing clients void LateUpdate () virtual override void Shutdown () Shut down the transport, both as client and server virtual override int GetMaxPacketSize (int channelId) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. override string ToString ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#public-attributes","text":"Name const string Scheme ushort port bool useWebsockets ConnectionConfig connectionConfig GlobalConfig globalConfig","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#additional-inherited-members","text":"Public Functions inherited from Transport Name void Update () virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor Public Attributes inherited from Transport Name Transport activeTransport The current transport used by Mirror . Action OnClientConnected Notify subscribers when when this client establish a successful connection to the server Action< ArraySegment< byte >, int > OnClientDataReceived Notify subscribers when this client receive data from the server Action< Exception > OnClientError Notify subscribers when this client encounters an error communicating with the server Action OnClientDisconnected Notify subscribers when this client disconnects from the server Action< int > OnServerConnected Notify subscribers when a client connects to this server Action< int, ArraySegment< byte >, int > OnServerDataReceived Notify subscribers when this server receives data from the client Action< int, Exception > OnServerError Notify subscribers when this server has some problem communicating with the client Action< int > OnServerDisconnected Notify subscribers when a client disconnects from this server","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#function-available","text":"inline virtual override bool Available () Is this transport available in the current platform? Return : True if this transport works in the current platform Reimplements : Mirror::Transport::Available Some transports might only be available in mobile Many will not work in webgl Example usage: return Application.platform == RuntimePlatform.WebGLPlayer","title":"function Available"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#function-clientconnected","text":"inline virtual override bool ClientConnected () Determines if we are currently connected to the server Return : True if a connection has been established to the server Reimplements : Mirror::Transport::ClientConnected","title":"function ClientConnected"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#function-clientconnect","text":"inline virtual override void ClientConnect ( string address ) Establish a connection to a server Parameters : address The IP address or FQDN of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect","title":"function ClientConnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#function-clientconnect_1","text":"inline virtual override void ClientConnect ( Uri uri ) Establish a connection to a server Parameters : uri The address of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect","title":"function ClientConnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#function-clientsend","text":"inline virtual override void ClientSend ( int channelId , ArraySegment < byte > segment ) Send data to the server Parameters : channelId The channel to use. 0 is the default channel, but some transports might want to provide unreliable, encrypted, compressed, or any other feature as new channels segment The data to send to the server. Will be recycled after returning, so either use it directly or copy it internally. This allows for allocation-free sends! Reimplements : Mirror::Transport::ClientSend","title":"function ClientSend"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#function-processclientmessage","text":"inline bool ProcessClientMessage ()","title":"function ProcessClientMessage"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#function-clientgetaddress","text":"inline string ClientGetAddress ()","title":"function ClientGetAddress"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#function-clientdisconnect","text":"inline virtual override void ClientDisconnect () Disconnect this client from the server Reimplements : Mirror::Transport::ClientDisconnect","title":"function ClientDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#function-serveruri","text":"inline virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery Return : the url at which this server can be reached Reimplements : Mirror::Transport::ServerUri","title":"function ServerUri"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#function-serveractive","text":"inline virtual override bool ServerActive () Determines if the server is up and running Return : true if the transport is ready for connections from clients Reimplements : Mirror::Transport::ServerActive","title":"function ServerActive"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#function-serverstart","text":"inline virtual override void ServerStart () Start listening for clients Reimplements : Mirror::Transport::ServerStart","title":"function ServerStart"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#function-serversend","text":"inline virtual override void ServerSend ( int connectionId , int channelId , ArraySegment < byte > segment ) Send data to a client. Parameters : connectionId The client connection id to send the data to channelId The channel to be used. Transports can use channels to implement other features such as unreliable, encryption, compression, etc... data Reimplements : Mirror::Transport::ServerSend","title":"function ServerSend"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#function-processservermessage","text":"inline bool ProcessServerMessage ()","title":"function ProcessServerMessage"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#function-serverdisconnect","text":"inline virtual override bool ServerDisconnect ( int connectionId ) Disconnect a client from this server. Useful to kick people out. Parameters : connectionId the id of the client to disconnect Return : true if the client was kicked Reimplements : Mirror::Transport::ServerDisconnect","title":"function ServerDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#function-servergetclientaddress","text":"inline virtual override string ServerGetClientAddress ( int connectionId ) Get the client address Parameters : connectionId id of the client Return : address of the client Reimplements : Mirror::Transport::ServerGetClientAddress","title":"function ServerGetClientAddress"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#function-serverstop","text":"inline virtual override void ServerStop () Stop listening for clients and disconnect all existing clients Reimplements : Mirror::Transport::ServerStop","title":"function ServerStop"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#function-lateupdate","text":"inline void LateUpdate ()","title":"function LateUpdate"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#function-shutdown","text":"inline virtual override void Shutdown () Shut down the transport, both as client and server Reimplements : Mirror::Transport::Shutdown","title":"function Shutdown"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#function-getmaxpacketsize","text":"inline virtual override int GetMaxPacketSize ( int channelId ) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. Parameters : channelId channel id Return : the size in bytes that can be sent via the provided channel Reimplements : Mirror::Transport::GetMaxPacketSize GetMaxPacketSize needs to return a value at all times. Even if the Transport isn't running, or isn't Available() . This is because Fallback and Multiplex transports need to find the smallest possible packet size at runtime.","title":"function GetMaxPacketSize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#function-tostring","text":"inline override string ToString ()","title":"function ToString"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#variable-scheme","text":"const string Scheme = \"unet\" ;","title":"variable Scheme"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#variable-port","text":"ushort port = 7777 ;","title":"variable port"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#variable-usewebsockets","text":"bool useWebsockets ;","title":"variable useWebsockets"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#variable-connectionconfig","text":"ConnectionConfig connectionConfig = new ConnectionConfig { PacketSize = 1500 , FragmentSize = 500 , ResendTimeout = 1200 , DisconnectTimeout = 6000 , ConnectTimeout = 6000 , MinUpdateTimeout = 1 , PingTimeout = 2000 , ReducedPingTimeout = 100 , AllCostTimeout = 20 , NetworkDropThreshold = 80 , OverflowDropThreshold = 80 , MaxConnectionAttempt = 10 , AckDelay = 33 , SendDelay = 10 , MaxCombinedReliableMessageSize = 100 , MaxCombinedReliableMessageCount = 10 , MaxSentMessageQueueSize = 512 , AcksType = ConnectionAcksType . Acks128 , InitialBandwidth = 0 , BandwidthPeakFactor = 2 , WebSocketReceiveBufferMaxSize = 0 , UdpSocketReceiveBufferMaxSize = 0 };","title":"variable connectionConfig"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LLAPITransport/#variable-globalconfig","text":"GlobalConfig globalConfig = new GlobalConfig { ReactorModel = ReactorModel . SelectReactor , ThreadAwakeTimeout = 1 , ReactorMaximumSentMessages = 4096 , ReactorMaximumReceivedMessages = 4096 , MaxPacketSize = 2000 , MaxHosts = 16 , ThreadPoolSize = 3 , MinTimerTimeout = 1 , MaxTimerTimeout = 12000 }; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable globalConfig"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LocalConnectionBuffer/","text":"Mirror::LocalConnectionBuffer Public Functions Name void Write (ArraySegment< byte > segment) bool HasPackets () ArraySegment< byte > GetNextPacket () void ResetBuffer () Public Functions Documentation function Write inline void Write ( ArraySegment < byte > segment ) function HasPackets inline bool HasPackets () function GetNextPacket inline ArraySegment < byte > GetNextPacket () function ResetBuffer inline void ResetBuffer () Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::LocalConnectionBuffer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LocalConnectionBuffer/#mirrorlocalconnectionbuffer","text":"","title":"Mirror::LocalConnectionBuffer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LocalConnectionBuffer/#public-functions","text":"Name void Write (ArraySegment< byte > segment) bool HasPackets () ArraySegment< byte > GetNextPacket () void ResetBuffer ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LocalConnectionBuffer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LocalConnectionBuffer/#function-write","text":"inline void Write ( ArraySegment < byte > segment )","title":"function Write"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LocalConnectionBuffer/#function-haspackets","text":"inline bool HasPackets ()","title":"function HasPackets"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LocalConnectionBuffer/#function-getnextpacket","text":"inline ArraySegment < byte > GetNextPacket ()","title":"function GetNextPacket"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LocalConnectionBuffer/#function-resetbuffer","text":"inline void ResetBuffer () Updated on 29 January 2021 at 18:34:47 UTC","title":"function ResetBuffer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LogFactory/","text":"Mirror::LogFactory Public Functions Name ILogger GetLogger< T > (LogType defaultLogLevel =LogType.Warning) ILogger GetLogger (System.Type type, LogType defaultLogLevel =LogType.Warning) ILogger GetLogger (string loggerName, LogType defaultLogLevel =LogType.Warning) void EnableDebugMode () Makes all log levels LogType.Log, this is so that NetworkManger.showDebugMessages can still be used void ReplaceLogHandler (ILogHandler logHandler) Replacing log handler for all existing loggers and sets defaultLogHandler for new loggers Public Attributes Name SortedDictionary< string, ILogger >.ValueCollection AllLoggers Public Functions Documentation function GetLogger< T > static inline ILogger GetLogger < T > ( LogType defaultLogLevel = LogType . Warning ) function GetLogger static inline ILogger GetLogger ( System . Type type , LogType defaultLogLevel = LogType . Warning ) function GetLogger static inline ILogger GetLogger ( string loggerName , LogType defaultLogLevel = LogType . Warning ) function EnableDebugMode static inline void EnableDebugMode () Makes all log levels LogType.Log, this is so that NetworkManger.showDebugMessages can still be used function ReplaceLogHandler static inline void ReplaceLogHandler ( ILogHandler logHandler ) Replacing log handler for all existing loggers and sets defaultLogHandler for new loggers Parameters : logHandler Public Attributes Documentation variable AllLoggers static SortedDictionary < string , ILogger > . ValueCollection AllLoggers => loggers . Values ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::LogFactory"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LogFactory/#mirrorlogfactory","text":"","title":"Mirror::LogFactory"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LogFactory/#public-functions","text":"Name ILogger GetLogger< T > (LogType defaultLogLevel =LogType.Warning) ILogger GetLogger (System.Type type, LogType defaultLogLevel =LogType.Warning) ILogger GetLogger (string loggerName, LogType defaultLogLevel =LogType.Warning) void EnableDebugMode () Makes all log levels LogType.Log, this is so that NetworkManger.showDebugMessages can still be used void ReplaceLogHandler (ILogHandler logHandler) Replacing log handler for all existing loggers and sets defaultLogHandler for new loggers","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LogFactory/#public-attributes","text":"Name SortedDictionary< string, ILogger >.ValueCollection AllLoggers","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LogFactory/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LogFactory/#function-getlogger-t","text":"static inline ILogger GetLogger < T > ( LogType defaultLogLevel = LogType . Warning )","title":"function GetLogger&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LogFactory/#function-getlogger","text":"static inline ILogger GetLogger ( System . Type type , LogType defaultLogLevel = LogType . Warning )","title":"function GetLogger"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LogFactory/#function-getlogger_1","text":"static inline ILogger GetLogger ( string loggerName , LogType defaultLogLevel = LogType . Warning )","title":"function GetLogger"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LogFactory/#function-enabledebugmode","text":"static inline void EnableDebugMode () Makes all log levels LogType.Log, this is so that NetworkManger.showDebugMessages can still be used","title":"function EnableDebugMode"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LogFactory/#function-replaceloghandler","text":"static inline void ReplaceLogHandler ( ILogHandler logHandler ) Replacing log handler for all existing loggers and sets defaultLogHandler for new loggers Parameters : logHandler","title":"function ReplaceLogHandler"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LogFactory/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LogFactory/#variable-allloggers","text":"static SortedDictionary < string , ILogger > . ValueCollection AllLoggers => loggers . Values ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable AllLoggers"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LogFilter/","text":"Mirror::LogFilter Public Attributes Name bool Debug Public Attributes Documentation variable Debug static bool Debug = false ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::LogFilter"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LogFilter/#mirrorlogfilter","text":"","title":"Mirror::LogFilter"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LogFilter/#public-attributes","text":"Name bool Debug","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LogFilter/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1LogFilter/#variable-debug","text":"static bool Debug = false ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable Debug"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1ConsoleColorLogHandler/","text":"Mirror::Logging::ConsoleColorLogHandler Inherits from ILogHandler Public Functions Name ConsoleColorLogHandler (bool showExceptionStackTrace) void LogException (Exception exception, UnityEngine.Object context) void LogFormat (LogType logType, UnityEngine.Object context, string format, params object [] args) Public Functions Documentation function ConsoleColorLogHandler inline ConsoleColorLogHandler ( bool showExceptionStackTrace ) function LogException inline void LogException ( Exception exception , UnityEngine . Object context ) function LogFormat inline void LogFormat ( LogType logType , UnityEngine . Object context , string format , params object [] args ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Logging::ConsoleColorLogHandler"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1ConsoleColorLogHandler/#mirrorloggingconsolecolorloghandler","text":"Inherits from ILogHandler","title":"Mirror::Logging::ConsoleColorLogHandler"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1ConsoleColorLogHandler/#public-functions","text":"Name ConsoleColorLogHandler (bool showExceptionStackTrace) void LogException (Exception exception, UnityEngine.Object context) void LogFormat (LogType logType, UnityEngine.Object context, string format, params object [] args)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1ConsoleColorLogHandler/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1ConsoleColorLogHandler/#function-consolecolorloghandler","text":"inline ConsoleColorLogHandler ( bool showExceptionStackTrace )","title":"function ConsoleColorLogHandler"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1ConsoleColorLogHandler/#function-logexception","text":"inline void LogException ( Exception exception , UnityEngine . Object context )","title":"function LogException"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1ConsoleColorLogHandler/#function-logformat","text":"inline void LogFormat ( LogType logType , UnityEngine . Object context , string format , params object [] args ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function LogFormat"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1LogSettings/","text":"Mirror::Logging::LogSettings Inherits from ScriptableObject Public Classes Name struct LoggerSettings Public Attributes Name List< LoggerSettings > loglevels Public Attributes Documentation variable loglevels List < LoggerSettings > loglevels = new List < [ LoggerSettings ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structMirror_1_1Logging_1_1LogSettings_1_1LoggerSettings / ) > (); Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Logging::LogSettings"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1LogSettings/#mirrorlogginglogsettings","text":"Inherits from ScriptableObject","title":"Mirror::Logging::LogSettings"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1LogSettings/#public-classes","text":"Name struct LoggerSettings","title":"Public Classes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1LogSettings/#public-attributes","text":"Name List< LoggerSettings > loglevels","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1LogSettings/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1LogSettings/#variable-loglevels","text":"List < LoggerSettings > loglevels = new List < [ LoggerSettings ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structMirror_1_1Logging_1_1LogSettings_1_1LoggerSettings / ) > (); Updated on 29 January 2021 at 18:34:49 UTC","title":"variable loglevels"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1LogSettingsExt/","text":"Mirror::Logging::LogSettingsExt Public Functions Name void SaveFromDictionary (this LogSettings settings, SortedDictionary< string, ILogger > dictionary) void LoadIntoDictionary (this LogSettings settings, SortedDictionary< string, ILogger > dictionary) Public Functions Documentation function SaveFromDictionary static inline void SaveFromDictionary ( this LogSettings settings , SortedDictionary < string , ILogger > dictionary ) function LoadIntoDictionary static inline void LoadIntoDictionary ( this LogSettings settings , SortedDictionary < string , ILogger > dictionary ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Logging::LogSettingsExt"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1LogSettingsExt/#mirrorlogginglogsettingsext","text":"","title":"Mirror::Logging::LogSettingsExt"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1LogSettingsExt/#public-functions","text":"Name void SaveFromDictionary (this LogSettings settings, SortedDictionary< string, ILogger > dictionary) void LoadIntoDictionary (this LogSettings settings, SortedDictionary< string, ILogger > dictionary)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1LogSettingsExt/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1LogSettingsExt/#function-savefromdictionary","text":"static inline void SaveFromDictionary ( this LogSettings settings , SortedDictionary < string , ILogger > dictionary )","title":"function SaveFromDictionary"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1LogSettingsExt/#function-loadintodictionary","text":"static inline void LoadIntoDictionary ( this LogSettings settings , SortedDictionary < string , ILogger > dictionary ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function LoadIntoDictionary"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1NetworkHeadlessLogger/","text":"Mirror::Logging::NetworkHeadlessLogger Used to replace log hanlder with Console Color LogHandler Inherits from MonoBehaviour Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Logging::NetworkHeadlessLogger"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1NetworkHeadlessLogger/#mirrorloggingnetworkheadlesslogger","text":"Used to replace log hanlder with Console Color LogHandler Inherits from MonoBehaviour Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Logging::NetworkHeadlessLogger"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1NetworkLogSettings/","text":"Mirror::Logging::NetworkLogSettings Used to load LogSettings in build Inherits from MonoBehaviour Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Logging::NetworkLogSettings"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Logging_1_1NetworkLogSettings/#mirrorloggingnetworklogsettings","text":"Used to load LogSettings in build Inherits from MonoBehaviour Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Logging::NetworkLogSettings"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MessageBase/","text":"Mirror::MessageBase Inherits from IMessageBase Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::MessageBase"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MessageBase/#mirrormessagebase","text":"Inherits from IMessageBase Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::MessageBase"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MessagePacker/","text":"Mirror::MessagePacker Public Functions Name int GetId< T > () void Pack< T > (T message, NetworkWriter writer) bool Unpack ( NetworkReader messageReader, out int msgType) bool UnpackMessage ( NetworkReader messageReader, out int msgType) Public Functions Documentation function GetId< T > static inline int GetId < T > () function Pack< T > static inline void Pack < T > ( T message , NetworkWriter writer ) function Unpack static inline bool Unpack ( NetworkReader messageReader , out int msgType ) function UnpackMessage static bool UnpackMessage ( NetworkReader messageReader , out int msgType ) Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::MessagePacker"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MessagePacker/#mirrormessagepacker","text":"","title":"Mirror::MessagePacker"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MessagePacker/#public-functions","text":"Name int GetId< T > () void Pack< T > (T message, NetworkWriter writer) bool Unpack ( NetworkReader messageReader, out int msgType) bool UnpackMessage ( NetworkReader messageReader, out int msgType)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MessagePacker/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MessagePacker/#function-getid-t","text":"static inline int GetId < T > ()","title":"function GetId&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MessagePacker/#function-pack-t","text":"static inline void Pack < T > ( T message , NetworkWriter writer )","title":"function Pack&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MessagePacker/#function-unpack","text":"static inline bool Unpack ( NetworkReader messageReader , out int msgType )","title":"function Unpack"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MessagePacker/#function-unpackmessage","text":"static bool UnpackMessage ( NetworkReader messageReader , out int msgType ) Updated on 29 January 2021 at 18:34:47 UTC","title":"function UnpackMessage"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/","text":"Mirror::MiddlewareTransport Allows Middleware to override some of the transport methods or let the inner transport handle them. Inherits from Transport , MonoBehaviour Public Functions Name virtual override bool Available () Is this transport available in the current platform? virtual override int GetMaxPacketSize (int channelId =0) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. virtual override void Shutdown () Shut down the transport, both as client and server virtual override void ClientConnect (string address) Establish a connection to a server virtual override bool ClientConnected () Determines if we are currently connected to the server virtual override void ClientDisconnect () Disconnect this client from the server virtual override void ClientSend (int channelId, ArraySegment< byte > segment) Send data to the server virtual override bool ServerActive () Determines if the server is up and running virtual override void ServerStart () Start listening for clients virtual override void ServerStop () Stop listening for clients and disconnect all existing clients virtual override void ServerSend (int connectionId, int channelId, ArraySegment< byte > segment) Send data to a client. virtual override bool ServerDisconnect (int connectionId) Disconnect a client from this server. Useful to kick people out. virtual override string ServerGetClientAddress (int connectionId) Get the client address virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery Public Attributes Name Transport inner Transport to call to after middleware Additional inherited members Public Functions inherited from Transport Name void Update () virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor Public Attributes inherited from Transport Name Transport activeTransport The current transport used by Mirror . Action OnClientConnected Notify subscribers when when this client establish a successful connection to the server Action< ArraySegment< byte >, int > OnClientDataReceived Notify subscribers when this client receive data from the server Action< Exception > OnClientError Notify subscribers when this client encounters an error communicating with the server Action OnClientDisconnected Notify subscribers when this client disconnects from the server Action< int > OnServerConnected Notify subscribers when a client connects to this server Action< int, ArraySegment< byte >, int > OnServerDataReceived Notify subscribers when this server receives data from the client Action< int, Exception > OnServerError Notify subscribers when this server has some problem communicating with the client Action< int > OnServerDisconnected Notify subscribers when a client disconnects from this server Public Functions Documentation function Available virtual override bool Available () Is this transport available in the current platform? Return : True if this transport works in the current platform Reimplements : Mirror::Transport::Available Some transports might only be available in mobile Many will not work in webgl Example usage: return Application.platform == RuntimePlatform.WebGLPlayer function GetMaxPacketSize virtual override int GetMaxPacketSize ( int channelId = 0 ) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. Parameters : channelId channel id Return : the size in bytes that can be sent via the provided channel Reimplements : Mirror::Transport::GetMaxPacketSize GetMaxPacketSize needs to return a value at all times. Even if the Transport isn't running, or isn't Available() . This is because Fallback and Multiplex transports need to find the smallest possible packet size at runtime. function Shutdown virtual override void Shutdown () Shut down the transport, both as client and server Reimplements : Mirror::Transport::Shutdown function ClientConnect inline virtual override void ClientConnect ( string address ) Establish a connection to a server Parameters : address The IP address or FQDN of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect function ClientConnected virtual override bool ClientConnected () Determines if we are currently connected to the server Return : True if a connection has been established to the server Reimplements : Mirror::Transport::ClientConnected function ClientDisconnect virtual override void ClientDisconnect () Disconnect this client from the server Reimplements : Mirror::Transport::ClientDisconnect function ClientSend virtual override void ClientSend ( int channelId , ArraySegment < byte > segment ) Send data to the server Parameters : channelId The channel to use. 0 is the default channel, but some transports might want to provide unreliable, encrypted, compressed, or any other feature as new channels segment The data to send to the server. Will be recycled after returning, so either use it directly or copy it internally. This allows for allocation-free sends! Reimplements : Mirror::Transport::ClientSend function ServerActive virtual override bool ServerActive () Determines if the server is up and running Return : true if the transport is ready for connections from clients Reimplements : Mirror::Transport::ServerActive function ServerStart inline virtual override void ServerStart () Start listening for clients Reimplements : Mirror::Transport::ServerStart function ServerStop virtual override void ServerStop () Stop listening for clients and disconnect all existing clients Reimplements : Mirror::Transport::ServerStop function ServerSend virtual override void ServerSend ( int connectionId , int channelId , ArraySegment < byte > segment ) Send data to a client. Parameters : connectionId The client connection id to send the data to channelId The channel to be used. Transports can use channels to implement other features such as unreliable, encryption, compression, etc... data Reimplements : Mirror::Transport::ServerSend function ServerDisconnect virtual override bool ServerDisconnect ( int connectionId ) Disconnect a client from this server. Useful to kick people out. Parameters : connectionId the id of the client to disconnect Return : true if the client was kicked Reimplements : Mirror::Transport::ServerDisconnect function ServerGetClientAddress virtual override string ServerGetClientAddress ( int connectionId ) Get the client address Parameters : connectionId id of the client Return : address of the client Reimplements : Mirror::Transport::ServerGetClientAddress function ServerUri virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery Return : the url at which this server can be reached Reimplements : Mirror::Transport::ServerUri Public Attributes Documentation variable inner Transport inner ; Transport to call to after middleware Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::MiddlewareTransport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#mirrormiddlewaretransport","text":"Allows Middleware to override some of the transport methods or let the inner transport handle them. Inherits from Transport , MonoBehaviour","title":"Mirror::MiddlewareTransport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#public-functions","text":"Name virtual override bool Available () Is this transport available in the current platform? virtual override int GetMaxPacketSize (int channelId =0) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. virtual override void Shutdown () Shut down the transport, both as client and server virtual override void ClientConnect (string address) Establish a connection to a server virtual override bool ClientConnected () Determines if we are currently connected to the server virtual override void ClientDisconnect () Disconnect this client from the server virtual override void ClientSend (int channelId, ArraySegment< byte > segment) Send data to the server virtual override bool ServerActive () Determines if the server is up and running virtual override void ServerStart () Start listening for clients virtual override void ServerStop () Stop listening for clients and disconnect all existing clients virtual override void ServerSend (int connectionId, int channelId, ArraySegment< byte > segment) Send data to a client. virtual override bool ServerDisconnect (int connectionId) Disconnect a client from this server. Useful to kick people out. virtual override string ServerGetClientAddress (int connectionId) Get the client address virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#public-attributes","text":"Name Transport inner Transport to call to after middleware","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#additional-inherited-members","text":"Public Functions inherited from Transport Name void Update () virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor Public Attributes inherited from Transport Name Transport activeTransport The current transport used by Mirror . Action OnClientConnected Notify subscribers when when this client establish a successful connection to the server Action< ArraySegment< byte >, int > OnClientDataReceived Notify subscribers when this client receive data from the server Action< Exception > OnClientError Notify subscribers when this client encounters an error communicating with the server Action OnClientDisconnected Notify subscribers when this client disconnects from the server Action< int > OnServerConnected Notify subscribers when a client connects to this server Action< int, ArraySegment< byte >, int > OnServerDataReceived Notify subscribers when this server receives data from the client Action< int, Exception > OnServerError Notify subscribers when this server has some problem communicating with the client Action< int > OnServerDisconnected Notify subscribers when a client disconnects from this server","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#function-available","text":"virtual override bool Available () Is this transport available in the current platform? Return : True if this transport works in the current platform Reimplements : Mirror::Transport::Available Some transports might only be available in mobile Many will not work in webgl Example usage: return Application.platform == RuntimePlatform.WebGLPlayer","title":"function Available"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#function-getmaxpacketsize","text":"virtual override int GetMaxPacketSize ( int channelId = 0 ) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. Parameters : channelId channel id Return : the size in bytes that can be sent via the provided channel Reimplements : Mirror::Transport::GetMaxPacketSize GetMaxPacketSize needs to return a value at all times. Even if the Transport isn't running, or isn't Available() . This is because Fallback and Multiplex transports need to find the smallest possible packet size at runtime.","title":"function GetMaxPacketSize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#function-shutdown","text":"virtual override void Shutdown () Shut down the transport, both as client and server Reimplements : Mirror::Transport::Shutdown","title":"function Shutdown"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#function-clientconnect","text":"inline virtual override void ClientConnect ( string address ) Establish a connection to a server Parameters : address The IP address or FQDN of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect","title":"function ClientConnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#function-clientconnected","text":"virtual override bool ClientConnected () Determines if we are currently connected to the server Return : True if a connection has been established to the server Reimplements : Mirror::Transport::ClientConnected","title":"function ClientConnected"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#function-clientdisconnect","text":"virtual override void ClientDisconnect () Disconnect this client from the server Reimplements : Mirror::Transport::ClientDisconnect","title":"function ClientDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#function-clientsend","text":"virtual override void ClientSend ( int channelId , ArraySegment < byte > segment ) Send data to the server Parameters : channelId The channel to use. 0 is the default channel, but some transports might want to provide unreliable, encrypted, compressed, or any other feature as new channels segment The data to send to the server. Will be recycled after returning, so either use it directly or copy it internally. This allows for allocation-free sends! Reimplements : Mirror::Transport::ClientSend","title":"function ClientSend"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#function-serveractive","text":"virtual override bool ServerActive () Determines if the server is up and running Return : true if the transport is ready for connections from clients Reimplements : Mirror::Transport::ServerActive","title":"function ServerActive"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#function-serverstart","text":"inline virtual override void ServerStart () Start listening for clients Reimplements : Mirror::Transport::ServerStart","title":"function ServerStart"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#function-serverstop","text":"virtual override void ServerStop () Stop listening for clients and disconnect all existing clients Reimplements : Mirror::Transport::ServerStop","title":"function ServerStop"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#function-serversend","text":"virtual override void ServerSend ( int connectionId , int channelId , ArraySegment < byte > segment ) Send data to a client. Parameters : connectionId The client connection id to send the data to channelId The channel to be used. Transports can use channels to implement other features such as unreliable, encryption, compression, etc... data Reimplements : Mirror::Transport::ServerSend","title":"function ServerSend"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#function-serverdisconnect","text":"virtual override bool ServerDisconnect ( int connectionId ) Disconnect a client from this server. Useful to kick people out. Parameters : connectionId the id of the client to disconnect Return : true if the client was kicked Reimplements : Mirror::Transport::ServerDisconnect","title":"function ServerDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#function-servergetclientaddress","text":"virtual override string ServerGetClientAddress ( int connectionId ) Get the client address Parameters : connectionId id of the client Return : address of the client Reimplements : Mirror::Transport::ServerGetClientAddress","title":"function ServerGetClientAddress"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#function-serveruri","text":"virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery Return : the url at which this server can be reached Reimplements : Mirror::Transport::ServerUri","title":"function ServerUri"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MiddlewareTransport/#variable-inner","text":"Transport inner ; Transport to call to after middleware Updated on 29 January 2021 at 18:34:47 UTC","title":"variable inner"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/","text":"Mirror::MultiplexTransport Inherits from Transport , MonoBehaviour Public Functions Name void Awake () virtual override bool Available () Is this transport available in the current platform? virtual override void ClientConnect (string address) Establish a connection to a server virtual override void ClientConnect (Uri uri) Establish a connection to a server virtual override bool ClientConnected () Determines if we are currently connected to the server virtual override void ClientDisconnect () Disconnect this client from the server virtual override void ClientSend (int channelId, ArraySegment< byte > segment) Send data to the server virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery virtual override bool ServerActive () Determines if the server is up and running virtual override string ServerGetClientAddress (int connectionId) Get the client address virtual override bool ServerDisconnect (int connectionId) Disconnect a client from this server. Useful to kick people out. virtual override void ServerSend (int connectionId, int channelId, ArraySegment< byte > segment) Send data to a client. virtual override void ServerStart () Start listening for clients virtual override void ServerStop () Stop listening for clients and disconnect all existing clients virtual override int GetMaxPacketSize (int channelId =0) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. virtual override void Shutdown () Shut down the transport, both as client and server override string ToString () Public Attributes Name Transport [] transports Additional inherited members Public Functions inherited from Transport Name void Update () virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor Public Attributes inherited from Transport Name Transport activeTransport The current transport used by Mirror . Action OnClientConnected Notify subscribers when when this client establish a successful connection to the server Action< ArraySegment< byte >, int > OnClientDataReceived Notify subscribers when this client receive data from the server Action< Exception > OnClientError Notify subscribers when this client encounters an error communicating with the server Action OnClientDisconnected Notify subscribers when this client disconnects from the server Action< int > OnServerConnected Notify subscribers when a client connects to this server Action< int, ArraySegment< byte >, int > OnServerDataReceived Notify subscribers when this server receives data from the client Action< int, Exception > OnServerError Notify subscribers when this server has some problem communicating with the client Action< int > OnServerDisconnected Notify subscribers when a client disconnects from this server Public Functions Documentation function Awake inline void Awake () function Available inline virtual override bool Available () Is this transport available in the current platform? Return : True if this transport works in the current platform Reimplements : Mirror::Transport::Available Some transports might only be available in mobile Many will not work in webgl Example usage: return Application.platform == RuntimePlatform.WebGLPlayer function ClientConnect inline virtual override void ClientConnect ( string address ) Establish a connection to a server Parameters : address The IP address or FQDN of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect function ClientConnect inline virtual override void ClientConnect ( Uri uri ) Establish a connection to a server Parameters : uri The address of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect function ClientConnected inline virtual override bool ClientConnected () Determines if we are currently connected to the server Return : True if a connection has been established to the server Reimplements : Mirror::Transport::ClientConnected function ClientDisconnect inline virtual override void ClientDisconnect () Disconnect this client from the server Reimplements : Mirror::Transport::ClientDisconnect function ClientSend inline virtual override void ClientSend ( int channelId , ArraySegment < byte > segment ) Send data to the server Parameters : channelId The channel to use. 0 is the default channel, but some transports might want to provide unreliable, encrypted, compressed, or any other feature as new channels segment The data to send to the server. Will be recycled after returning, so either use it directly or copy it internally. This allows for allocation-free sends! Reimplements : Mirror::Transport::ClientSend function ServerUri inline virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery Return : the url at which this server can be reached Reimplements : Mirror::Transport::ServerUri function ServerActive inline virtual override bool ServerActive () Determines if the server is up and running Return : true if the transport is ready for connections from clients Reimplements : Mirror::Transport::ServerActive function ServerGetClientAddress inline virtual override string ServerGetClientAddress ( int connectionId ) Get the client address Parameters : connectionId id of the client Return : address of the client Reimplements : Mirror::Transport::ServerGetClientAddress function ServerDisconnect inline virtual override bool ServerDisconnect ( int connectionId ) Disconnect a client from this server. Useful to kick people out. Parameters : connectionId the id of the client to disconnect Return : true if the client was kicked Reimplements : Mirror::Transport::ServerDisconnect function ServerSend inline virtual override void ServerSend ( int connectionId , int channelId , ArraySegment < byte > segment ) Send data to a client. Parameters : connectionId The client connection id to send the data to channelId The channel to be used. Transports can use channels to implement other features such as unreliable, encryption, compression, etc... data Reimplements : Mirror::Transport::ServerSend function ServerStart inline virtual override void ServerStart () Start listening for clients Reimplements : Mirror::Transport::ServerStart function ServerStop inline virtual override void ServerStop () Stop listening for clients and disconnect all existing clients Reimplements : Mirror::Transport::ServerStop function GetMaxPacketSize inline virtual override int GetMaxPacketSize ( int channelId = 0 ) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. Parameters : channelId channel id Return : the size in bytes that can be sent via the provided channel Reimplements : Mirror::Transport::GetMaxPacketSize GetMaxPacketSize needs to return a value at all times. Even if the Transport isn't running, or isn't Available() . This is because Fallback and Multiplex transports need to find the smallest possible packet size at runtime. function Shutdown inline virtual override void Shutdown () Shut down the transport, both as client and server Reimplements : Mirror::Transport::Shutdown function ToString inline override string ToString () Public Attributes Documentation variable transports Transport [] transports ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::MultiplexTransport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#mirrormultiplextransport","text":"Inherits from Transport , MonoBehaviour","title":"Mirror::MultiplexTransport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#public-functions","text":"Name void Awake () virtual override bool Available () Is this transport available in the current platform? virtual override void ClientConnect (string address) Establish a connection to a server virtual override void ClientConnect (Uri uri) Establish a connection to a server virtual override bool ClientConnected () Determines if we are currently connected to the server virtual override void ClientDisconnect () Disconnect this client from the server virtual override void ClientSend (int channelId, ArraySegment< byte > segment) Send data to the server virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery virtual override bool ServerActive () Determines if the server is up and running virtual override string ServerGetClientAddress (int connectionId) Get the client address virtual override bool ServerDisconnect (int connectionId) Disconnect a client from this server. Useful to kick people out. virtual override void ServerSend (int connectionId, int channelId, ArraySegment< byte > segment) Send data to a client. virtual override void ServerStart () Start listening for clients virtual override void ServerStop () Stop listening for clients and disconnect all existing clients virtual override int GetMaxPacketSize (int channelId =0) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. virtual override void Shutdown () Shut down the transport, both as client and server override string ToString ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#public-attributes","text":"Name Transport [] transports","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#additional-inherited-members","text":"Public Functions inherited from Transport Name void Update () virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor Public Attributes inherited from Transport Name Transport activeTransport The current transport used by Mirror . Action OnClientConnected Notify subscribers when when this client establish a successful connection to the server Action< ArraySegment< byte >, int > OnClientDataReceived Notify subscribers when this client receive data from the server Action< Exception > OnClientError Notify subscribers when this client encounters an error communicating with the server Action OnClientDisconnected Notify subscribers when this client disconnects from the server Action< int > OnServerConnected Notify subscribers when a client connects to this server Action< int, ArraySegment< byte >, int > OnServerDataReceived Notify subscribers when this server receives data from the client Action< int, Exception > OnServerError Notify subscribers when this server has some problem communicating with the client Action< int > OnServerDisconnected Notify subscribers when a client disconnects from this server","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#function-awake","text":"inline void Awake ()","title":"function Awake"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#function-available","text":"inline virtual override bool Available () Is this transport available in the current platform? Return : True if this transport works in the current platform Reimplements : Mirror::Transport::Available Some transports might only be available in mobile Many will not work in webgl Example usage: return Application.platform == RuntimePlatform.WebGLPlayer","title":"function Available"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#function-clientconnect","text":"inline virtual override void ClientConnect ( string address ) Establish a connection to a server Parameters : address The IP address or FQDN of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect","title":"function ClientConnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#function-clientconnect_1","text":"inline virtual override void ClientConnect ( Uri uri ) Establish a connection to a server Parameters : uri The address of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect","title":"function ClientConnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#function-clientconnected","text":"inline virtual override bool ClientConnected () Determines if we are currently connected to the server Return : True if a connection has been established to the server Reimplements : Mirror::Transport::ClientConnected","title":"function ClientConnected"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#function-clientdisconnect","text":"inline virtual override void ClientDisconnect () Disconnect this client from the server Reimplements : Mirror::Transport::ClientDisconnect","title":"function ClientDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#function-clientsend","text":"inline virtual override void ClientSend ( int channelId , ArraySegment < byte > segment ) Send data to the server Parameters : channelId The channel to use. 0 is the default channel, but some transports might want to provide unreliable, encrypted, compressed, or any other feature as new channels segment The data to send to the server. Will be recycled after returning, so either use it directly or copy it internally. This allows for allocation-free sends! Reimplements : Mirror::Transport::ClientSend","title":"function ClientSend"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#function-serveruri","text":"inline virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery Return : the url at which this server can be reached Reimplements : Mirror::Transport::ServerUri","title":"function ServerUri"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#function-serveractive","text":"inline virtual override bool ServerActive () Determines if the server is up and running Return : true if the transport is ready for connections from clients Reimplements : Mirror::Transport::ServerActive","title":"function ServerActive"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#function-servergetclientaddress","text":"inline virtual override string ServerGetClientAddress ( int connectionId ) Get the client address Parameters : connectionId id of the client Return : address of the client Reimplements : Mirror::Transport::ServerGetClientAddress","title":"function ServerGetClientAddress"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#function-serverdisconnect","text":"inline virtual override bool ServerDisconnect ( int connectionId ) Disconnect a client from this server. Useful to kick people out. Parameters : connectionId the id of the client to disconnect Return : true if the client was kicked Reimplements : Mirror::Transport::ServerDisconnect","title":"function ServerDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#function-serversend","text":"inline virtual override void ServerSend ( int connectionId , int channelId , ArraySegment < byte > segment ) Send data to a client. Parameters : connectionId The client connection id to send the data to channelId The channel to be used. Transports can use channels to implement other features such as unreliable, encryption, compression, etc... data Reimplements : Mirror::Transport::ServerSend","title":"function ServerSend"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#function-serverstart","text":"inline virtual override void ServerStart () Start listening for clients Reimplements : Mirror::Transport::ServerStart","title":"function ServerStart"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#function-serverstop","text":"inline virtual override void ServerStop () Stop listening for clients and disconnect all existing clients Reimplements : Mirror::Transport::ServerStop","title":"function ServerStop"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#function-getmaxpacketsize","text":"inline virtual override int GetMaxPacketSize ( int channelId = 0 ) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. Parameters : channelId channel id Return : the size in bytes that can be sent via the provided channel Reimplements : Mirror::Transport::GetMaxPacketSize GetMaxPacketSize needs to return a value at all times. Even if the Transport isn't running, or isn't Available() . This is because Fallback and Multiplex transports need to find the smallest possible packet size at runtime.","title":"function GetMaxPacketSize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#function-shutdown","text":"inline virtual override void Shutdown () Shut down the transport, both as client and server Reimplements : Mirror::Transport::Shutdown","title":"function Shutdown"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#function-tostring","text":"inline override string ToString ()","title":"function ToString"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1MultiplexTransport/#variable-transports","text":"Transport [] transports ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable transports"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAnimator/","text":"Mirror::NetworkAnimator A component to synchronize Mecanim animation states for networked objects. More... Inherits from NetworkBehaviour , MonoBehaviour Public Functions Name virtual override bool OnSerialize ( NetworkWriter writer, bool initialState) Custom Serialization virtual override void OnDeserialize ( NetworkReader reader, bool initialState) Custom Deserialization void SetTrigger (string triggerName) Causes an animation trigger to be invoked for a networked object. void SetTrigger (int hash) Causes an animation trigger to be invoked for a networked object. void ResetTrigger (string triggerName) Causes an animation trigger to be reset for a networked object. void ResetTrigger (int hash) Causes an animation trigger to be reset for a networked object. Public Attributes Name bool clientAuthority Animator animator The animator component to synchronize. Additional inherited members Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Detailed Description class Mirror :: NetworkAnimator ; A component to synchronize Mecanim animation states for networked objects. The animation of game objects can be networked by this component. There are two models of authority for networked movement: If the object has authority on the client, then it should be animated locally on the owning client. The animation state information will be sent from the owning client to the server, then broadcast to all of the other clients. This is common for player objects. If the object has authority on the server, then it should be animated on the server and state information will be sent to all clients. This is common for objects not related to a specific client, such as an enemy unit. The NetworkAnimator synchronizes all animation parameters of the selected Animator. It does not automatically sychronize triggers. The function SetTrigger can by used by an object with authority to fire an animation trigger on other clients. Public Functions Documentation function OnSerialize inline virtual override bool OnSerialize ( NetworkWriter writer , bool initialState ) Custom Serialization Parameters : writer initialState Return : Reimplements : Mirror::NetworkBehaviour::OnSerialize function OnDeserialize inline virtual override void OnDeserialize ( NetworkReader reader , bool initialState ) Custom Deserialization Parameters : reader initialState Reimplements : Mirror::NetworkBehaviour::OnDeserialize function SetTrigger inline void SetTrigger ( string triggerName ) Causes an animation trigger to be invoked for a networked object. Parameters : triggerName Name of trigger. If local authority is set, and this is called from the client, then the trigger will be invoked on the server and all clients. If not, then this is called on the server, and the trigger will be called on all clients. function SetTrigger inline void SetTrigger ( int hash ) Causes an animation trigger to be invoked for a networked object. Parameters : hash Hash id of trigger (from the Animator). function ResetTrigger inline void ResetTrigger ( string triggerName ) Causes an animation trigger to be reset for a networked object. Parameters : triggerName Name of trigger. If local authority is set, and this is called from the client, then the trigger will be reset on the server and all clients. If not, then this is called on the server, and the trigger will be reset on all clients. function ResetTrigger inline void ResetTrigger ( int hash ) Causes an animation trigger to be reset for a networked object. Parameters : hash Hash id of trigger (from the Animator). Public Attributes Documentation variable clientAuthority bool clientAuthority ; variable animator Animator animator ; The animator component to synchronize. Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkAnimator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAnimator/#mirrornetworkanimator","text":"A component to synchronize Mecanim animation states for networked objects. More... Inherits from NetworkBehaviour , MonoBehaviour","title":"Mirror::NetworkAnimator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAnimator/#public-functions","text":"Name virtual override bool OnSerialize ( NetworkWriter writer, bool initialState) Custom Serialization virtual override void OnDeserialize ( NetworkReader reader, bool initialState) Custom Deserialization void SetTrigger (string triggerName) Causes an animation trigger to be invoked for a networked object. void SetTrigger (int hash) Causes an animation trigger to be invoked for a networked object. void ResetTrigger (string triggerName) Causes an animation trigger to be reset for a networked object. void ResetTrigger (int hash) Causes an animation trigger to be reset for a networked object.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAnimator/#public-attributes","text":"Name bool clientAuthority Animator animator The animator component to synchronize.","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAnimator/#additional-inherited-members","text":"Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAnimator/#detailed-description","text":"class Mirror :: NetworkAnimator ; A component to synchronize Mecanim animation states for networked objects. The animation of game objects can be networked by this component. There are two models of authority for networked movement: If the object has authority on the client, then it should be animated locally on the owning client. The animation state information will be sent from the owning client to the server, then broadcast to all of the other clients. This is common for player objects. If the object has authority on the server, then it should be animated on the server and state information will be sent to all clients. This is common for objects not related to a specific client, such as an enemy unit. The NetworkAnimator synchronizes all animation parameters of the selected Animator. It does not automatically sychronize triggers. The function SetTrigger can by used by an object with authority to fire an animation trigger on other clients.","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAnimator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAnimator/#function-onserialize","text":"inline virtual override bool OnSerialize ( NetworkWriter writer , bool initialState ) Custom Serialization Parameters : writer initialState Return : Reimplements : Mirror::NetworkBehaviour::OnSerialize","title":"function OnSerialize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAnimator/#function-ondeserialize","text":"inline virtual override void OnDeserialize ( NetworkReader reader , bool initialState ) Custom Deserialization Parameters : reader initialState Reimplements : Mirror::NetworkBehaviour::OnDeserialize","title":"function OnDeserialize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAnimator/#function-settrigger","text":"inline void SetTrigger ( string triggerName ) Causes an animation trigger to be invoked for a networked object. Parameters : triggerName Name of trigger. If local authority is set, and this is called from the client, then the trigger will be invoked on the server and all clients. If not, then this is called on the server, and the trigger will be called on all clients.","title":"function SetTrigger"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAnimator/#function-settrigger_1","text":"inline void SetTrigger ( int hash ) Causes an animation trigger to be invoked for a networked object. Parameters : hash Hash id of trigger (from the Animator).","title":"function SetTrigger"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAnimator/#function-resettrigger","text":"inline void ResetTrigger ( string triggerName ) Causes an animation trigger to be reset for a networked object. Parameters : triggerName Name of trigger. If local authority is set, and this is called from the client, then the trigger will be reset on the server and all clients. If not, then this is called on the server, and the trigger will be reset on all clients.","title":"function ResetTrigger"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAnimator/#function-resettrigger_1","text":"inline void ResetTrigger ( int hash ) Causes an animation trigger to be reset for a networked object. Parameters : hash Hash id of trigger (from the Animator).","title":"function ResetTrigger"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAnimator/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAnimator/#variable-clientauthority","text":"bool clientAuthority ;","title":"variable clientAuthority"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAnimator/#variable-animator","text":"Animator animator ; The animator component to synchronize. Updated on 29 January 2021 at 18:34:47 UTC","title":"variable animator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAuthenticator/","text":"Mirror::NetworkAuthenticator Base class for implementing component-based authentication during the Connect phase Inherits from MonoBehaviour Inherited by BasicAuthenticator , TimeoutAuthenticator Public Functions Name virtual void OnStartServer () Called on server from StartServer to initialize the Authenticator virtual void OnStopServer () Called on server from StopServer to reset the Authenticator virtual abstract void OnServerAuthenticate ( NetworkConnection conn) =0 Called on server from OnServerAuthenticateInternal when a client needs to authenticate virtual void OnStartClient () Called on client from StartClient to initialize the Authenticator virtual void OnStopClient () Called on client from StopClient to reset the Authenticator virtual abstract void OnClientAuthenticate ( NetworkConnection conn) =0 Called on client from OnClientAuthenticateInternal when a client needs to authenticate Protected Functions Name void ServerAccept ( NetworkConnection conn) void ServerReject ( NetworkConnection conn) void ClientAccept ( NetworkConnection conn) void ClientReject ( NetworkConnection conn) Public Attributes Name UnityEventNetworkConnection OnServerAuthenticated Notify subscribers on the server when a client is authenticated UnityEventNetworkConnection OnClientAuthenticated Notify subscribers on the client when the client is authenticated Public Functions Documentation function OnStartServer inline virtual void OnStartServer () Called on server from StartServer to initialize the Authenticator Reimplemented by : Mirror::Authenticators::TimeoutAuthenticator::OnStartServer , Mirror::Authenticators::BasicAuthenticator::OnStartServer Server message handlers should be registered in this method. function OnStopServer inline virtual void OnStopServer () Called on server from StopServer to reset the Authenticator Reimplemented by : Mirror::Authenticators::TimeoutAuthenticator::OnStopServer , Mirror::Authenticators::BasicAuthenticator::OnStopServer Server message handlers should be unregistered in this method. function OnServerAuthenticate virtual abstract void OnServerAuthenticate ( NetworkConnection conn ) = 0 Called on server from OnServerAuthenticateInternal when a client needs to authenticate Parameters : conn Connection to client. Reimplemented by : Mirror::Authenticators::TimeoutAuthenticator::OnServerAuthenticate , Mirror::Authenticators::BasicAuthenticator::OnServerAuthenticate function OnStartClient inline virtual void OnStartClient () Called on client from StartClient to initialize the Authenticator Reimplemented by : Mirror::Authenticators::TimeoutAuthenticator::OnStartClient , Mirror::Authenticators::BasicAuthenticator::OnStartClient Client message handlers should be registered in this method. function OnStopClient inline virtual void OnStopClient () Called on client from StopClient to reset the Authenticator Reimplemented by : Mirror::Authenticators::TimeoutAuthenticator::OnStopClient , Mirror::Authenticators::BasicAuthenticator::OnStopClient Client message handlers should be unregistered in this method. function OnClientAuthenticate virtual abstract void OnClientAuthenticate ( NetworkConnection conn ) = 0 Called on client from OnClientAuthenticateInternal when a client needs to authenticate Parameters : conn Connection of the client. Reimplemented by : Mirror::Authenticators::TimeoutAuthenticator::OnClientAuthenticate , Mirror::Authenticators::BasicAuthenticator::OnClientAuthenticate Protected Functions Documentation function ServerAccept inline void ServerAccept ( NetworkConnection conn ) function ServerReject inline void ServerReject ( NetworkConnection conn ) function ClientAccept inline void ClientAccept ( NetworkConnection conn ) function ClientReject inline void ClientReject ( NetworkConnection conn ) Public Attributes Documentation variable OnServerAuthenticated UnityEventNetworkConnection OnServerAuthenticated = new [ UnityEventNetworkConnection ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1UnityEventNetworkConnection / )(); Notify subscribers on the server when a client is authenticated variable OnClientAuthenticated UnityEventNetworkConnection OnClientAuthenticated = new [ UnityEventNetworkConnection ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1UnityEventNetworkConnection / )(); Notify subscribers on the client when the client is authenticated Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkAuthenticator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAuthenticator/#mirrornetworkauthenticator","text":"Base class for implementing component-based authentication during the Connect phase Inherits from MonoBehaviour Inherited by BasicAuthenticator , TimeoutAuthenticator","title":"Mirror::NetworkAuthenticator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAuthenticator/#public-functions","text":"Name virtual void OnStartServer () Called on server from StartServer to initialize the Authenticator virtual void OnStopServer () Called on server from StopServer to reset the Authenticator virtual abstract void OnServerAuthenticate ( NetworkConnection conn) =0 Called on server from OnServerAuthenticateInternal when a client needs to authenticate virtual void OnStartClient () Called on client from StartClient to initialize the Authenticator virtual void OnStopClient () Called on client from StopClient to reset the Authenticator virtual abstract void OnClientAuthenticate ( NetworkConnection conn) =0 Called on client from OnClientAuthenticateInternal when a client needs to authenticate","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAuthenticator/#protected-functions","text":"Name void ServerAccept ( NetworkConnection conn) void ServerReject ( NetworkConnection conn) void ClientAccept ( NetworkConnection conn) void ClientReject ( NetworkConnection conn)","title":"Protected Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAuthenticator/#public-attributes","text":"Name UnityEventNetworkConnection OnServerAuthenticated Notify subscribers on the server when a client is authenticated UnityEventNetworkConnection OnClientAuthenticated Notify subscribers on the client when the client is authenticated","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAuthenticator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAuthenticator/#function-onstartserver","text":"inline virtual void OnStartServer () Called on server from StartServer to initialize the Authenticator Reimplemented by : Mirror::Authenticators::TimeoutAuthenticator::OnStartServer , Mirror::Authenticators::BasicAuthenticator::OnStartServer Server message handlers should be registered in this method.","title":"function OnStartServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAuthenticator/#function-onstopserver","text":"inline virtual void OnStopServer () Called on server from StopServer to reset the Authenticator Reimplemented by : Mirror::Authenticators::TimeoutAuthenticator::OnStopServer , Mirror::Authenticators::BasicAuthenticator::OnStopServer Server message handlers should be unregistered in this method.","title":"function OnStopServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAuthenticator/#function-onserverauthenticate","text":"virtual abstract void OnServerAuthenticate ( NetworkConnection conn ) = 0 Called on server from OnServerAuthenticateInternal when a client needs to authenticate Parameters : conn Connection to client. Reimplemented by : Mirror::Authenticators::TimeoutAuthenticator::OnServerAuthenticate , Mirror::Authenticators::BasicAuthenticator::OnServerAuthenticate","title":"function OnServerAuthenticate"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAuthenticator/#function-onstartclient","text":"inline virtual void OnStartClient () Called on client from StartClient to initialize the Authenticator Reimplemented by : Mirror::Authenticators::TimeoutAuthenticator::OnStartClient , Mirror::Authenticators::BasicAuthenticator::OnStartClient Client message handlers should be registered in this method.","title":"function OnStartClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAuthenticator/#function-onstopclient","text":"inline virtual void OnStopClient () Called on client from StopClient to reset the Authenticator Reimplemented by : Mirror::Authenticators::TimeoutAuthenticator::OnStopClient , Mirror::Authenticators::BasicAuthenticator::OnStopClient Client message handlers should be unregistered in this method.","title":"function OnStopClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAuthenticator/#function-onclientauthenticate","text":"virtual abstract void OnClientAuthenticate ( NetworkConnection conn ) = 0 Called on client from OnClientAuthenticateInternal when a client needs to authenticate Parameters : conn Connection of the client. Reimplemented by : Mirror::Authenticators::TimeoutAuthenticator::OnClientAuthenticate , Mirror::Authenticators::BasicAuthenticator::OnClientAuthenticate","title":"function OnClientAuthenticate"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAuthenticator/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAuthenticator/#function-serveraccept","text":"inline void ServerAccept ( NetworkConnection conn )","title":"function ServerAccept"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAuthenticator/#function-serverreject","text":"inline void ServerReject ( NetworkConnection conn )","title":"function ServerReject"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAuthenticator/#function-clientaccept","text":"inline void ClientAccept ( NetworkConnection conn )","title":"function ClientAccept"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAuthenticator/#function-clientreject","text":"inline void ClientReject ( NetworkConnection conn )","title":"function ClientReject"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAuthenticator/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAuthenticator/#variable-onserverauthenticated","text":"UnityEventNetworkConnection OnServerAuthenticated = new [ UnityEventNetworkConnection ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1UnityEventNetworkConnection / )(); Notify subscribers on the server when a client is authenticated","title":"variable OnServerAuthenticated"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkAuthenticator/#variable-onclientauthenticated","text":"UnityEventNetworkConnection OnClientAuthenticated = new [ UnityEventNetworkConnection ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1UnityEventNetworkConnection / )(); Notify subscribers on the client when the client is authenticated Updated on 29 January 2021 at 18:34:47 UTC","title":"variable OnClientAuthenticated"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/","text":"Mirror::NetworkBehaviour Base class which should be inherited by scripts which contain networking functionality. More... Inherits from MonoBehaviour Inherited by AutoHostClient , CameraController , MatchMaker , MoneyManager , Player , PlayerAttack , PlayerCameraContoller , PlayerHealth , PlayerMovement , TurnManager , NetworkLerpRigidbody , NetworkRigidbody , NetworkRigidbody2D , NetworkTransformBase , NetworkAnimator , NetworkRoomPlayer , NetworkTransformBase , NetworkVisibility Public Classes Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties Name ulong syncVarDirtyBits Public Attributes Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Detailed Description class Mirror :: NetworkBehaviour ; Base class which should be inherited by scripts which contain networking functionality. This is a MonoBehaviour class so scripts which need to use the networking feature should inherit this class instead of MonoBehaviour. It allows you to invoke networked actions, receive various callbacks, and automatically synchronize state from server-to-client. The NetworkBehaviour component requires a NetworkIdentity on the game object. There can be multiple NetworkBehaviours on a single game object. For an object with sub-components in a hierarchy, the NetworkIdentity must be on the root object, and NetworkBehaviour scripts must also be on the root object. Some of the built-in components of the networking system are derived from NetworkBehaviour , including NetworkTransport, NetworkAnimator and NetworkProximityChecker . Public Functions Documentation function SetDirtyBit inline void SetDirtyBit ( ulong dirtyBit ) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 Parameters : dirtyBit Bit mask to set. function ClearAllDirtyBits inline void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); This is automatically invoked when an update is sent for this object, but can be called manually as well. function IsDirty inline bool IsDirty () function OnSerialize inline virtual bool OnSerialize ( NetworkWriter writer , bool initialState ) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . Parameters : writer Writer to use to write to the stream. initialState If this is being called to send initial state. Return : True if data was written. Reimplemented by : Mirror::NetworkTransformBase::OnSerialize , Mirror::NetworkAnimator::OnSerialize The initialState flag is useful to differentiate between the first time an object is serialized and when incremental updates can be sent. The first time an object is sent to a client, it must include a full state snapshot, but subsequent updates can save on bandwidth by including only incremental changes. Note that SyncVar hook functions are not called when initialState is true, only for incremental updates. If a class has SyncVars, then an implementation of this function and OnDeserialize() are added automatically to the class. So a class that has SyncVars cannot also have custom serialization functions. The OnSerialize function should return true to indicate that an update should be sent. If it returns true, then the dirty bits for that script are set to zero, if it returns false then the dirty bits are not changed. This allows multiple changes to a script to be accumulated over time and sent when the system is ready, instead of every frame. function OnDeserialize inline virtual void OnDeserialize ( NetworkReader reader , bool initialState ) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . Parameters : reader Reader to read from the stream. initialState True if being sent initial state. Reimplemented by : Mirror::NetworkTransformBase::OnDeserialize , Mirror::NetworkAnimator::OnDeserialize function SerializeObjectsAll inline bool SerializeObjectsAll ( NetworkWriter writer ) function SerializeObjectsDelta inline bool SerializeObjectsDelta ( NetworkWriter writer ) function OnStartServer inline virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. Reimplemented by : Mirror::NetworkProximityChecker::OnStartServer , Mirror::NetworkSceneChecker::OnStartServer , Mirror::NetworkMatchChecker::OnStartServer This could be triggered by NetworkServer.Listen() for objects in the scene, or by NetworkServer.Spawn() for objects that are dynamically created. This will be called for objects on a \"host\" as well as for object on a dedicated server. function OnStopServer inline virtual void OnStopServer () Invoked on the server when the object is unspawned Reimplemented by : Mirror::NetworkProximityChecker::OnStopServer , Mirror::NetworkSceneChecker::OnStopServer , Me::DerangedSenators::CopsAndRobbers::Player::OnStopServer , Mirror::NetworkMatchChecker::OnStopServer Useful for saving object data in persistant storage function OnStartClient inline virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. Reimplemented by : Me::DerangedSenators::CopsAndRobbers::Player::OnStartClient Objects on the host have this function called, as there is a local client on the host. The values of SyncVars on object are guaranteed to be initialized correctly with the latest state from the server when this function is called on the client. function OnStopClient inline virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. Reimplemented by : Me::DerangedSenators::CopsAndRobbers::Player::OnStopClient This can be used as a hook to invoke effects or do client specific cleanup. function OnStartLocalPlayer inline virtual void OnStartLocalPlayer () Called when the local player object has been set up. Reimplemented by : Me::DerangedSenators::CopsAndRobbers::CameraController::OnStartLocalPlayer This happens after OnStartClient() , as it is triggered by an ownership message from the server. This is an appropriate place to activate components or functionality that should only be active for the local player, such as cameras and input. function OnStartAuthority inline virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . This is called after OnStartServer and before OnStartClient. When AssignClientAuthority is called on the server, this will be called on the client that owns the object. When an object is spawned with [NetworkServer.Spawn] with a NetworkConnection parameter included, this will be called on the client that owns the object. function OnStopAuthority inline virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. When NetworkIdentity.RemoveClientAuthority is called on the server, this will be called on the client that owns the object. Protected Functions Documentation function getSyncVarHookGuard inline bool getSyncVarHookGuard ( ulong dirtyBit ) function setSyncVarHookGuard inline void setSyncVarHookGuard ( ulong dirtyBit , bool value ) function InitSyncObject inline void InitSyncObject ( SyncObject syncObject ) function SendCommandInternal inline void SendCommandInternal ( Type invokeClass , string cmdName , NetworkWriter writer , int channelId , bool ignoreAuthority = false ) function SendRPCInternal inline void SendRPCInternal ( Type invokeClass , string rpcName , NetworkWriter writer , int channelId , bool excludeOwner ) function SendTargetRPCInternal inline void SendTargetRPCInternal ( NetworkConnection conn , Type invokeClass , string rpcName , NetworkWriter writer , int channelId ) function SyncVarGameObjectEqual inline bool SyncVarGameObjectEqual ( GameObject newGameObject , uint netIdField ) function SetSyncVarGameObject inline void SetSyncVarGameObject ( GameObject newGameObject , ref GameObject gameObjectField , ulong dirtyBit , ref uint netIdField ) function GetSyncVarGameObject inline GameObject GetSyncVarGameObject ( uint netId , ref GameObject gameObjectField ) function SyncVarNetworkIdentityEqual inline bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity , uint netIdField ) function SetSyncVarNetworkIdentity inline void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity , ref NetworkIdentity identityField , ulong dirtyBit , ref uint netIdField ) function GetSyncVarNetworkIdentity inline NetworkIdentity GetSyncVarNetworkIdentity ( uint netId , ref NetworkIdentity identityField ) function SyncVarNetworkBehaviourEqual< T > inline bool SyncVarNetworkBehaviourEqual < T > ( T newBehaviour , NetworkBehaviourSyncVar syncField ) function SetSyncVarNetworkBehaviour< T > inline void SetSyncVarNetworkBehaviour < T > ( T newBehaviour , ref T behaviourField , ulong dirtyBit , ref NetworkBehaviourSyncVar syncField ) function GetSyncVarNetworkBehaviour< T > inline T GetSyncVarNetworkBehaviour < T > ( NetworkBehaviourSyncVar syncNetBehaviour , ref T behaviourField ) function SyncVarEqual< T > inline bool SyncVarEqual < T > ( T value , ref T fieldValue ) function SetSyncVar< T > inline void SetSyncVar < T > ( T value , ref T fieldValue , ulong dirtyBit ) function SerializeSyncVars inline virtual bool SerializeSyncVars ( NetworkWriter writer , bool initialState ) function DeserializeSyncVars inline virtual void DeserializeSyncVars ( NetworkReader reader , bool initialState ) Public Property Documentation property netIdentity NetworkIdentity netIdentity ; Returns the NetworkIdentity of this object property ComponentIndex int ComponentIndex ; Returns the index of the component on this object Protected Property Documentation property syncVarDirtyBits ulong syncVarDirtyBits ; Public Attributes Documentation variable syncMode SyncMode syncMode = SyncMode . Observers ; sync mode for OnSerialize variable syncInterval float syncInterval = 0.1f ; sync interval for OnSerialize (in seconds) variable isServer bool isServer => netIdentity . isServer ; Returns true if this object is active on an active server. This is only true if the object has been spawned. This is different from NetworkServer.active, which is true if the server itself is active rather than this object being active. variable isClient bool isClient => netIdentity . isClient ; Returns true if running as a client and this object was spawned by a server. variable isLocalPlayer bool isLocalPlayer => netIdentity . isLocalPlayer ; This returns true if this object is the one that represents the player on the local machine. In multiplayer games, there are multiple instances of the Player object. The client needs to know which one is for \"themselves\" so that only that player processes input and potentially has a camera attached. The IsLocalPlayer function will return true only for the player instance that belongs to the player on the local machine, so it can be used to filter out input for non-local players. variable isServerOnly bool isServerOnly => [ isServer ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1NetworkBehaviour / # variable - isserver ) && ! [ isClient ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1NetworkBehaviour / # variable - isclient ); True if this object only exists on the server variable isClientOnly bool isClientOnly => [ isClient ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1NetworkBehaviour / # variable - isclient ) && ! [ isServer ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1NetworkBehaviour / # variable - isserver ); True if this object exists on a client that is not also acting as a server variable hasAuthority bool hasAuthority => netIdentity . hasAuthority ; This returns true if this object is the authoritative version of the object in the distributed network application. The NetworkIdentity.hasAuthority value on the NetworkIdentity determines how authority is determined. For most objects, authority is held by the server. For objects with NetworkIdentity.hasAuthority set, authority is held by the client of that player. variable netId uint netId => netIdentity . netId ; The unique network Id of this object. This is assigned at runtime by the network server and will be unique for all objects for that network session. variable connectionToServer NetworkConnection connectionToServer => netIdentity . connectionToServer ; The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. variable connectionToClient NetworkConnection connectionToClient => netIdentity . connectionToClient ; The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes Documentation variable syncObjects readonly List < SyncObject > syncObjects = new List < [ SyncObject ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / interfaceMirror_1_1SyncObject / ) > (); objects that can synchronize themselves, such as synclists Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkBehaviour"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#mirrornetworkbehaviour","text":"Base class which should be inherited by scripts which contain networking functionality. More... Inherits from MonoBehaviour Inherited by AutoHostClient , CameraController , MatchMaker , MoneyManager , Player , PlayerAttack , PlayerCameraContoller , PlayerHealth , PlayerMovement , TurnManager , NetworkLerpRigidbody , NetworkRigidbody , NetworkRigidbody2D , NetworkTransformBase , NetworkAnimator , NetworkRoomPlayer , NetworkTransformBase , NetworkVisibility","title":"Mirror::NetworkBehaviour"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#public-classes","text":"Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour","title":"Public Classes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#public-functions","text":"Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#protected-functions","text":"Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState)","title":"Protected Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#public-properties","text":"Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#protected-properties","text":"Name ulong syncVarDirtyBits","title":"Protected Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#public-attributes","text":"Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server.","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#protected-attributes","text":"Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Protected Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#detailed-description","text":"class Mirror :: NetworkBehaviour ; Base class which should be inherited by scripts which contain networking functionality. This is a MonoBehaviour class so scripts which need to use the networking feature should inherit this class instead of MonoBehaviour. It allows you to invoke networked actions, receive various callbacks, and automatically synchronize state from server-to-client. The NetworkBehaviour component requires a NetworkIdentity on the game object. There can be multiple NetworkBehaviours on a single game object. For an object with sub-components in a hierarchy, the NetworkIdentity must be on the root object, and NetworkBehaviour scripts must also be on the root object. Some of the built-in components of the networking system are derived from NetworkBehaviour , including NetworkTransport, NetworkAnimator and NetworkProximityChecker .","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-setdirtybit","text":"inline void SetDirtyBit ( ulong dirtyBit ) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 Parameters : dirtyBit Bit mask to set.","title":"function SetDirtyBit"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-clearalldirtybits","text":"inline void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); This is automatically invoked when an update is sent for this object, but can be called manually as well.","title":"function ClearAllDirtyBits"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-isdirty","text":"inline bool IsDirty ()","title":"function IsDirty"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-onserialize","text":"inline virtual bool OnSerialize ( NetworkWriter writer , bool initialState ) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . Parameters : writer Writer to use to write to the stream. initialState If this is being called to send initial state. Return : True if data was written. Reimplemented by : Mirror::NetworkTransformBase::OnSerialize , Mirror::NetworkAnimator::OnSerialize The initialState flag is useful to differentiate between the first time an object is serialized and when incremental updates can be sent. The first time an object is sent to a client, it must include a full state snapshot, but subsequent updates can save on bandwidth by including only incremental changes. Note that SyncVar hook functions are not called when initialState is true, only for incremental updates. If a class has SyncVars, then an implementation of this function and OnDeserialize() are added automatically to the class. So a class that has SyncVars cannot also have custom serialization functions. The OnSerialize function should return true to indicate that an update should be sent. If it returns true, then the dirty bits for that script are set to zero, if it returns false then the dirty bits are not changed. This allows multiple changes to a script to be accumulated over time and sent when the system is ready, instead of every frame.","title":"function OnSerialize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-ondeserialize","text":"inline virtual void OnDeserialize ( NetworkReader reader , bool initialState ) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . Parameters : reader Reader to read from the stream. initialState True if being sent initial state. Reimplemented by : Mirror::NetworkTransformBase::OnDeserialize , Mirror::NetworkAnimator::OnDeserialize","title":"function OnDeserialize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-serializeobjectsall","text":"inline bool SerializeObjectsAll ( NetworkWriter writer )","title":"function SerializeObjectsAll"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-serializeobjectsdelta","text":"inline bool SerializeObjectsDelta ( NetworkWriter writer )","title":"function SerializeObjectsDelta"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-onstartserver","text":"inline virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. Reimplemented by : Mirror::NetworkProximityChecker::OnStartServer , Mirror::NetworkSceneChecker::OnStartServer , Mirror::NetworkMatchChecker::OnStartServer This could be triggered by NetworkServer.Listen() for objects in the scene, or by NetworkServer.Spawn() for objects that are dynamically created. This will be called for objects on a \"host\" as well as for object on a dedicated server.","title":"function OnStartServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-onstopserver","text":"inline virtual void OnStopServer () Invoked on the server when the object is unspawned Reimplemented by : Mirror::NetworkProximityChecker::OnStopServer , Mirror::NetworkSceneChecker::OnStopServer , Me::DerangedSenators::CopsAndRobbers::Player::OnStopServer , Mirror::NetworkMatchChecker::OnStopServer Useful for saving object data in persistant storage","title":"function OnStopServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-onstartclient","text":"inline virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. Reimplemented by : Me::DerangedSenators::CopsAndRobbers::Player::OnStartClient Objects on the host have this function called, as there is a local client on the host. The values of SyncVars on object are guaranteed to be initialized correctly with the latest state from the server when this function is called on the client.","title":"function OnStartClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-onstopclient","text":"inline virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. Reimplemented by : Me::DerangedSenators::CopsAndRobbers::Player::OnStopClient This can be used as a hook to invoke effects or do client specific cleanup.","title":"function OnStopClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-onstartlocalplayer","text":"inline virtual void OnStartLocalPlayer () Called when the local player object has been set up. Reimplemented by : Me::DerangedSenators::CopsAndRobbers::CameraController::OnStartLocalPlayer This happens after OnStartClient() , as it is triggered by an ownership message from the server. This is an appropriate place to activate components or functionality that should only be active for the local player, such as cameras and input.","title":"function OnStartLocalPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-onstartauthority","text":"inline virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . This is called after OnStartServer and before OnStartClient. When AssignClientAuthority is called on the server, this will be called on the client that owns the object. When an object is spawned with [NetworkServer.Spawn] with a NetworkConnection parameter included, this will be called on the client that owns the object.","title":"function OnStartAuthority"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-onstopauthority","text":"inline virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. When NetworkIdentity.RemoveClientAuthority is called on the server, this will be called on the client that owns the object.","title":"function OnStopAuthority"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-getsyncvarhookguard","text":"inline bool getSyncVarHookGuard ( ulong dirtyBit )","title":"function getSyncVarHookGuard"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-setsyncvarhookguard","text":"inline void setSyncVarHookGuard ( ulong dirtyBit , bool value )","title":"function setSyncVarHookGuard"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-initsyncobject","text":"inline void InitSyncObject ( SyncObject syncObject )","title":"function InitSyncObject"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-sendcommandinternal","text":"inline void SendCommandInternal ( Type invokeClass , string cmdName , NetworkWriter writer , int channelId , bool ignoreAuthority = false )","title":"function SendCommandInternal"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-sendrpcinternal","text":"inline void SendRPCInternal ( Type invokeClass , string rpcName , NetworkWriter writer , int channelId , bool excludeOwner )","title":"function SendRPCInternal"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-sendtargetrpcinternal","text":"inline void SendTargetRPCInternal ( NetworkConnection conn , Type invokeClass , string rpcName , NetworkWriter writer , int channelId )","title":"function SendTargetRPCInternal"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-syncvargameobjectequal","text":"inline bool SyncVarGameObjectEqual ( GameObject newGameObject , uint netIdField )","title":"function SyncVarGameObjectEqual"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-setsyncvargameobject","text":"inline void SetSyncVarGameObject ( GameObject newGameObject , ref GameObject gameObjectField , ulong dirtyBit , ref uint netIdField )","title":"function SetSyncVarGameObject"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-getsyncvargameobject","text":"inline GameObject GetSyncVarGameObject ( uint netId , ref GameObject gameObjectField )","title":"function GetSyncVarGameObject"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-syncvarnetworkidentityequal","text":"inline bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity , uint netIdField )","title":"function SyncVarNetworkIdentityEqual"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-setsyncvarnetworkidentity","text":"inline void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity , ref NetworkIdentity identityField , ulong dirtyBit , ref uint netIdField )","title":"function SetSyncVarNetworkIdentity"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-getsyncvarnetworkidentity","text":"inline NetworkIdentity GetSyncVarNetworkIdentity ( uint netId , ref NetworkIdentity identityField )","title":"function GetSyncVarNetworkIdentity"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-syncvarnetworkbehaviourequal-t","text":"inline bool SyncVarNetworkBehaviourEqual < T > ( T newBehaviour , NetworkBehaviourSyncVar syncField )","title":"function SyncVarNetworkBehaviourEqual&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-setsyncvarnetworkbehaviour-t","text":"inline void SetSyncVarNetworkBehaviour < T > ( T newBehaviour , ref T behaviourField , ulong dirtyBit , ref NetworkBehaviourSyncVar syncField )","title":"function SetSyncVarNetworkBehaviour&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-getsyncvarnetworkbehaviour-t","text":"inline T GetSyncVarNetworkBehaviour < T > ( NetworkBehaviourSyncVar syncNetBehaviour , ref T behaviourField )","title":"function GetSyncVarNetworkBehaviour&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-syncvarequal-t","text":"inline bool SyncVarEqual < T > ( T value , ref T fieldValue )","title":"function SyncVarEqual&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-setsyncvar-t","text":"inline void SetSyncVar < T > ( T value , ref T fieldValue , ulong dirtyBit )","title":"function SetSyncVar&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-serializesyncvars","text":"inline virtual bool SerializeSyncVars ( NetworkWriter writer , bool initialState )","title":"function SerializeSyncVars"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#function-deserializesyncvars","text":"inline virtual void DeserializeSyncVars ( NetworkReader reader , bool initialState )","title":"function DeserializeSyncVars"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#property-netidentity","text":"NetworkIdentity netIdentity ; Returns the NetworkIdentity of this object","title":"property netIdentity"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#property-componentindex","text":"int ComponentIndex ; Returns the index of the component on this object","title":"property ComponentIndex"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#protected-property-documentation","text":"","title":"Protected Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#property-syncvardirtybits","text":"ulong syncVarDirtyBits ;","title":"property syncVarDirtyBits"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#variable-syncmode","text":"SyncMode syncMode = SyncMode . Observers ; sync mode for OnSerialize","title":"variable syncMode"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#variable-syncinterval","text":"float syncInterval = 0.1f ; sync interval for OnSerialize (in seconds)","title":"variable syncInterval"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#variable-isserver","text":"bool isServer => netIdentity . isServer ; Returns true if this object is active on an active server. This is only true if the object has been spawned. This is different from NetworkServer.active, which is true if the server itself is active rather than this object being active.","title":"variable isServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#variable-isclient","text":"bool isClient => netIdentity . isClient ; Returns true if running as a client and this object was spawned by a server.","title":"variable isClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#variable-islocalplayer","text":"bool isLocalPlayer => netIdentity . isLocalPlayer ; This returns true if this object is the one that represents the player on the local machine. In multiplayer games, there are multiple instances of the Player object. The client needs to know which one is for \"themselves\" so that only that player processes input and potentially has a camera attached. The IsLocalPlayer function will return true only for the player instance that belongs to the player on the local machine, so it can be used to filter out input for non-local players.","title":"variable isLocalPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#variable-isserveronly","text":"bool isServerOnly => [ isServer ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1NetworkBehaviour / # variable - isserver ) && ! [ isClient ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1NetworkBehaviour / # variable - isclient ); True if this object only exists on the server","title":"variable isServerOnly"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#variable-isclientonly","text":"bool isClientOnly => [ isClient ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1NetworkBehaviour / # variable - isclient ) && ! [ isServer ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1NetworkBehaviour / # variable - isserver ); True if this object exists on a client that is not also acting as a server","title":"variable isClientOnly"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#variable-hasauthority","text":"bool hasAuthority => netIdentity . hasAuthority ; This returns true if this object is the authoritative version of the object in the distributed network application. The NetworkIdentity.hasAuthority value on the NetworkIdentity determines how authority is determined. For most objects, authority is held by the server. For objects with NetworkIdentity.hasAuthority set, authority is held by the client of that player.","title":"variable hasAuthority"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#variable-netid","text":"uint netId => netIdentity . netId ; The unique network Id of this object. This is assigned at runtime by the network server and will be unique for all objects for that network session.","title":"variable netId"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#variable-connectiontoserver","text":"NetworkConnection connectionToServer => netIdentity . connectionToServer ; The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client.","title":"variable connectionToServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#variable-connectiontoclient","text":"NetworkConnection connectionToClient => netIdentity . connectionToClient ; The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server.","title":"variable connectionToClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviour/#variable-syncobjects","text":"readonly List < SyncObject > syncObjects = new List < [ SyncObject ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / interfaceMirror_1_1SyncObject / ) > (); objects that can synchronize themselves, such as synclists Updated on 29 January 2021 at 18:34:47 UTC","title":"variable syncObjects"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviourInspector/","text":"Mirror::NetworkBehaviourInspector Inherits from Editor Public Functions Name override void OnInspectorGUI () Protected Functions Name void DrawDefaultSyncLists () Draws Sync Objects that are IEnumerable void DrawDefaultSyncSettings () Draws SyncSettings if the NetworkBehaviour has anything to sync Protected Attributes Name List< string > syncVarNames List of all visible syncVars in target class Public Functions Documentation function OnInspectorGUI inline override void OnInspectorGUI () Protected Functions Documentation function DrawDefaultSyncLists inline void DrawDefaultSyncLists () Draws Sync Objects that are IEnumerable function DrawDefaultSyncSettings inline void DrawDefaultSyncSettings () Draws SyncSettings if the NetworkBehaviour has anything to sync Protected Attributes Documentation variable syncVarNames List < string > syncVarNames = new List < string > (); List of all visible syncVars in target class Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkBehaviourInspector"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviourInspector/#mirrornetworkbehaviourinspector","text":"Inherits from Editor","title":"Mirror::NetworkBehaviourInspector"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviourInspector/#public-functions","text":"Name override void OnInspectorGUI ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviourInspector/#protected-functions","text":"Name void DrawDefaultSyncLists () Draws Sync Objects that are IEnumerable void DrawDefaultSyncSettings () Draws SyncSettings if the NetworkBehaviour has anything to sync","title":"Protected Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviourInspector/#protected-attributes","text":"Name List< string > syncVarNames List of all visible syncVars in target class","title":"Protected Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviourInspector/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviourInspector/#function-oninspectorgui","text":"inline override void OnInspectorGUI ()","title":"function OnInspectorGUI"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviourInspector/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviourInspector/#function-drawdefaultsynclists","text":"inline void DrawDefaultSyncLists () Draws Sync Objects that are IEnumerable","title":"function DrawDefaultSyncLists"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviourInspector/#function-drawdefaultsyncsettings","text":"inline void DrawDefaultSyncSettings () Draws SyncSettings if the NetworkBehaviour has anything to sync","title":"function DrawDefaultSyncSettings"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviourInspector/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkBehaviourInspector/#variable-syncvarnames","text":"List < string > syncVarNames = new List < string > (); List of all visible syncVars in target class Updated on 29 January 2021 at 18:34:47 UTC","title":"variable syncVarNames"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/","text":"Mirror::NetworkClient This is a network client class used by the networking system. It contains a NetworkConnection that is used to connect to a network server. More... Public Functions Name void Connect (string address) Connect client to a NetworkServer instance. void Connect (Uri uri) Connect client to a NetworkServer instance. void ConnectHost () void ConnectLocalServer () connect host mode void DisconnectLocalServer () disconnect host mode. this is needed to call DisconnectMessage for the host client too. void Disconnect () Disconnect from server. void Send< T > (T message, int channelId =Channels.DefaultReliable) This sends a network message with a message Id to the server. This message is sent on channel zero, which by default is the reliable channel. void Update () void RegisterHandler< T > (Action< NetworkConnection , T > handler, bool requireAuthentication =true) Register a handler for a particular message type. void RegisterHandler< T > (Action< T > handler, bool requireAuthentication =true) Register a handler for a particular message type. void ReplaceHandler< T > (Action< NetworkConnection , T > handler, bool requireAuthentication =true) Replaces a handler for a particular message type. void ReplaceHandler< T > (Action< T > handler, bool requireAuthentication =true) Replaces a handler for a particular message type. bool UnregisterHandler< T > () Unregisters a network message handler. void Shutdown () Shut down a client. Public Properties Name NetworkConnection connection The NetworkConnection object this client is using. Public Attributes Name string serverIp The IP address of the server that this client is connected to. bool active active is true while a client is connecting/connected (= while the network is active) bool isConnected This gives the current connection status of the client. bool isLocalClient NetworkClient can connect to local server in host mode too Detailed Description class Mirror :: NetworkClient ; This is a network client class used by the networking system. It contains a NetworkConnection that is used to connect to a network server. The [NetworkClient] handle connection state, messages handlers, and connection configuration. There can be many [NetworkClient] instances in a process at a time, but only one that is connected to a game server ([NetworkServer]) that uses spawned objects. [NetworkClient] has an internal update function where it handles events from the transport layer. This includes asynchronous connect events, disconnect events and incoming data from a server. The NetworkManager has a NetworkClient instance that it uses for games that it starts, but the NetworkClient may be used by itself. Public Functions Documentation function Connect static inline void Connect ( string address ) Connect client to a NetworkServer instance. Parameters : address function Connect static inline void Connect ( Uri uri ) Connect client to a NetworkServer instance. Parameters : uri Address of the server to connect to function ConnectHost static inline void ConnectHost () function ConnectLocalServer static inline void ConnectLocalServer () connect host mode function DisconnectLocalServer static inline void DisconnectLocalServer () disconnect host mode. this is needed to call DisconnectMessage for the host client too. function Disconnect static inline void Disconnect () Disconnect from server. The disconnect message will be invoked. function Send< T > static inline void Send < T > ( T message , int channelId = Channels . DefaultReliable ) This sends a network message with a message Id to the server. This message is sent on channel zero, which by default is the reliable channel. Parameters : message channelId Template Parameters : T The message type to unregister. The message must be an instance of a class derived from MessageBase . The message id passed to Send() is used to identify the handler function to invoke on the server when the message is received. function Update static inline void Update () function RegisterHandler< T > static inline void RegisterHandler < T > ( Action < NetworkConnection , T > handler , bool requireAuthentication = true ) Register a handler for a particular message type. Parameters : handler Function handler which will be invoked when this message type is received. requireAuthentication True if the message requires an authenticated connection Template Parameters : T Message type There are several system message types which you can add handlers for. You can also add your own message types. function RegisterHandler< T > static inline void RegisterHandler < T > ( Action < T > handler , bool requireAuthentication = true ) Register a handler for a particular message type. Parameters : handler Function handler which will be invoked when this message type is received. requireAuthentication True if the message requires an authenticated connection Template Parameters : T Message type There are several system message types which you can add handlers for. You can also add your own message types. function ReplaceHandler< T > static inline void ReplaceHandler < T > ( Action < NetworkConnection , T > handler , bool requireAuthentication = true ) Replaces a handler for a particular message type. Parameters : handler Function handler which will be invoked when this message type is received. requireAuthentication True if the message requires an authenticated connection Template Parameters : T Message type See also [RegisterHandler(T)(Action(NetworkConnection, T), bool)] function ReplaceHandler< T > static inline void ReplaceHandler < T > ( Action < T > handler , bool requireAuthentication = true ) Replaces a handler for a particular message type. Parameters : handler Function handler which will be invoked when this message type is received. requireAuthentication True if the message requires an authenticated connection Template Parameters : T Message type See also [RegisterHandler(T)(Action(NetworkConnection, T), bool)] function UnregisterHandler< T > static inline bool UnregisterHandler < T > () Unregisters a network message handler. Template Parameters : T The message type to unregister. function Shutdown static inline void Shutdown () Shut down a client. This should be done when a client is no longer going to be used. Public Property Documentation property connection static NetworkConnection connection ; The NetworkConnection object this client is using. Public Attributes Documentation variable serverIp static string serverIp => connection . address ; The IP address of the server that this client is connected to. This will be empty if the client has not connected yet. variable active static bool active => connectState == ConnectState . Connecting || connectState == ConnectState . Connected ; active is true while a client is connecting/connected (= while the network is active) variable isConnected static bool isConnected => connectState == ConnectState . Connected ; This gives the current connection status of the client. variable isLocalClient static bool isLocalClient => connection is ULocalConnectionToServer ; NetworkClient can connect to local server in host mode too Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#mirrornetworkclient","text":"This is a network client class used by the networking system. It contains a NetworkConnection that is used to connect to a network server. More...","title":"Mirror::NetworkClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#public-functions","text":"Name void Connect (string address) Connect client to a NetworkServer instance. void Connect (Uri uri) Connect client to a NetworkServer instance. void ConnectHost () void ConnectLocalServer () connect host mode void DisconnectLocalServer () disconnect host mode. this is needed to call DisconnectMessage for the host client too. void Disconnect () Disconnect from server. void Send< T > (T message, int channelId =Channels.DefaultReliable) This sends a network message with a message Id to the server. This message is sent on channel zero, which by default is the reliable channel. void Update () void RegisterHandler< T > (Action< NetworkConnection , T > handler, bool requireAuthentication =true) Register a handler for a particular message type. void RegisterHandler< T > (Action< T > handler, bool requireAuthentication =true) Register a handler for a particular message type. void ReplaceHandler< T > (Action< NetworkConnection , T > handler, bool requireAuthentication =true) Replaces a handler for a particular message type. void ReplaceHandler< T > (Action< T > handler, bool requireAuthentication =true) Replaces a handler for a particular message type. bool UnregisterHandler< T > () Unregisters a network message handler. void Shutdown () Shut down a client.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#public-properties","text":"Name NetworkConnection connection The NetworkConnection object this client is using.","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#public-attributes","text":"Name string serverIp The IP address of the server that this client is connected to. bool active active is true while a client is connecting/connected (= while the network is active) bool isConnected This gives the current connection status of the client. bool isLocalClient NetworkClient can connect to local server in host mode too","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#detailed-description","text":"class Mirror :: NetworkClient ; This is a network client class used by the networking system. It contains a NetworkConnection that is used to connect to a network server. The [NetworkClient] handle connection state, messages handlers, and connection configuration. There can be many [NetworkClient] instances in a process at a time, but only one that is connected to a game server ([NetworkServer]) that uses spawned objects. [NetworkClient] has an internal update function where it handles events from the transport layer. This includes asynchronous connect events, disconnect events and incoming data from a server. The NetworkManager has a NetworkClient instance that it uses for games that it starts, but the NetworkClient may be used by itself.","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#function-connect","text":"static inline void Connect ( string address ) Connect client to a NetworkServer instance. Parameters : address","title":"function Connect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#function-connect_1","text":"static inline void Connect ( Uri uri ) Connect client to a NetworkServer instance. Parameters : uri Address of the server to connect to","title":"function Connect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#function-connecthost","text":"static inline void ConnectHost ()","title":"function ConnectHost"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#function-connectlocalserver","text":"static inline void ConnectLocalServer () connect host mode","title":"function ConnectLocalServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#function-disconnectlocalserver","text":"static inline void DisconnectLocalServer () disconnect host mode. this is needed to call DisconnectMessage for the host client too.","title":"function DisconnectLocalServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#function-disconnect","text":"static inline void Disconnect () Disconnect from server. The disconnect message will be invoked.","title":"function Disconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#function-send-t","text":"static inline void Send < T > ( T message , int channelId = Channels . DefaultReliable ) This sends a network message with a message Id to the server. This message is sent on channel zero, which by default is the reliable channel. Parameters : message channelId Template Parameters : T The message type to unregister. The message must be an instance of a class derived from MessageBase . The message id passed to Send() is used to identify the handler function to invoke on the server when the message is received.","title":"function Send&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#function-update","text":"static inline void Update ()","title":"function Update"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#function-registerhandler-t","text":"static inline void RegisterHandler < T > ( Action < NetworkConnection , T > handler , bool requireAuthentication = true ) Register a handler for a particular message type. Parameters : handler Function handler which will be invoked when this message type is received. requireAuthentication True if the message requires an authenticated connection Template Parameters : T Message type There are several system message types which you can add handlers for. You can also add your own message types.","title":"function RegisterHandler&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#function-registerhandler-t_1","text":"static inline void RegisterHandler < T > ( Action < T > handler , bool requireAuthentication = true ) Register a handler for a particular message type. Parameters : handler Function handler which will be invoked when this message type is received. requireAuthentication True if the message requires an authenticated connection Template Parameters : T Message type There are several system message types which you can add handlers for. You can also add your own message types.","title":"function RegisterHandler&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#function-replacehandler-t","text":"static inline void ReplaceHandler < T > ( Action < NetworkConnection , T > handler , bool requireAuthentication = true ) Replaces a handler for a particular message type. Parameters : handler Function handler which will be invoked when this message type is received. requireAuthentication True if the message requires an authenticated connection Template Parameters : T Message type See also [RegisterHandler(T)(Action(NetworkConnection, T), bool)]","title":"function ReplaceHandler&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#function-replacehandler-t_1","text":"static inline void ReplaceHandler < T > ( Action < T > handler , bool requireAuthentication = true ) Replaces a handler for a particular message type. Parameters : handler Function handler which will be invoked when this message type is received. requireAuthentication True if the message requires an authenticated connection Template Parameters : T Message type See also [RegisterHandler(T)(Action(NetworkConnection, T), bool)]","title":"function ReplaceHandler&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#function-unregisterhandler-t","text":"static inline bool UnregisterHandler < T > () Unregisters a network message handler. Template Parameters : T The message type to unregister.","title":"function UnregisterHandler&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#function-shutdown","text":"static inline void Shutdown () Shut down a client. This should be done when a client is no longer going to be used.","title":"function Shutdown"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#property-connection","text":"static NetworkConnection connection ; The NetworkConnection object this client is using.","title":"property connection"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#variable-serverip","text":"static string serverIp => connection . address ; The IP address of the server that this client is connected to. This will be empty if the client has not connected yet.","title":"variable serverIp"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#variable-active","text":"static bool active => connectState == ConnectState . Connecting || connectState == ConnectState . Connected ; active is true while a client is connecting/connected (= while the network is active)","title":"variable active"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#variable-isconnected","text":"static bool isConnected => connectState == ConnectState . Connected ; This gives the current connection status of the client.","title":"variable isConnected"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkClient/#variable-islocalclient","text":"static bool isLocalClient => connection is ULocalConnectionToServer ; NetworkClient can connect to local server in host mode too Updated on 29 January 2021 at 18:34:47 UTC","title":"variable isLocalClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/","text":"Mirror::NetworkConnection A High level network connection. This is used for connections from client-to-server and for connection from server-to-client. More... Inherited by NetworkConnectionToClient , NetworkConnectionToServer Public Functions Name virtual abstract void Disconnect () =0 Disconnects this connection. void Send< T > (T msg, int channelId =Channels.DefaultReliable) This sends a network message with a message ID on the connection. This message is sent on channel zero, which by default is the reliable channel. override string ToString () bool InvokeHandler< T > (T msg, int channelId) This function invokes the registered handler function for a message. Public Properties Name abstract string address The IP address / URL / FQDN associated with the connection. Can be useful for a game master to do IP Bans etc. NetworkIdentity identity The NetworkIdentity for this connection. Public Attributes Name const int LocalConnectionId readonly int connectionId Unique identifier for this connection that is assigned by the transport layer. bool isAuthenticated Flag that indicates the client has been authenticated. object authenticationData General purpose object to hold authentication data, character selection, tokens, etc. associated with the connection for reference after Authentication completes. bool isReady Flag that tells if the connection has been marked as \"ready\" by a client calling ClientScene.Ready(). float lastMessageTime The last time that a message was received on this connection. readonly HashSet< NetworkIdentity > clientOwnedObjects A list of the NetworkIdentity objects owned by this connection. This list is read-only. Detailed Description class Mirror :: NetworkConnection ; A High level network connection. This is used for connections from client-to-server and for connection from server-to-client. A NetworkConnection corresponds to a specific connection for a host in the transport layer. It has a connectionId that is assigned by the transport layer and passed to the Initialize function. A NetworkClient has one NetworkConnection . A NetworkServerSimple manages multiple NetworkConnections. The NetworkServer has multiple \"remote\" connections and a \"local\" connection for the local client. The NetworkConnection class provides message sending and handling facilities. For sending data over a network, there are methods to send message objects, byte arrays, and NetworkWriter objects. To handle data arriving from the network, handler functions can be registered for message Ids, byte arrays can be processed by HandleBytes(), and NetworkReader object can be processed by HandleReader(). NetworkConnection objects also act as observers for networked objects. When a connection is an observer of a networked object with a NetworkIdentity , then the object will be visible to corresponding client for the connection, and incremental state changes will be sent to the client. There are many virtual functions on NetworkConnection that allow its behaviour to be customized. NetworkClient and NetworkServer can both be made to instantiate custom classes derived from NetworkConnection by setting their networkConnectionClass member variable. Public Functions Documentation function Disconnect virtual abstract void Disconnect () = 0 Disconnects this connection. Reimplemented by : Mirror::NetworkConnectionToServer::Disconnect , Mirror::NetworkConnectionToClient::Disconnect , Mirror::ULocalConnectionToClient::Disconnect function Send< T > inline void Send < T > ( T msg , int channelId = Channels . DefaultReliable ) This sends a network message with a message ID on the connection. This message is sent on channel zero, which by default is the reliable channel. Parameters : msg The message to send. channelId The transport layer channel to send on. Template Parameters : T The message type to unregister. function ToString inline override string ToString () function InvokeHandler< T > inline bool InvokeHandler < T > ( T msg , int channelId ) This function invokes the registered handler function for a message. Parameters : msg The message object to process. Template Parameters : T The message type to unregister. Return : Returns true if the handler was successfully invoked Network connections used by the NetworkClient and NetworkServer use this function for handling network messages. Public Property Documentation property address abstract string address ; The IP address / URL / FQDN associated with the connection. Can be useful for a game master to do IP Bans etc. property identity NetworkIdentity identity ; The NetworkIdentity for this connection. Public Attributes Documentation variable LocalConnectionId const int LocalConnectionId = 0 ; variable connectionId readonly int connectionId ; Unique identifier for this connection that is assigned by the transport layer. On a server, this Id is unique for every connection on the server. On a client this Id is local to the client, it is not the same as the Id on the server for this connection. Transport layers connections begin at one. So on a client with a single connection to a server, the connectionId of that connection will be one. In NetworkServer, the connectionId of the local connection is zero. Clients do not know their connectionId on the server, and do not know the connectionId of other clients on the server. variable isAuthenticated bool isAuthenticated ; Flag that indicates the client has been authenticated. variable authenticationData object authenticationData ; General purpose object to hold authentication data, character selection, tokens, etc. associated with the connection for reference after Authentication completes. variable isReady bool isReady ; Flag that tells if the connection has been marked as \"ready\" by a client calling ClientScene.Ready(). This property is read-only. It is set by the system on the client when ClientScene.Ready() is called, and set by the system on the server when a ready message is received from a client. A client that is ready is sent spawned objects by the server and updates to the state of spawned objects. A client that is not ready is not sent spawned objects. variable lastMessageTime float lastMessageTime ; The last time that a message was received on this connection. This includes internal system messages (such as Commands and ClientRpc calls) and user messages. variable clientOwnedObjects readonly HashSet < NetworkIdentity > clientOwnedObjects = new HashSet < [ NetworkIdentity ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1NetworkIdentity / ) > (); A list of the NetworkIdentity objects owned by this connection. This list is read-only. This includes the player object for the connection - if it has localPlayerAutority set, and any objects spawned with local authority or set with AssignLocalAuthority. This list can be used to validate messages from clients, to ensure that clients are only trying to control objects that they own. Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkConnection"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#mirrornetworkconnection","text":"A High level network connection. This is used for connections from client-to-server and for connection from server-to-client. More... Inherited by NetworkConnectionToClient , NetworkConnectionToServer","title":"Mirror::NetworkConnection"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#public-functions","text":"Name virtual abstract void Disconnect () =0 Disconnects this connection. void Send< T > (T msg, int channelId =Channels.DefaultReliable) This sends a network message with a message ID on the connection. This message is sent on channel zero, which by default is the reliable channel. override string ToString () bool InvokeHandler< T > (T msg, int channelId) This function invokes the registered handler function for a message.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#public-properties","text":"Name abstract string address The IP address / URL / FQDN associated with the connection. Can be useful for a game master to do IP Bans etc. NetworkIdentity identity The NetworkIdentity for this connection.","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#public-attributes","text":"Name const int LocalConnectionId readonly int connectionId Unique identifier for this connection that is assigned by the transport layer. bool isAuthenticated Flag that indicates the client has been authenticated. object authenticationData General purpose object to hold authentication data, character selection, tokens, etc. associated with the connection for reference after Authentication completes. bool isReady Flag that tells if the connection has been marked as \"ready\" by a client calling ClientScene.Ready(). float lastMessageTime The last time that a message was received on this connection. readonly HashSet< NetworkIdentity > clientOwnedObjects A list of the NetworkIdentity objects owned by this connection. This list is read-only.","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#detailed-description","text":"class Mirror :: NetworkConnection ; A High level network connection. This is used for connections from client-to-server and for connection from server-to-client. A NetworkConnection corresponds to a specific connection for a host in the transport layer. It has a connectionId that is assigned by the transport layer and passed to the Initialize function. A NetworkClient has one NetworkConnection . A NetworkServerSimple manages multiple NetworkConnections. The NetworkServer has multiple \"remote\" connections and a \"local\" connection for the local client. The NetworkConnection class provides message sending and handling facilities. For sending data over a network, there are methods to send message objects, byte arrays, and NetworkWriter objects. To handle data arriving from the network, handler functions can be registered for message Ids, byte arrays can be processed by HandleBytes(), and NetworkReader object can be processed by HandleReader(). NetworkConnection objects also act as observers for networked objects. When a connection is an observer of a networked object with a NetworkIdentity , then the object will be visible to corresponding client for the connection, and incremental state changes will be sent to the client. There are many virtual functions on NetworkConnection that allow its behaviour to be customized. NetworkClient and NetworkServer can both be made to instantiate custom classes derived from NetworkConnection by setting their networkConnectionClass member variable.","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#function-disconnect","text":"virtual abstract void Disconnect () = 0 Disconnects this connection. Reimplemented by : Mirror::NetworkConnectionToServer::Disconnect , Mirror::NetworkConnectionToClient::Disconnect , Mirror::ULocalConnectionToClient::Disconnect","title":"function Disconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#function-send-t","text":"inline void Send < T > ( T msg , int channelId = Channels . DefaultReliable ) This sends a network message with a message ID on the connection. This message is sent on channel zero, which by default is the reliable channel. Parameters : msg The message to send. channelId The transport layer channel to send on. Template Parameters : T The message type to unregister.","title":"function Send&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#function-tostring","text":"inline override string ToString ()","title":"function ToString"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#function-invokehandler-t","text":"inline bool InvokeHandler < T > ( T msg , int channelId ) This function invokes the registered handler function for a message. Parameters : msg The message object to process. Template Parameters : T The message type to unregister. Return : Returns true if the handler was successfully invoked Network connections used by the NetworkClient and NetworkServer use this function for handling network messages.","title":"function InvokeHandler&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#property-address","text":"abstract string address ; The IP address / URL / FQDN associated with the connection. Can be useful for a game master to do IP Bans etc.","title":"property address"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#property-identity","text":"NetworkIdentity identity ; The NetworkIdentity for this connection.","title":"property identity"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#variable-localconnectionid","text":"const int LocalConnectionId = 0 ;","title":"variable LocalConnectionId"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#variable-connectionid","text":"readonly int connectionId ; Unique identifier for this connection that is assigned by the transport layer. On a server, this Id is unique for every connection on the server. On a client this Id is local to the client, it is not the same as the Id on the server for this connection. Transport layers connections begin at one. So on a client with a single connection to a server, the connectionId of that connection will be one. In NetworkServer, the connectionId of the local connection is zero. Clients do not know their connectionId on the server, and do not know the connectionId of other clients on the server.","title":"variable connectionId"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#variable-isauthenticated","text":"bool isAuthenticated ; Flag that indicates the client has been authenticated.","title":"variable isAuthenticated"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#variable-authenticationdata","text":"object authenticationData ; General purpose object to hold authentication data, character selection, tokens, etc. associated with the connection for reference after Authentication completes.","title":"variable authenticationData"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#variable-isready","text":"bool isReady ; Flag that tells if the connection has been marked as \"ready\" by a client calling ClientScene.Ready(). This property is read-only. It is set by the system on the client when ClientScene.Ready() is called, and set by the system on the server when a ready message is received from a client. A client that is ready is sent spawned objects by the server and updates to the state of spawned objects. A client that is not ready is not sent spawned objects.","title":"variable isReady"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#variable-lastmessagetime","text":"float lastMessageTime ; The last time that a message was received on this connection. This includes internal system messages (such as Commands and ClientRpc calls) and user messages.","title":"variable lastMessageTime"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnection/#variable-clientownedobjects","text":"readonly HashSet < NetworkIdentity > clientOwnedObjects = new HashSet < [ NetworkIdentity ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1NetworkIdentity / ) > (); A list of the NetworkIdentity objects owned by this connection. This list is read-only. This includes the player object for the connection - if it has localPlayerAutority set, and any objects spawned with local authority or set with AssignLocalAuthority. This list can be used to validate messages from clients, to ensure that clients are only trying to control objects that they own. Updated on 29 January 2021 at 18:34:47 UTC","title":"variable clientOwnedObjects"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnectionToClient/","text":"Mirror::NetworkConnectionToClient Inherits from NetworkConnection Inherited by ULocalConnectionToClient Public Functions Name NetworkConnectionToClient (int networkConnectionId) virtual override void Disconnect () Disconnects this connection. Public Attributes Name override string address Additional inherited members Public Functions inherited from NetworkConnection Name void Send< T > (T msg, int channelId =Channels.DefaultReliable) This sends a network message with a message ID on the connection. This message is sent on channel zero, which by default is the reliable channel. override string ToString () bool InvokeHandler< T > (T msg, int channelId) This function invokes the registered handler function for a message. Public Properties inherited from NetworkConnection Name NetworkIdentity identity The NetworkIdentity for this connection. Public Attributes inherited from NetworkConnection Name const int LocalConnectionId readonly int connectionId Unique identifier for this connection that is assigned by the transport layer. bool isAuthenticated Flag that indicates the client has been authenticated. object authenticationData General purpose object to hold authentication data, character selection, tokens, etc. associated with the connection for reference after Authentication completes. bool isReady Flag that tells if the connection has been marked as \"ready\" by a client calling ClientScene.Ready(). float lastMessageTime The last time that a message was received on this connection. readonly HashSet< NetworkIdentity > clientOwnedObjects A list of the NetworkIdentity objects owned by this connection. This list is read-only. Public Functions Documentation function NetworkConnectionToClient inline NetworkConnectionToClient ( int networkConnectionId ) function Disconnect inline virtual override void Disconnect () Disconnects this connection. Reimplements : Mirror::NetworkConnection::Disconnect Public Attributes Documentation variable address override string address => Transport . activeTransport . ServerGetClientAddress ([ connectionId ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1NetworkConnection / # variable - connectionid )); Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkConnectionToClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnectionToClient/#mirrornetworkconnectiontoclient","text":"Inherits from NetworkConnection Inherited by ULocalConnectionToClient","title":"Mirror::NetworkConnectionToClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnectionToClient/#public-functions","text":"Name NetworkConnectionToClient (int networkConnectionId) virtual override void Disconnect () Disconnects this connection.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnectionToClient/#public-attributes","text":"Name override string address","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnectionToClient/#additional-inherited-members","text":"Public Functions inherited from NetworkConnection Name void Send< T > (T msg, int channelId =Channels.DefaultReliable) This sends a network message with a message ID on the connection. This message is sent on channel zero, which by default is the reliable channel. override string ToString () bool InvokeHandler< T > (T msg, int channelId) This function invokes the registered handler function for a message. Public Properties inherited from NetworkConnection Name NetworkIdentity identity The NetworkIdentity for this connection. Public Attributes inherited from NetworkConnection Name const int LocalConnectionId readonly int connectionId Unique identifier for this connection that is assigned by the transport layer. bool isAuthenticated Flag that indicates the client has been authenticated. object authenticationData General purpose object to hold authentication data, character selection, tokens, etc. associated with the connection for reference after Authentication completes. bool isReady Flag that tells if the connection has been marked as \"ready\" by a client calling ClientScene.Ready(). float lastMessageTime The last time that a message was received on this connection. readonly HashSet< NetworkIdentity > clientOwnedObjects A list of the NetworkIdentity objects owned by this connection. This list is read-only.","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnectionToClient/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnectionToClient/#function-networkconnectiontoclient","text":"inline NetworkConnectionToClient ( int networkConnectionId )","title":"function NetworkConnectionToClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnectionToClient/#function-disconnect","text":"inline virtual override void Disconnect () Disconnects this connection. Reimplements : Mirror::NetworkConnection::Disconnect","title":"function Disconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnectionToClient/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnectionToClient/#variable-address","text":"override string address => Transport . activeTransport . ServerGetClientAddress ([ connectionId ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1NetworkConnection / # variable - connectionid )); Updated on 29 January 2021 at 18:34:47 UTC","title":"variable address"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnectionToServer/","text":"Mirror::NetworkConnectionToServer Inherits from NetworkConnection Inherited by ULocalConnectionToServer Public Functions Name virtual override void Disconnect () Disconnects this connection. Public Attributes Name override string address Additional inherited members Public Functions inherited from NetworkConnection Name void Send< T > (T msg, int channelId =Channels.DefaultReliable) This sends a network message with a message ID on the connection. This message is sent on channel zero, which by default is the reliable channel. override string ToString () bool InvokeHandler< T > (T msg, int channelId) This function invokes the registered handler function for a message. Public Properties inherited from NetworkConnection Name NetworkIdentity identity The NetworkIdentity for this connection. Public Attributes inherited from NetworkConnection Name const int LocalConnectionId readonly int connectionId Unique identifier for this connection that is assigned by the transport layer. bool isAuthenticated Flag that indicates the client has been authenticated. object authenticationData General purpose object to hold authentication data, character selection, tokens, etc. associated with the connection for reference after Authentication completes. bool isReady Flag that tells if the connection has been marked as \"ready\" by a client calling ClientScene.Ready(). float lastMessageTime The last time that a message was received on this connection. readonly HashSet< NetworkIdentity > clientOwnedObjects A list of the NetworkIdentity objects owned by this connection. This list is read-only. Public Functions Documentation function Disconnect inline virtual override void Disconnect () Disconnects this connection. Reimplements : Mirror::NetworkConnection::Disconnect Public Attributes Documentation variable address override string address => \"\" ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkConnectionToServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnectionToServer/#mirrornetworkconnectiontoserver","text":"Inherits from NetworkConnection Inherited by ULocalConnectionToServer","title":"Mirror::NetworkConnectionToServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnectionToServer/#public-functions","text":"Name virtual override void Disconnect () Disconnects this connection.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnectionToServer/#public-attributes","text":"Name override string address","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnectionToServer/#additional-inherited-members","text":"Public Functions inherited from NetworkConnection Name void Send< T > (T msg, int channelId =Channels.DefaultReliable) This sends a network message with a message ID on the connection. This message is sent on channel zero, which by default is the reliable channel. override string ToString () bool InvokeHandler< T > (T msg, int channelId) This function invokes the registered handler function for a message. Public Properties inherited from NetworkConnection Name NetworkIdentity identity The NetworkIdentity for this connection. Public Attributes inherited from NetworkConnection Name const int LocalConnectionId readonly int connectionId Unique identifier for this connection that is assigned by the transport layer. bool isAuthenticated Flag that indicates the client has been authenticated. object authenticationData General purpose object to hold authentication data, character selection, tokens, etc. associated with the connection for reference after Authentication completes. bool isReady Flag that tells if the connection has been marked as \"ready\" by a client calling ClientScene.Ready(). float lastMessageTime The last time that a message was received on this connection. readonly HashSet< NetworkIdentity > clientOwnedObjects A list of the NetworkIdentity objects owned by this connection. This list is read-only.","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnectionToServer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnectionToServer/#function-disconnect","text":"inline virtual override void Disconnect () Disconnects this connection. Reimplements : Mirror::NetworkConnection::Disconnect","title":"function Disconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnectionToServer/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkConnectionToServer/#variable-address","text":"override string address => \"\" ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable address"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkDiagnostics/","text":"Mirror::NetworkDiagnostics Provides profiling information from mirror A profiler can subscribe to these events and present the data in a friendly way to the user Public Classes Name struct MessageInfo Describes an outgoing message Public Events Name Action< MessageInfo > OutMessageEvent () Event that gets raised when Mirror sends a message Subscribe to this if you want to diagnose the network Action< MessageInfo > InMessageEvent () Event that gets raised when Mirror receives a message Subscribe to this if you want to profile the network Public Events Documentation event OutMessageEvent static Action < MessageInfo > OutMessageEvent () Event that gets raised when Mirror sends a message Subscribe to this if you want to diagnose the network event InMessageEvent static Action < MessageInfo > InMessageEvent () Event that gets raised when Mirror receives a message Subscribe to this if you want to profile the network Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkDiagnostics"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkDiagnostics/#mirrornetworkdiagnostics","text":"Provides profiling information from mirror A profiler can subscribe to these events and present the data in a friendly way to the user","title":"Mirror::NetworkDiagnostics"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkDiagnostics/#public-classes","text":"Name struct MessageInfo Describes an outgoing message","title":"Public Classes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkDiagnostics/#public-events","text":"Name Action< MessageInfo > OutMessageEvent () Event that gets raised when Mirror sends a message Subscribe to this if you want to diagnose the network Action< MessageInfo > InMessageEvent () Event that gets raised when Mirror receives a message Subscribe to this if you want to profile the network","title":"Public Events"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkDiagnostics/#public-events-documentation","text":"","title":"Public Events Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkDiagnostics/#event-outmessageevent","text":"static Action < MessageInfo > OutMessageEvent () Event that gets raised when Mirror sends a message Subscribe to this if you want to diagnose the network","title":"event OutMessageEvent"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkDiagnostics/#event-inmessageevent","text":"static Action < MessageInfo > InMessageEvent () Event that gets raised when Mirror receives a message Subscribe to this if you want to profile the network Updated on 29 January 2021 at 18:34:47 UTC","title":"event InMessageEvent"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/","text":"Mirror::NetworkIdentity The NetworkIdentity identifies objects across the network, between server and clients. Its primary data is a NetworkInstanceId which is allocated by the server and then set on clients. This is used in network communications to be able to lookup game objects on different machines. More... Inherits from MonoBehaviour Public Events Name ClientAuthorityCallback clientAuthorityCallback () A callback that can be populated to be notified when the client-authority state of objects changes. Public Functions Name NetworkIdentity GetSceneIdentity (ulong id) Gets the NetworkIdentity from the sceneIds dictionary with the corresponding id void ResetNextNetworkId () Resets nextNetworkId = 1 delegate void ClientAuthorityCallback ( NetworkConnection conn, NetworkIdentity identity, bool authorityState) The delegate type for the clientAuthorityCallback. void RebuildObservers (bool initialize) This causes the set of players that can see this object to be rebuild. The OnRebuildObservers callback function will be invoked on each NetworkBehaviour . bool AssignClientAuthority ( NetworkConnection conn) Assign control of an object to a client via the client's NetworkConnection. void RemoveClientAuthority () Removes ownership for an object. Public Properties Name bool isClient Returns true if running as a client and this object was spawned by a server. bool isServer Returns true if NetworkServer.active and server is not stopped. bool hasAuthority This returns true if this object is the authoritative player object on the client. uint netId Unique identifier for this particular object instance, used for tracking objects between networked clients and the server. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity . This is only valid for player objects on a local client. NetworkConnectionToClient connectionToClient The NetworkConnection associated with this NetworkIdentity. This is valid for player and other owned objects in the server. NetworkBehaviour [] NetworkBehaviours NetworkVisibility visibility Guid assetId Unique identifier used to find the source assets when server spawns the on clients. bool SpawnedFromInstantiate Public Attributes Name bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. Dictionary< int, NetworkConnection > observers The set of network connections (players) that can see this object. ulong sceneId A unique identifier for NetworkIdentity objects within a scene. bool serverOnly Flag to make this object only exist when the game is running as a server (or host). readonly Dictionary< uint, NetworkIdentity > spawned All spawned NetworkIdentities by netId. Available on server and client. Detailed Description class Mirror :: NetworkIdentity ; The NetworkIdentity identifies objects across the network, between server and clients. Its primary data is a NetworkInstanceId which is allocated by the server and then set on clients. This is used in network communications to be able to lookup game objects on different machines. The NetworkIdentity is used to synchronize information in the object with the network. Only the server should create instances of objects which have NetworkIdentity as otherwise they will not be properly connected to the system. For complex objects with a hierarchy of subcomponents, the NetworkIdentity must be on the root of the hierarchy. It is not supported to have multiple NetworkIdentity components on subcomponents of a hierarchy. NetworkBehaviour scripts require a NetworkIdentity on the game object to be able to function. The NetworkIdentity manages the dirty state of the NetworkBehaviours of the object. When it discovers that NetworkBehaviours are dirty, it causes an update packet to be created and sent to clients. The flow for serialization updates managed by the NetworkIdentity is: Each NetworkBehaviour has a dirty mask. This mask is available inside OnSerialize as syncVarDirtyBits Each SyncVar in a NetworkBehaviour script is assigned a bit in the dirty mask. Changing the value of SyncVars causes the bit for that SyncVar to be set in the dirty mask Alternatively, calling SetDirtyBit() writes directly to the dirty mask NetworkIdentity objects are checked on the server as part of it's update loop If any NetworkBehaviours on a NetworkIdentity are dirty, then an UpdateVars packet is created for that object The UpdateVars packet is populated by calling OnSerialize on each NetworkBehaviour on the object NetworkBehaviours that are NOT dirty write a zero to the packet for their dirty bits NetworkBehaviours that are dirty write their dirty mask, then the values for the SyncVars that have changed If OnSerialize returns true for a NetworkBehaviour , the dirty mask is reset for that NetworkBehaviour , so it will not send again until its value changes. The UpdateVars packet is sent to ready clients that are observing the object On the client: an UpdateVars packet is received for an object The OnDeserialize function is called for each NetworkBehaviour script on the object Each NetworkBehaviour script on the object reads a dirty mask. If the dirty mask for a NetworkBehaviour is zero, the OnDeserialize functions returns without reading any more If the dirty mask is non-zero value, then the OnDeserialize function reads the values for the SyncVars that correspond to the dirty bits that are set If there are SyncVar hook functions, those are invoked with the value read from the stream. Public Events Documentation event clientAuthorityCallback static ClientAuthorityCallback clientAuthorityCallback () A callback that can be populated to be notified when the client-authority state of objects changes. Whenever an object is spawned with client authority, or the client authority status of an object is changed with AssignClientAuthority or RemoveClientAuthority, then this callback will be invoked. This callback is only invoked on the server. Public Functions Documentation function GetSceneIdentity static NetworkIdentity GetSceneIdentity ( ulong id ) Gets the NetworkIdentity from the sceneIds dictionary with the corresponding id Parameters : id Return : NetworkIdentity from the sceneIds dictionary function ResetNextNetworkId static void ResetNextNetworkId () Resets nextNetworkId = 1 function ClientAuthorityCallback delegate void ClientAuthorityCallback ( NetworkConnection conn , NetworkIdentity identity , bool authorityState ) The delegate type for the clientAuthorityCallback. Parameters : conn The network connection that is gaining or losing authority. identity The object whose client authority status is being changed. authorityState The new state of client authority of the object for the connection. function RebuildObservers inline void RebuildObservers ( bool initialize ) This causes the set of players that can see this object to be rebuild. The OnRebuildObservers callback function will be invoked on each NetworkBehaviour . Parameters : initialize True if this is the first time. function AssignClientAuthority inline bool AssignClientAuthority ( NetworkConnection conn ) Assign control of an object to a client via the client's NetworkConnection. Parameters : conn The connection of the client to assign authority to. Return : True if authority was assigned. This causes hasAuthority to be set on the client that owns the object, and NetworkBehaviour.OnStartAuthority will be called on that client. This object then will be in the NetworkConnection.clientOwnedObjects list for the connection. Authority can be removed with RemoveClientAuthority. Only one client can own an object at any time. This does not need to be called for player objects, as their authority is setup automatically. function RemoveClientAuthority inline void RemoveClientAuthority () Removes ownership for an object. This applies to objects that had authority set by AssignClientAuthority, or [NetworkServer.Spawn] with a NetworkConnection parameter included. Authority cannot be removed for player objects. Public Property Documentation property isClient bool isClient ; Returns true if running as a client and this object was spawned by a server. IMPORTANT: checking NetworkClient.active means that isClient is false in OnDestroy: public bool isClient => NetworkClient.active && netId != 0 && !serverOnly; but we need it in OnDestroy, e.g. when saving skillbars on quit. this works fine if we keep the UNET way of setting isClient manually. => fixes property isServer bool isServer ; Returns true if NetworkServer.active and server is not stopped. IMPORTANT: checking NetworkServer.active means that isServer is false in OnDestroy: public bool isServer => NetworkServer.active && netId != 0; but we need it in OnDestroy, e.g. when saving players on quit. this works fine if we keep the UNET way of setting isServer manually. => fixes property hasAuthority bool hasAuthority ; This returns true if this object is the authoritative player object on the client. This value is determined at runtime. For most objects, authority is held by the server. For objects that had their authority set by AssignClientAuthority on the server, this will be true on the client that owns the object. NOT on other clients. property netId uint netId ; Unique identifier for this particular object instance, used for tracking objects between networked clients and the server. This is a unique identifier for this particular GameObject instance. Use it to track GameObjects between networked clients and the server. property connectionToServer NetworkConnection connectionToServer ; The NetworkConnection associated with this NetworkIdentity . This is only valid for player objects on a local client. property connectionToClient NetworkConnectionToClient connectionToClient ; The NetworkConnection associated with this NetworkIdentity. This is valid for player and other owned objects in the server. Use it to return details such as the connection's identity, IP address and ready status. property NetworkBehaviours NetworkBehaviour [] NetworkBehaviours ; property visibility NetworkVisibility visibility ; property assetId Guid assetId ; Unique identifier used to find the source assets when server spawns the on clients. The AssetId trick: Ideally we would have a serialized 'Guid m_AssetId' but Unity can't serialize it because Guid's internal bytes are private UNET used 'NetworkHash128' originally, with byte0, ..., byte16 which works, but it just unnecessary extra code Using just the Guid string would work, but it's 32 chars long and would then be sent over the network as 64 instead of 16 bytes The solution is to serialize the string internally here and then use the real 'Guid' type for everything else via .assetId property SpawnedFromInstantiate bool SpawnedFromInstantiate ; Public Attributes Documentation variable isLocalPlayer bool isLocalPlayer => ClientScene . localPlayer == this ; This returns true if this object is the one that represents the player on the local machine. This is set when the server has spawned an object for this particular client. variable observers Dictionary < int , NetworkConnection > observers ; The set of network connections (players) that can see this object. null until OnStartServer was called. this is necessary for SendTo* to work properly in server-only mode. variable sceneId ulong sceneId ; A unique identifier for NetworkIdentity objects within a scene. This is used for spawning scene objects on clients. variable serverOnly bool serverOnly ; Flag to make this object only exist when the game is running as a server (or host). variable spawned static readonly Dictionary < uint , NetworkIdentity > spawned = new Dictionary < uint , [ NetworkIdentity ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1NetworkIdentity / ) > (); All spawned NetworkIdentities by netId. Available on server and client. Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkIdentity"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#mirrornetworkidentity","text":"The NetworkIdentity identifies objects across the network, between server and clients. Its primary data is a NetworkInstanceId which is allocated by the server and then set on clients. This is used in network communications to be able to lookup game objects on different machines. More... Inherits from MonoBehaviour","title":"Mirror::NetworkIdentity"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#public-events","text":"Name ClientAuthorityCallback clientAuthorityCallback () A callback that can be populated to be notified when the client-authority state of objects changes.","title":"Public Events"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#public-functions","text":"Name NetworkIdentity GetSceneIdentity (ulong id) Gets the NetworkIdentity from the sceneIds dictionary with the corresponding id void ResetNextNetworkId () Resets nextNetworkId = 1 delegate void ClientAuthorityCallback ( NetworkConnection conn, NetworkIdentity identity, bool authorityState) The delegate type for the clientAuthorityCallback. void RebuildObservers (bool initialize) This causes the set of players that can see this object to be rebuild. The OnRebuildObservers callback function will be invoked on each NetworkBehaviour . bool AssignClientAuthority ( NetworkConnection conn) Assign control of an object to a client via the client's NetworkConnection. void RemoveClientAuthority () Removes ownership for an object.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#public-properties","text":"Name bool isClient Returns true if running as a client and this object was spawned by a server. bool isServer Returns true if NetworkServer.active and server is not stopped. bool hasAuthority This returns true if this object is the authoritative player object on the client. uint netId Unique identifier for this particular object instance, used for tracking objects between networked clients and the server. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity . This is only valid for player objects on a local client. NetworkConnectionToClient connectionToClient The NetworkConnection associated with this NetworkIdentity. This is valid for player and other owned objects in the server. NetworkBehaviour [] NetworkBehaviours NetworkVisibility visibility Guid assetId Unique identifier used to find the source assets when server spawns the on clients. bool SpawnedFromInstantiate","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#public-attributes","text":"Name bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. Dictionary< int, NetworkConnection > observers The set of network connections (players) that can see this object. ulong sceneId A unique identifier for NetworkIdentity objects within a scene. bool serverOnly Flag to make this object only exist when the game is running as a server (or host). readonly Dictionary< uint, NetworkIdentity > spawned All spawned NetworkIdentities by netId. Available on server and client.","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#detailed-description","text":"class Mirror :: NetworkIdentity ; The NetworkIdentity identifies objects across the network, between server and clients. Its primary data is a NetworkInstanceId which is allocated by the server and then set on clients. This is used in network communications to be able to lookup game objects on different machines. The NetworkIdentity is used to synchronize information in the object with the network. Only the server should create instances of objects which have NetworkIdentity as otherwise they will not be properly connected to the system. For complex objects with a hierarchy of subcomponents, the NetworkIdentity must be on the root of the hierarchy. It is not supported to have multiple NetworkIdentity components on subcomponents of a hierarchy. NetworkBehaviour scripts require a NetworkIdentity on the game object to be able to function. The NetworkIdentity manages the dirty state of the NetworkBehaviours of the object. When it discovers that NetworkBehaviours are dirty, it causes an update packet to be created and sent to clients. The flow for serialization updates managed by the NetworkIdentity is: Each NetworkBehaviour has a dirty mask. This mask is available inside OnSerialize as syncVarDirtyBits Each SyncVar in a NetworkBehaviour script is assigned a bit in the dirty mask. Changing the value of SyncVars causes the bit for that SyncVar to be set in the dirty mask Alternatively, calling SetDirtyBit() writes directly to the dirty mask NetworkIdentity objects are checked on the server as part of it's update loop If any NetworkBehaviours on a NetworkIdentity are dirty, then an UpdateVars packet is created for that object The UpdateVars packet is populated by calling OnSerialize on each NetworkBehaviour on the object NetworkBehaviours that are NOT dirty write a zero to the packet for their dirty bits NetworkBehaviours that are dirty write their dirty mask, then the values for the SyncVars that have changed If OnSerialize returns true for a NetworkBehaviour , the dirty mask is reset for that NetworkBehaviour , so it will not send again until its value changes. The UpdateVars packet is sent to ready clients that are observing the object On the client: an UpdateVars packet is received for an object The OnDeserialize function is called for each NetworkBehaviour script on the object Each NetworkBehaviour script on the object reads a dirty mask. If the dirty mask for a NetworkBehaviour is zero, the OnDeserialize functions returns without reading any more If the dirty mask is non-zero value, then the OnDeserialize function reads the values for the SyncVars that correspond to the dirty bits that are set If there are SyncVar hook functions, those are invoked with the value read from the stream.","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#public-events-documentation","text":"","title":"Public Events Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#event-clientauthoritycallback","text":"static ClientAuthorityCallback clientAuthorityCallback () A callback that can be populated to be notified when the client-authority state of objects changes. Whenever an object is spawned with client authority, or the client authority status of an object is changed with AssignClientAuthority or RemoveClientAuthority, then this callback will be invoked. This callback is only invoked on the server.","title":"event clientAuthorityCallback"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#function-getsceneidentity","text":"static NetworkIdentity GetSceneIdentity ( ulong id ) Gets the NetworkIdentity from the sceneIds dictionary with the corresponding id Parameters : id Return : NetworkIdentity from the sceneIds dictionary","title":"function GetSceneIdentity"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#function-resetnextnetworkid","text":"static void ResetNextNetworkId () Resets nextNetworkId = 1","title":"function ResetNextNetworkId"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#function-clientauthoritycallback","text":"delegate void ClientAuthorityCallback ( NetworkConnection conn , NetworkIdentity identity , bool authorityState ) The delegate type for the clientAuthorityCallback. Parameters : conn The network connection that is gaining or losing authority. identity The object whose client authority status is being changed. authorityState The new state of client authority of the object for the connection.","title":"function ClientAuthorityCallback"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#function-rebuildobservers","text":"inline void RebuildObservers ( bool initialize ) This causes the set of players that can see this object to be rebuild. The OnRebuildObservers callback function will be invoked on each NetworkBehaviour . Parameters : initialize True if this is the first time.","title":"function RebuildObservers"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#function-assignclientauthority","text":"inline bool AssignClientAuthority ( NetworkConnection conn ) Assign control of an object to a client via the client's NetworkConnection. Parameters : conn The connection of the client to assign authority to. Return : True if authority was assigned. This causes hasAuthority to be set on the client that owns the object, and NetworkBehaviour.OnStartAuthority will be called on that client. This object then will be in the NetworkConnection.clientOwnedObjects list for the connection. Authority can be removed with RemoveClientAuthority. Only one client can own an object at any time. This does not need to be called for player objects, as their authority is setup automatically.","title":"function AssignClientAuthority"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#function-removeclientauthority","text":"inline void RemoveClientAuthority () Removes ownership for an object. This applies to objects that had authority set by AssignClientAuthority, or [NetworkServer.Spawn] with a NetworkConnection parameter included. Authority cannot be removed for player objects.","title":"function RemoveClientAuthority"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#property-isclient","text":"bool isClient ; Returns true if running as a client and this object was spawned by a server. IMPORTANT: checking NetworkClient.active means that isClient is false in OnDestroy: public bool isClient => NetworkClient.active && netId != 0 && !serverOnly; but we need it in OnDestroy, e.g. when saving skillbars on quit. this works fine if we keep the UNET way of setting isClient manually. => fixes","title":"property isClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#property-isserver","text":"bool isServer ; Returns true if NetworkServer.active and server is not stopped. IMPORTANT: checking NetworkServer.active means that isServer is false in OnDestroy: public bool isServer => NetworkServer.active && netId != 0; but we need it in OnDestroy, e.g. when saving players on quit. this works fine if we keep the UNET way of setting isServer manually. => fixes","title":"property isServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#property-hasauthority","text":"bool hasAuthority ; This returns true if this object is the authoritative player object on the client. This value is determined at runtime. For most objects, authority is held by the server. For objects that had their authority set by AssignClientAuthority on the server, this will be true on the client that owns the object. NOT on other clients.","title":"property hasAuthority"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#property-netid","text":"uint netId ; Unique identifier for this particular object instance, used for tracking objects between networked clients and the server. This is a unique identifier for this particular GameObject instance. Use it to track GameObjects between networked clients and the server.","title":"property netId"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#property-connectiontoserver","text":"NetworkConnection connectionToServer ; The NetworkConnection associated with this NetworkIdentity . This is only valid for player objects on a local client.","title":"property connectionToServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#property-connectiontoclient","text":"NetworkConnectionToClient connectionToClient ; The NetworkConnection associated with this NetworkIdentity. This is valid for player and other owned objects in the server. Use it to return details such as the connection's identity, IP address and ready status.","title":"property connectionToClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#property-networkbehaviours","text":"NetworkBehaviour [] NetworkBehaviours ;","title":"property NetworkBehaviours"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#property-visibility","text":"NetworkVisibility visibility ;","title":"property visibility"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#property-assetid","text":"Guid assetId ; Unique identifier used to find the source assets when server spawns the on clients. The AssetId trick: Ideally we would have a serialized 'Guid m_AssetId' but Unity can't serialize it because Guid's internal bytes are private UNET used 'NetworkHash128' originally, with byte0, ..., byte16 which works, but it just unnecessary extra code Using just the Guid string would work, but it's 32 chars long and would then be sent over the network as 64 instead of 16 bytes The solution is to serialize the string internally here and then use the real 'Guid' type for everything else via .assetId","title":"property assetId"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#property-spawnedfrominstantiate","text":"bool SpawnedFromInstantiate ;","title":"property SpawnedFromInstantiate"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#variable-islocalplayer","text":"bool isLocalPlayer => ClientScene . localPlayer == this ; This returns true if this object is the one that represents the player on the local machine. This is set when the server has spawned an object for this particular client.","title":"variable isLocalPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#variable-observers","text":"Dictionary < int , NetworkConnection > observers ; The set of network connections (players) that can see this object. null until OnStartServer was called. this is necessary for SendTo* to work properly in server-only mode.","title":"variable observers"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#variable-sceneid","text":"ulong sceneId ; A unique identifier for NetworkIdentity objects within a scene. This is used for spawning scene objects on clients.","title":"variable sceneId"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#variable-serveronly","text":"bool serverOnly ; Flag to make this object only exist when the game is running as a server (or host).","title":"variable serverOnly"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkIdentity/#variable-spawned","text":"static readonly Dictionary < uint , NetworkIdentity > spawned = new Dictionary < uint , [ NetworkIdentity ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1NetworkIdentity / ) > (); All spawned NetworkIdentities by netId. Available on server and client. Updated on 29 January 2021 at 18:34:47 UTC","title":"variable spawned"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkInformationPreview/","text":"Mirror::NetworkInformationPreview Inherits from ObjectPreview Public Functions Name override GUIContent GetPreviewTitle () override bool HasPreviewGUI () override void OnPreviewGUI (Rect r, GUIStyle background) Public Functions Documentation function GetPreviewTitle inline override GUIContent GetPreviewTitle () function HasPreviewGUI inline override bool HasPreviewGUI () function OnPreviewGUI inline override void OnPreviewGUI ( Rect r , GUIStyle background ) Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkInformationPreview"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkInformationPreview/#mirrornetworkinformationpreview","text":"Inherits from ObjectPreview","title":"Mirror::NetworkInformationPreview"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkInformationPreview/#public-functions","text":"Name override GUIContent GetPreviewTitle () override bool HasPreviewGUI () override void OnPreviewGUI (Rect r, GUIStyle background)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkInformationPreview/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkInformationPreview/#function-getpreviewtitle","text":"inline override GUIContent GetPreviewTitle ()","title":"function GetPreviewTitle"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkInformationPreview/#function-haspreviewgui","text":"inline override bool HasPreviewGUI ()","title":"function HasPreviewGUI"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkInformationPreview/#function-onpreviewgui","text":"inline override void OnPreviewGUI ( Rect r , GUIStyle background ) Updated on 29 January 2021 at 18:34:47 UTC","title":"function OnPreviewGUI"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkInformationPreview_1_1Styles/","text":"Mirror::NetworkInformationPreview::Styles Public Functions Name Styles () Public Attributes Name GUIStyle labelStyle GUIStyle componentName GUIStyle disabledName Public Functions Documentation function Styles inline Styles () Public Attributes Documentation variable labelStyle GUIStyle labelStyle = new GUIStyle ( EditorStyles . label ); variable componentName GUIStyle componentName = new GUIStyle ( EditorStyles . boldLabel ); variable disabledName GUIStyle disabledName = new GUIStyle ( EditorStyles . miniLabel ); Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkInformationPreview::Styles"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkInformationPreview_1_1Styles/#mirrornetworkinformationpreviewstyles","text":"","title":"Mirror::NetworkInformationPreview::Styles"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkInformationPreview_1_1Styles/#public-functions","text":"Name Styles ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkInformationPreview_1_1Styles/#public-attributes","text":"Name GUIStyle labelStyle GUIStyle componentName GUIStyle disabledName","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkInformationPreview_1_1Styles/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkInformationPreview_1_1Styles/#function-styles","text":"inline Styles ()","title":"function Styles"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkInformationPreview_1_1Styles/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkInformationPreview_1_1Styles/#variable-labelstyle","text":"GUIStyle labelStyle = new GUIStyle ( EditorStyles . label );","title":"variable labelStyle"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkInformationPreview_1_1Styles/#variable-componentname","text":"GUIStyle componentName = new GUIStyle ( EditorStyles . boldLabel );","title":"variable componentName"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkInformationPreview_1_1Styles/#variable-disabledname","text":"GUIStyle disabledName = new GUIStyle ( EditorStyles . miniLabel ); Updated on 29 January 2021 at 18:34:47 UTC","title":"variable disabledName"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkLobbyManager/","text":"Mirror::NetworkLobbyManager This is a specialized NetworkManager that includes a networked lobby. More... Inherits from NetworkRoomManager , NetworkManager , MonoBehaviour Additional inherited members Public Classes inherited from NetworkRoomManager Name struct PendingPlayer Public Functions inherited from NetworkRoomManager Name virtual override void OnValidate () virtual so that inheriting classes' OnValidate() can call base.OnValidate() too void ReadyStatusChanged () virtual override void OnServerReady ( NetworkConnection conn) Called on the server when a client is ready. void CheckReadyToBegin () CheckReadyToBegin checks all of the players in the room to see if their readyToBegin flag is set. virtual override void OnServerConnect ( NetworkConnection conn) Called on the server when a new client connects. virtual override void OnServerDisconnect ( NetworkConnection conn) Called on the server when a client disconnects. virtual override void OnServerAddPlayer ( NetworkConnection conn) Called on the server when a client adds a new player with ClientScene.AddPlayer. void RecalculateRoomPlayerIndices () virtual override void ServerChangeScene (string newSceneName) This causes the server to switch scenes and sets the networkSceneName. virtual override void OnServerSceneChanged (string sceneName) Called on the server when a scene is completed loaded, when the scene load was initiated by the server with ServerChangeScene() . virtual override void OnStartServer () This is invoked when a server is started - including when a host is started. virtual override void OnStartHost () This is invoked when a host is started. virtual override void OnStopServer () This is called when a server is stopped - including when a host is stopped. virtual override void OnStopHost () This is called when a host is stopped. virtual override void OnStartClient () This is invoked when the client is started. virtual override void OnClientConnect ( NetworkConnection conn) Called on the client when connected to a server. virtual override void OnClientDisconnect ( NetworkConnection conn) Called on clients when disconnected from a server. virtual override void OnStopClient () This is called when a client is stopped. virtual override void OnClientSceneChanged ( NetworkConnection conn) Called on clients when a scene has completed loaded, when the scene load was initiated by the server. virtual void OnRoomStartHost () This is called on the host when a host is started. virtual void OnRoomStopHost () This is called on the host when the host is stopped. virtual void OnRoomStartServer () This is called on the server when the server is started - including when a host is started. virtual void OnRoomStopServer () This is called on the server when the server is started - including when a host is stopped. virtual void OnRoomServerConnect ( NetworkConnection conn) This is called on the server when a new client connects to the server. virtual void OnRoomServerDisconnect ( NetworkConnection conn) This is called on the server when a client disconnects. virtual void OnRoomServerSceneChanged (string sceneName) This is called on the server when a networked scene finishes loading. virtual GameObject OnRoomServerCreateRoomPlayer ( NetworkConnection conn) This allows customization of the creation of the room-player object on the server. virtual GameObject OnRoomServerCreateGamePlayer ( NetworkConnection conn, GameObject roomPlayer) This allows customization of the creation of the GamePlayer object on the server. virtual void OnRoomServerAddPlayer ( NetworkConnection conn) This allows customization of the creation of the GamePlayer object on the server. virtual bool OnRoomServerSceneLoadedForPlayer ( NetworkConnection conn, GameObject roomPlayer, GameObject gamePlayer) This is called on the server when it is told that a client has finished switching from the room scene to a game player scene. virtual void OnRoomServerPlayersReady () This is called on the server when all the players in the room are ready. virtual void OnRoomServerPlayersNotReady () This is called on the server when CheckReadyToBegin finds that players are not ready virtual void OnRoomClientEnter () This is a hook to allow custom behaviour when the game client enters the room. virtual void OnRoomClientExit () This is a hook to allow custom behaviour when the game client exits the room. virtual void OnRoomClientConnect ( NetworkConnection conn) This is called on the client when it connects to server. virtual void OnRoomClientDisconnect ( NetworkConnection conn) This is called on the client when disconnected from a server. virtual void OnRoomStartClient () This is called on the client when a client is started. virtual void OnRoomStopClient () This is called on the client when the client stops. virtual void OnRoomClientSceneChanged ( NetworkConnection conn) This is called on the client when the client is finished loading a new networked scene. virtual void OnRoomClientAddPlayerFailed () Called on the client when adding a player to the room fails. virtual void OnGUI () virtual so inheriting classes can roll their own Public Properties inherited from NetworkRoomManager Name bool allPlayersReady Public Attributes inherited from NetworkRoomManager Name bool showRoomGUI int minPlayers NetworkRoomPlayer roomPlayerPrefab string RoomScene The scene to use for the room. This is similar to the offlineScene of the NetworkManager . string GameplayScene The scene to use for the playing the game from the room. This is similar to the onlineScene of the NetworkManager . List< PendingPlayer > pendingPlayers List of players that are in the Room List< NetworkRoomPlayer > roomSlots These slots track players that enter the room. int clientIndex Public Functions inherited from NetworkManager Name virtual void OnValidate () virtual so that inheriting classes' OnValidate() can call base.OnValidate() too virtual void Awake () virtual so that inheriting classes' Awake() can call base.Awake() too virtual void Start () virtual so that inheriting classes' Start() can call base.Start() too virtual void LateUpdate () virtual so that inheriting classes' LateUpdate() can call base.LateUpdate() too void StartServer () This starts a new server. void StartClient () This starts a network client. It uses the networkAddress property as the address to connect to. void StartClient (Uri uri) This starts a network client. It uses the Uri parameter as the address to connect to. void StartHost () This starts a network \"host\" - a server and client in the same application. void StopHost () This stops both the client and the server that the manager is using. void StopServer () Stops the server that the manager is using. void StopClient () Stops the client that the manager is using. virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor virtual void ConfigureServerFrameRate () Set the frame rate for a headless server. virtual void OnDestroy () virtual so that inheriting classes' OnDestroy() can call base.OnDestroy() too virtual void ServerChangeScene (string newSceneName) This causes the server to switch scenes and sets the networkSceneName. Transform GetStartPosition () This finds a spawn position based on NetworkStartPosition objects in the scene. virtual void OnServerConnect ( NetworkConnection conn) Called on the server when a new client connects. virtual void OnServerDisconnect ( NetworkConnection conn) Called on the server when a client disconnects. virtual void OnServerReady ( NetworkConnection conn) Called on the server when a client is ready. virtual void OnServerAddPlayer ( NetworkConnection conn) Called on the server when a client adds a new player with ClientScene.AddPlayer. virtual void OnServerError ( NetworkConnection conn, int errorCode) Called on the server when a network error occurs for a client connection. virtual void OnServerChangeScene (string newSceneName) Called from ServerChangeScene immediately before SceneManager.LoadSceneAsync is executed virtual void OnServerSceneChanged (string sceneName) Called on the server when a scene is completed loaded, when the scene load was initiated by the server with ServerChangeScene() . virtual void OnClientConnect ( NetworkConnection conn) Called on the client when connected to a server. virtual void OnClientDisconnect ( NetworkConnection conn) Called on clients when disconnected from a server. virtual void OnClientError ( NetworkConnection conn, int errorCode) Called on clients when a network error occurs. virtual void OnClientNotReady ( NetworkConnection conn) Called on clients when a servers tells the client it is no longer ready. virtual void OnClientChangeScene (string newSceneName, SceneOperation sceneOperation, bool customHandling) Called from ClientChangeScene immediately before SceneManager.LoadSceneAsync is executed virtual void OnClientSceneChanged ( NetworkConnection conn) Called on clients when a scene has completed loaded, when the scene load was initiated by the server. virtual void OnStartHost () This is invoked when a host is started. virtual void OnStartServer () This is invoked when a server is started - including when a host is started. virtual void OnStartClient () This is invoked when the client is started. virtual void OnStopServer () This is called when a server is stopped - including when a host is stopped. virtual void OnStopClient () This is called when a client is stopped. virtual void OnStopHost () This is called when a host is stopped. bool IsSceneActive (string scene) void Shutdown () This is the only way to clear the singleton, so another instance can be created. void RegisterStartPosition (Transform start) Registers the transform of a game object as a player spawn location. void UnRegisterStartPosition (Transform start) Unregisters the transform of a game object as a player spawn location. Public Properties inherited from NetworkManager Name NetworkManager singleton NetworkManager singleton NetworkManagerMode mode string networkSceneName The name of the current network scene. Public Attributes inherited from NetworkManager Name bool dontDestroyOnLoad A flag to control whether the NetworkManager object is destroyed when the scene changes. bool runInBackground Controls whether the program runs when it is in the background. bool autoStartServerBuild Automatically invoke StartServer() bool showDebugMessages Enables verbose debug messages in the console int serverTickRate Server Update frequency, per second. Use around 60Hz for fast paced games like Counter-Strike to minimize latency. Use around 30Hz for games like WoW to minimize computations. Use around 1-10Hz for slow paced games like EVE. string offlineScene The scene to switch to when offline. string onlineScene The scene to switch to when online. string networkAddress The network address currently in use. int maxConnections The maximum number of concurrent network connections to support. bool disconnectInactiveConnections Should the server disconnect remote connections that have gone silent for more than Server Idle Timeout? float disconnectInactiveTimeout Timeout in seconds since last message from a client after which server will auto-disconnect. NetworkAuthenticator authenticator GameObject playerPrefab The default prefab to be used to create player objects on the server. bool autoCreatePlayer A flag to control whether or not player objects are automatically created on connect, and on scene change. PlayerSpawnMethod playerSpawnMethod The current method of spawning players used by the NetworkManager . List< GameObject > spawnPrefabs List of prefabs that will be registered with the spawning system. int numPlayers Number of active player objects across all connections on the server. bool isNetworkActive True if the server or client is started and running bool clientLoadedScene This is true if the client loaded a new scene when connecting to the server. UnityEngine.AsyncOperation loadingSceneAsync int startPositionIndex List< Transform > startPositions List of transforms populted by NetworkStartPosition components found in the scene. Protected Attributes inherited from NetworkManager Name Transport transport Detailed Description class Mirror :: NetworkLobbyManager ; This is a specialized NetworkManager that includes a networked lobby. The lobby has slots that track the joined players, and a maximum player count that is enforced. It requires that the NetworkLobbyPlayer component be on the lobby player objects. NetworkLobbyManager is derived from NetworkManager , and so it implements many of the virtual functions provided by the NetworkManager class. To avoid accidentally replacing functionality of the NetworkLobbyManager , there are new virtual functions on the NetworkLobbyManager that begin with \"OnLobby\". These should be used on classes derived from NetworkLobbyManager instead of the virtual functions on NetworkManager . The OnLobby*() functions have empty implementations on the NetworkLobbyManager base class, so the base class functions do not have to be called. Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkLobbyManager"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkLobbyManager/#mirrornetworklobbymanager","text":"This is a specialized NetworkManager that includes a networked lobby. More... Inherits from NetworkRoomManager , NetworkManager , MonoBehaviour","title":"Mirror::NetworkLobbyManager"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkLobbyManager/#additional-inherited-members","text":"Public Classes inherited from NetworkRoomManager Name struct PendingPlayer Public Functions inherited from NetworkRoomManager Name virtual override void OnValidate () virtual so that inheriting classes' OnValidate() can call base.OnValidate() too void ReadyStatusChanged () virtual override void OnServerReady ( NetworkConnection conn) Called on the server when a client is ready. void CheckReadyToBegin () CheckReadyToBegin checks all of the players in the room to see if their readyToBegin flag is set. virtual override void OnServerConnect ( NetworkConnection conn) Called on the server when a new client connects. virtual override void OnServerDisconnect ( NetworkConnection conn) Called on the server when a client disconnects. virtual override void OnServerAddPlayer ( NetworkConnection conn) Called on the server when a client adds a new player with ClientScene.AddPlayer. void RecalculateRoomPlayerIndices () virtual override void ServerChangeScene (string newSceneName) This causes the server to switch scenes and sets the networkSceneName. virtual override void OnServerSceneChanged (string sceneName) Called on the server when a scene is completed loaded, when the scene load was initiated by the server with ServerChangeScene() . virtual override void OnStartServer () This is invoked when a server is started - including when a host is started. virtual override void OnStartHost () This is invoked when a host is started. virtual override void OnStopServer () This is called when a server is stopped - including when a host is stopped. virtual override void OnStopHost () This is called when a host is stopped. virtual override void OnStartClient () This is invoked when the client is started. virtual override void OnClientConnect ( NetworkConnection conn) Called on the client when connected to a server. virtual override void OnClientDisconnect ( NetworkConnection conn) Called on clients when disconnected from a server. virtual override void OnStopClient () This is called when a client is stopped. virtual override void OnClientSceneChanged ( NetworkConnection conn) Called on clients when a scene has completed loaded, when the scene load was initiated by the server. virtual void OnRoomStartHost () This is called on the host when a host is started. virtual void OnRoomStopHost () This is called on the host when the host is stopped. virtual void OnRoomStartServer () This is called on the server when the server is started - including when a host is started. virtual void OnRoomStopServer () This is called on the server when the server is started - including when a host is stopped. virtual void OnRoomServerConnect ( NetworkConnection conn) This is called on the server when a new client connects to the server. virtual void OnRoomServerDisconnect ( NetworkConnection conn) This is called on the server when a client disconnects. virtual void OnRoomServerSceneChanged (string sceneName) This is called on the server when a networked scene finishes loading. virtual GameObject OnRoomServerCreateRoomPlayer ( NetworkConnection conn) This allows customization of the creation of the room-player object on the server. virtual GameObject OnRoomServerCreateGamePlayer ( NetworkConnection conn, GameObject roomPlayer) This allows customization of the creation of the GamePlayer object on the server. virtual void OnRoomServerAddPlayer ( NetworkConnection conn) This allows customization of the creation of the GamePlayer object on the server. virtual bool OnRoomServerSceneLoadedForPlayer ( NetworkConnection conn, GameObject roomPlayer, GameObject gamePlayer) This is called on the server when it is told that a client has finished switching from the room scene to a game player scene. virtual void OnRoomServerPlayersReady () This is called on the server when all the players in the room are ready. virtual void OnRoomServerPlayersNotReady () This is called on the server when CheckReadyToBegin finds that players are not ready virtual void OnRoomClientEnter () This is a hook to allow custom behaviour when the game client enters the room. virtual void OnRoomClientExit () This is a hook to allow custom behaviour when the game client exits the room. virtual void OnRoomClientConnect ( NetworkConnection conn) This is called on the client when it connects to server. virtual void OnRoomClientDisconnect ( NetworkConnection conn) This is called on the client when disconnected from a server. virtual void OnRoomStartClient () This is called on the client when a client is started. virtual void OnRoomStopClient () This is called on the client when the client stops. virtual void OnRoomClientSceneChanged ( NetworkConnection conn) This is called on the client when the client is finished loading a new networked scene. virtual void OnRoomClientAddPlayerFailed () Called on the client when adding a player to the room fails. virtual void OnGUI () virtual so inheriting classes can roll their own Public Properties inherited from NetworkRoomManager Name bool allPlayersReady Public Attributes inherited from NetworkRoomManager Name bool showRoomGUI int minPlayers NetworkRoomPlayer roomPlayerPrefab string RoomScene The scene to use for the room. This is similar to the offlineScene of the NetworkManager . string GameplayScene The scene to use for the playing the game from the room. This is similar to the onlineScene of the NetworkManager . List< PendingPlayer > pendingPlayers List of players that are in the Room List< NetworkRoomPlayer > roomSlots These slots track players that enter the room. int clientIndex Public Functions inherited from NetworkManager Name virtual void OnValidate () virtual so that inheriting classes' OnValidate() can call base.OnValidate() too virtual void Awake () virtual so that inheriting classes' Awake() can call base.Awake() too virtual void Start () virtual so that inheriting classes' Start() can call base.Start() too virtual void LateUpdate () virtual so that inheriting classes' LateUpdate() can call base.LateUpdate() too void StartServer () This starts a new server. void StartClient () This starts a network client. It uses the networkAddress property as the address to connect to. void StartClient (Uri uri) This starts a network client. It uses the Uri parameter as the address to connect to. void StartHost () This starts a network \"host\" - a server and client in the same application. void StopHost () This stops both the client and the server that the manager is using. void StopServer () Stops the server that the manager is using. void StopClient () Stops the client that the manager is using. virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor virtual void ConfigureServerFrameRate () Set the frame rate for a headless server. virtual void OnDestroy () virtual so that inheriting classes' OnDestroy() can call base.OnDestroy() too virtual void ServerChangeScene (string newSceneName) This causes the server to switch scenes and sets the networkSceneName. Transform GetStartPosition () This finds a spawn position based on NetworkStartPosition objects in the scene. virtual void OnServerConnect ( NetworkConnection conn) Called on the server when a new client connects. virtual void OnServerDisconnect ( NetworkConnection conn) Called on the server when a client disconnects. virtual void OnServerReady ( NetworkConnection conn) Called on the server when a client is ready. virtual void OnServerAddPlayer ( NetworkConnection conn) Called on the server when a client adds a new player with ClientScene.AddPlayer. virtual void OnServerError ( NetworkConnection conn, int errorCode) Called on the server when a network error occurs for a client connection. virtual void OnServerChangeScene (string newSceneName) Called from ServerChangeScene immediately before SceneManager.LoadSceneAsync is executed virtual void OnServerSceneChanged (string sceneName) Called on the server when a scene is completed loaded, when the scene load was initiated by the server with ServerChangeScene() . virtual void OnClientConnect ( NetworkConnection conn) Called on the client when connected to a server. virtual void OnClientDisconnect ( NetworkConnection conn) Called on clients when disconnected from a server. virtual void OnClientError ( NetworkConnection conn, int errorCode) Called on clients when a network error occurs. virtual void OnClientNotReady ( NetworkConnection conn) Called on clients when a servers tells the client it is no longer ready. virtual void OnClientChangeScene (string newSceneName, SceneOperation sceneOperation, bool customHandling) Called from ClientChangeScene immediately before SceneManager.LoadSceneAsync is executed virtual void OnClientSceneChanged ( NetworkConnection conn) Called on clients when a scene has completed loaded, when the scene load was initiated by the server. virtual void OnStartHost () This is invoked when a host is started. virtual void OnStartServer () This is invoked when a server is started - including when a host is started. virtual void OnStartClient () This is invoked when the client is started. virtual void OnStopServer () This is called when a server is stopped - including when a host is stopped. virtual void OnStopClient () This is called when a client is stopped. virtual void OnStopHost () This is called when a host is stopped. bool IsSceneActive (string scene) void Shutdown () This is the only way to clear the singleton, so another instance can be created. void RegisterStartPosition (Transform start) Registers the transform of a game object as a player spawn location. void UnRegisterStartPosition (Transform start) Unregisters the transform of a game object as a player spawn location. Public Properties inherited from NetworkManager Name NetworkManager singleton NetworkManager singleton NetworkManagerMode mode string networkSceneName The name of the current network scene. Public Attributes inherited from NetworkManager Name bool dontDestroyOnLoad A flag to control whether the NetworkManager object is destroyed when the scene changes. bool runInBackground Controls whether the program runs when it is in the background. bool autoStartServerBuild Automatically invoke StartServer() bool showDebugMessages Enables verbose debug messages in the console int serverTickRate Server Update frequency, per second. Use around 60Hz for fast paced games like Counter-Strike to minimize latency. Use around 30Hz for games like WoW to minimize computations. Use around 1-10Hz for slow paced games like EVE. string offlineScene The scene to switch to when offline. string onlineScene The scene to switch to when online. string networkAddress The network address currently in use. int maxConnections The maximum number of concurrent network connections to support. bool disconnectInactiveConnections Should the server disconnect remote connections that have gone silent for more than Server Idle Timeout? float disconnectInactiveTimeout Timeout in seconds since last message from a client after which server will auto-disconnect. NetworkAuthenticator authenticator GameObject playerPrefab The default prefab to be used to create player objects on the server. bool autoCreatePlayer A flag to control whether or not player objects are automatically created on connect, and on scene change. PlayerSpawnMethod playerSpawnMethod The current method of spawning players used by the NetworkManager . List< GameObject > spawnPrefabs List of prefabs that will be registered with the spawning system. int numPlayers Number of active player objects across all connections on the server. bool isNetworkActive True if the server or client is started and running bool clientLoadedScene This is true if the client loaded a new scene when connecting to the server. UnityEngine.AsyncOperation loadingSceneAsync int startPositionIndex List< Transform > startPositions List of transforms populted by NetworkStartPosition components found in the scene. Protected Attributes inherited from NetworkManager Name Transport transport","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkLobbyManager/#detailed-description","text":"class Mirror :: NetworkLobbyManager ; This is a specialized NetworkManager that includes a networked lobby. The lobby has slots that track the joined players, and a maximum player count that is enforced. It requires that the NetworkLobbyPlayer component be on the lobby player objects. NetworkLobbyManager is derived from NetworkManager , and so it implements many of the virtual functions provided by the NetworkManager class. To avoid accidentally replacing functionality of the NetworkLobbyManager , there are new virtual functions on the NetworkLobbyManager that begin with \"OnLobby\". These should be used on classes derived from NetworkLobbyManager instead of the virtual functions on NetworkManager . The OnLobby*() functions have empty implementations on the NetworkLobbyManager base class, so the base class functions do not have to be called. Updated on 29 January 2021 at 18:34:47 UTC","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkLobbyPlayer/","text":"Mirror::NetworkLobbyPlayer This component works in conjunction with the NetworkLobbyManager to make up the multiplayer lobby system. More... Inherits from NetworkRoomPlayer , NetworkBehaviour , MonoBehaviour Additional inherited members Public Functions inherited from NetworkRoomPlayer Name void Start () Do not use Start - Override OnStartrHost / OnStartClient instead! virtual void OnDisable () void CmdChangeReadyState (bool readyState) virtual void IndexChanged (int oldIndex, int newIndex) This is a hook that is invoked on clients when the index changes. virtual void ReadyStateChanged (bool oldReadyState, bool newReadyState) This is a hook that is invoked on clients when a RoomPlayer switches between ready or not ready. virtual void OnClientEnterRoom () This is a hook that is invoked on clients for all room player objects when entering the room. virtual void OnClientExitRoom () This is a hook that is invoked on clients for all room player objects when exiting the room. virtual void OnGUI () Render a UI for the room. Override to provide your on UI Public Attributes inherited from NetworkRoomPlayer Name bool showRoomGUI This flag controls whether the default UI is shown for the room player. bool readyToBegin Diagnostic flag indicating whether this player is ready for the game to begin. int index Diagnostic index of the player, e.g. Player1, Player2, etc. Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Detailed Description class Mirror :: NetworkLobbyPlayer ; This component works in conjunction with the NetworkLobbyManager to make up the multiplayer lobby system. The LobbyPrefab object of the NetworkLobbyManager must have this component on it. This component holds basic lobby player data required for the lobby to function. Game specific data for lobby players can be put in other components on the LobbyPrefab or in scripts derived from NetworkLobbyPlayer . Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkLobbyPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkLobbyPlayer/#mirrornetworklobbyplayer","text":"This component works in conjunction with the NetworkLobbyManager to make up the multiplayer lobby system. More... Inherits from NetworkRoomPlayer , NetworkBehaviour , MonoBehaviour","title":"Mirror::NetworkLobbyPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkLobbyPlayer/#additional-inherited-members","text":"Public Functions inherited from NetworkRoomPlayer Name void Start () Do not use Start - Override OnStartrHost / OnStartClient instead! virtual void OnDisable () void CmdChangeReadyState (bool readyState) virtual void IndexChanged (int oldIndex, int newIndex) This is a hook that is invoked on clients when the index changes. virtual void ReadyStateChanged (bool oldReadyState, bool newReadyState) This is a hook that is invoked on clients when a RoomPlayer switches between ready or not ready. virtual void OnClientEnterRoom () This is a hook that is invoked on clients for all room player objects when entering the room. virtual void OnClientExitRoom () This is a hook that is invoked on clients for all room player objects when exiting the room. virtual void OnGUI () Render a UI for the room. Override to provide your on UI Public Attributes inherited from NetworkRoomPlayer Name bool showRoomGUI This flag controls whether the default UI is shown for the room player. bool readyToBegin Diagnostic flag indicating whether this player is ready for the game to begin. int index Diagnostic index of the player, e.g. Player1, Player2, etc. Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkLobbyPlayer/#detailed-description","text":"class Mirror :: NetworkLobbyPlayer ; This component works in conjunction with the NetworkLobbyManager to make up the multiplayer lobby system. The LobbyPrefab object of the NetworkLobbyManager must have this component on it. This component holds basic lobby player data required for the lobby to function. Game specific data for lobby players can be put in other components on the LobbyPrefab or in scripts derived from NetworkLobbyPlayer . Updated on 29 January 2021 at 18:34:47 UTC","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/","text":"Mirror::NetworkManager Inherits from MonoBehaviour Inherited by NetworkRoomManager Public Functions Name virtual void OnValidate () virtual so that inheriting classes' OnValidate() can call base.OnValidate() too virtual void Awake () virtual so that inheriting classes' Awake() can call base.Awake() too virtual void Start () virtual so that inheriting classes' Start() can call base.Start() too virtual void LateUpdate () virtual so that inheriting classes' LateUpdate() can call base.LateUpdate() too void StartServer () This starts a new server. void StartClient () This starts a network client. It uses the networkAddress property as the address to connect to. void StartClient (Uri uri) This starts a network client. It uses the Uri parameter as the address to connect to. void StartHost () This starts a network \"host\" - a server and client in the same application. void StopHost () This stops both the client and the server that the manager is using. void StopServer () Stops the server that the manager is using. void StopClient () Stops the client that the manager is using. virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor virtual void ConfigureServerFrameRate () Set the frame rate for a headless server. virtual void OnDestroy () virtual so that inheriting classes' OnDestroy() can call base.OnDestroy() too virtual void ServerChangeScene (string newSceneName) This causes the server to switch scenes and sets the networkSceneName. Transform GetStartPosition () This finds a spawn position based on NetworkStartPosition objects in the scene. virtual void OnServerConnect ( NetworkConnection conn) Called on the server when a new client connects. virtual void OnServerDisconnect ( NetworkConnection conn) Called on the server when a client disconnects. virtual void OnServerReady ( NetworkConnection conn) Called on the server when a client is ready. virtual void OnServerAddPlayer ( NetworkConnection conn) Called on the server when a client adds a new player with ClientScene.AddPlayer. virtual void OnServerError ( NetworkConnection conn, int errorCode) Called on the server when a network error occurs for a client connection. virtual void OnServerChangeScene (string newSceneName) Called from ServerChangeScene immediately before SceneManager.LoadSceneAsync is executed virtual void OnServerSceneChanged (string sceneName) Called on the server when a scene is completed loaded, when the scene load was initiated by the server with ServerChangeScene() . virtual void OnClientConnect ( NetworkConnection conn) Called on the client when connected to a server. virtual void OnClientDisconnect ( NetworkConnection conn) Called on clients when disconnected from a server. virtual void OnClientError ( NetworkConnection conn, int errorCode) Called on clients when a network error occurs. virtual void OnClientNotReady ( NetworkConnection conn) Called on clients when a servers tells the client it is no longer ready. virtual void OnClientChangeScene (string newSceneName, SceneOperation sceneOperation, bool customHandling) Called from ClientChangeScene immediately before SceneManager.LoadSceneAsync is executed virtual void OnClientSceneChanged ( NetworkConnection conn) Called on clients when a scene has completed loaded, when the scene load was initiated by the server. virtual void OnStartHost () This is invoked when a host is started. virtual void OnStartServer () This is invoked when a server is started - including when a host is started. virtual void OnStartClient () This is invoked when the client is started. virtual void OnStopServer () This is called when a server is stopped - including when a host is stopped. virtual void OnStopClient () This is called when a client is stopped. virtual void OnStopHost () This is called when a host is stopped. bool IsSceneActive (string scene) void Shutdown () This is the only way to clear the singleton, so another instance can be created. void RegisterStartPosition (Transform start) Registers the transform of a game object as a player spawn location. void UnRegisterStartPosition (Transform start) Unregisters the transform of a game object as a player spawn location. Public Properties Name NetworkManager singleton NetworkManager singleton NetworkManagerMode mode string networkSceneName The name of the current network scene. Public Attributes Name bool dontDestroyOnLoad A flag to control whether the NetworkManager object is destroyed when the scene changes. bool runInBackground Controls whether the program runs when it is in the background. bool autoStartServerBuild Automatically invoke StartServer() bool showDebugMessages Enables verbose debug messages in the console int serverTickRate Server Update frequency, per second. Use around 60Hz for fast paced games like Counter-Strike to minimize latency. Use around 30Hz for games like WoW to minimize computations. Use around 1-10Hz for slow paced games like EVE. string offlineScene The scene to switch to when offline. string onlineScene The scene to switch to when online. string networkAddress The network address currently in use. int maxConnections The maximum number of concurrent network connections to support. bool disconnectInactiveConnections Should the server disconnect remote connections that have gone silent for more than Server Idle Timeout? float disconnectInactiveTimeout Timeout in seconds since last message from a client after which server will auto-disconnect. NetworkAuthenticator authenticator GameObject playerPrefab The default prefab to be used to create player objects on the server. bool autoCreatePlayer A flag to control whether or not player objects are automatically created on connect, and on scene change. PlayerSpawnMethod playerSpawnMethod The current method of spawning players used by the NetworkManager . List< GameObject > spawnPrefabs List of prefabs that will be registered with the spawning system. int numPlayers Number of active player objects across all connections on the server. bool isNetworkActive True if the server or client is started and running bool clientLoadedScene This is true if the client loaded a new scene when connecting to the server. UnityEngine.AsyncOperation loadingSceneAsync int startPositionIndex List< Transform > startPositions List of transforms populted by NetworkStartPosition components found in the scene. Protected Attributes Name Transport transport Public Functions Documentation function OnValidate inline virtual void OnValidate () virtual so that inheriting classes' OnValidate() can call base.OnValidate() too Reimplemented by : Mirror::NetworkRoomManager::OnValidate function Awake inline virtual void Awake () virtual so that inheriting classes' Awake() can call base.Awake() too function Start inline virtual void Start () virtual so that inheriting classes' Start() can call base.Start() too function LateUpdate inline virtual void LateUpdate () virtual so that inheriting classes' LateUpdate() can call base.LateUpdate() too function StartServer inline void StartServer () This starts a new server. function StartClient inline void StartClient () This starts a network client. It uses the networkAddress property as the address to connect to. This makes the newly created client connect to the server immediately. function StartClient inline void StartClient ( Uri uri ) This starts a network client. It uses the Uri parameter as the address to connect to. Parameters : uri location of the server to connect to This makes the newly created client connect to the server immediately. function StartHost inline void StartHost () This starts a network \"host\" - a server and client in the same application. The client returned from StartHost() is a special \"local\" client that communicates to the in-process server using a message queue instead of the real network. But in almost all other cases, it can be treated as a normal client. function StopHost inline void StopHost () This stops both the client and the server that the manager is using. function StopServer inline void StopServer () Stops the server that the manager is using. function StopClient inline void StopClient () Stops the client that the manager is using. function OnApplicationQuit inline virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor virtual so that inheriting classes' OnApplicationQuit() can call base.OnApplicationQuit() too function ConfigureServerFrameRate inline virtual void ConfigureServerFrameRate () Set the frame rate for a headless server. Override if you wish to disable the behavior or set your own tick rate. function OnDestroy inline virtual void OnDestroy () virtual so that inheriting classes' OnDestroy() can call base.OnDestroy() too function ServerChangeScene inline virtual void ServerChangeScene ( string newSceneName ) This causes the server to switch scenes and sets the networkSceneName. Parameters : newSceneName Reimplemented by : Mirror::NetworkRoomManager::ServerChangeScene Clients that connect to this server will automatically switch to this scene. This is called autmatically if onlineScene or offlineScene are set, but it can be called from user code to switch scenes again while the game is in progress. This automatically sets clients to be not-ready during the change and ready again to participate in the new scene. function GetStartPosition inline Transform GetStartPosition () This finds a spawn position based on NetworkStartPosition objects in the scene. Return : Returns the transform to spawn a player at, or null. This is used by the default implementation of OnServerAddPlayer. function OnServerConnect inline virtual void OnServerConnect ( NetworkConnection conn ) Called on the server when a new client connects. Parameters : conn Connection from client. Reimplemented by : Mirror::NetworkRoomManager::OnServerConnect Unity calls this on the Server when a Client connects to the Server. Use an override to tell the NetworkManager what to do when a client connects to the server. function OnServerDisconnect inline virtual void OnServerDisconnect ( NetworkConnection conn ) Called on the server when a client disconnects. Parameters : conn Connection from client. Reimplemented by : Mirror::NetworkRoomManager::OnServerDisconnect This is called on the Server when a Client disconnects from the Server. Use an override to decide what should happen when a disconnection is detected. function OnServerReady inline virtual void OnServerReady ( NetworkConnection conn ) Called on the server when a client is ready. Parameters : conn Connection from client. Reimplemented by : Mirror::NetworkRoomManager::OnServerReady The default implementation of this function calls NetworkServer.SetClientReady() to continue the network setup process. function OnServerAddPlayer inline virtual void OnServerAddPlayer ( NetworkConnection conn ) Called on the server when a client adds a new player with ClientScene.AddPlayer. Parameters : conn Connection from client. Reimplemented by : Mirror::NetworkRoomManager::OnServerAddPlayer The default implementation for this function creates a new player object from the playerPrefab. function OnServerError inline virtual void OnServerError ( NetworkConnection conn , int errorCode ) Called on the server when a network error occurs for a client connection. Parameters : conn Connection from client. errorCode Error code. function OnServerChangeScene inline virtual void OnServerChangeScene ( string newSceneName ) Called from ServerChangeScene immediately before SceneManager.LoadSceneAsync is executed Parameters : newSceneName Name of the scene that's about to be loaded This allows server to do work / cleanup / prep before the scene changes. function OnServerSceneChanged inline virtual void OnServerSceneChanged ( string sceneName ) Called on the server when a scene is completed loaded, when the scene load was initiated by the server with ServerChangeScene() . Parameters : sceneName The name of the new scene. Reimplemented by : Mirror::NetworkRoomManager::OnServerSceneChanged function OnClientConnect inline virtual void OnClientConnect ( NetworkConnection conn ) Called on the client when connected to a server. Parameters : conn Connection to the server. Reimplemented by : Mirror::NetworkRoomManager::OnClientConnect The default implementation of this function sets the client as ready and adds a player. Override the function to dictate what happens when the client connects. function OnClientDisconnect inline virtual void OnClientDisconnect ( NetworkConnection conn ) Called on clients when disconnected from a server. Parameters : conn Connection to the server. Reimplemented by : Mirror::NetworkRoomManager::OnClientDisconnect This is called on the client when it disconnects from the server. Override this function to decide what happens when the client disconnects. function OnClientError inline virtual void OnClientError ( NetworkConnection conn , int errorCode ) Called on clients when a network error occurs. Parameters : conn Connection to a server. errorCode Error code. function OnClientNotReady inline virtual void OnClientNotReady ( NetworkConnection conn ) Called on clients when a servers tells the client it is no longer ready. Parameters : conn Connection to the server. This is commonly used when switching scenes. function OnClientChangeScene inline virtual void OnClientChangeScene ( string newSceneName , SceneOperation sceneOperation , bool customHandling ) Called from ClientChangeScene immediately before SceneManager.LoadSceneAsync is executed Parameters : newSceneName Name of the scene that's about to be loaded sceneOperation Scene operation that's about to happen customHandling true to indicate that scene loading will be handled through overrides This allows client to do work / cleanup / prep before the scene changes. function OnClientSceneChanged inline virtual void OnClientSceneChanged ( NetworkConnection conn ) Called on clients when a scene has completed loaded, when the scene load was initiated by the server. Parameters : conn The network connection that the scene change message arrived on. Reimplemented by : Mirror::NetworkRoomManager::OnClientSceneChanged Scene changes can cause player objects to be destroyed. The default implementation of OnClientSceneChanged in the NetworkManager is to add a player object for the connection if no player object exists. function OnStartHost inline virtual void OnStartHost () This is invoked when a host is started. Reimplemented by : Mirror::NetworkRoomManager::OnStartHost StartHost has multiple signatures, but they all cause this hook to be called. function OnStartServer inline virtual void OnStartServer () This is invoked when a server is started - including when a host is started. Reimplemented by : Mirror::NetworkRoomManager::OnStartServer StartServer has multiple signatures, but they all cause this hook to be called. function OnStartClient inline virtual void OnStartClient () This is invoked when the client is started. Reimplemented by : Mirror::NetworkRoomManager::OnStartClient function OnStopServer inline virtual void OnStopServer () This is called when a server is stopped - including when a host is stopped. Reimplemented by : Mirror::NetworkRoomManager::OnStopServer function OnStopClient inline virtual void OnStopClient () This is called when a client is stopped. Reimplemented by : Mirror::NetworkRoomManager::OnStopClient function OnStopHost inline virtual void OnStopHost () This is called when a host is stopped. Reimplemented by : Mirror::NetworkRoomManager::OnStopHost function IsSceneActive static inline bool IsSceneActive ( string scene ) function Shutdown static inline void Shutdown () This is the only way to clear the singleton, so another instance can be created. function RegisterStartPosition static inline void RegisterStartPosition ( Transform start ) Registers the transform of a game object as a player spawn location. Parameters : start Transform to register. This is done automatically by NetworkStartPosition components, but can be done manually from user script code. function UnRegisterStartPosition static inline void UnRegisterStartPosition ( Transform start ) Unregisters the transform of a game object as a player spawn location. Parameters : start Transform to unregister. This is done automatically by the NetworkStartPosition component, but can be done manually from user code. Public Property Documentation property singleton static NetworkManager singleton ; NetworkManager singleton property mode NetworkManagerMode mode ; property networkSceneName static string networkSceneName ; The name of the current network scene. This is populated if the NetworkManager is doing scene management. Calls to ServerChangeScene() cause this to change. New clients that connect to a server will automatically load this scene. This is used to make sure that all scene changes are initialized by Mirror . Loading a scene manually wont set networkSceneName, so Mirror would still load it again on start. Public Attributes Documentation variable dontDestroyOnLoad bool dontDestroyOnLoad = true ; A flag to control whether the NetworkManager object is destroyed when the scene changes. This should be set if your game has a single NetworkManager that exists for the lifetime of the process. If there is a NetworkManager in each scene, then this should not be set. variable runInBackground bool runInBackground = true ; Controls whether the program runs when it is in the background. This is required when multiple instances of a program using networking are running on the same machine, such as when testing using localhost. But this is not recommended when deploying to mobile platforms. variable autoStartServerBuild bool autoStartServerBuild = true ; Automatically invoke StartServer() If the application is a Server Build, StartServer is automatically invoked. Server build is true when \"Server build\" is checked in build menu, or BuildOptions.EnableHeadlessMode flag is in BuildOptions variable showDebugMessages bool showDebugMessages ; Enables verbose debug messages in the console variable serverTickRate int serverTickRate = 30 ; Server Update frequency, per second. Use around 60Hz for fast paced games like Counter-Strike to minimize latency. Use around 30Hz for games like WoW to minimize computations. Use around 1-10Hz for slow paced games like EVE. variable offlineScene string offlineScene = \"\" ; The scene to switch to when offline. Setting this makes the NetworkManager do scene management. This scene will be switched to when a network session is completed - such as a client disconnect, or a server shutdown. variable onlineScene string onlineScene = \"\" ; The scene to switch to when online. Setting this makes the NetworkManager do scene management. This scene will be switched to when a network session is started - such as a client connect, or a server listen. variable networkAddress string networkAddress = \"localhost\" ; The network address currently in use. For clients, this is the address of the server that is connected to. For servers, this is the local address. variable maxConnections int maxConnections = 4 ; The maximum number of concurrent network connections to support. This effects the memory usage of the network layer. variable disconnectInactiveConnections bool disconnectInactiveConnections ; Should the server disconnect remote connections that have gone silent for more than Server Idle Timeout? variable disconnectInactiveTimeout float disconnectInactiveTimeout = 60f ; Timeout in seconds since last message from a client after which server will auto-disconnect. By default, clients send at least a Ping message every 2 seconds. The Host client is immune from idle timeout disconnection. Default value is 60 seconds. variable authenticator NetworkAuthenticator authenticator ; variable playerPrefab GameObject playerPrefab ; The default prefab to be used to create player objects on the server. Player objects are created in the default handler for AddPlayer() on the server. Implementing OnServerAddPlayer overrides this behaviour. variable autoCreatePlayer bool autoCreatePlayer = true ; A flag to control whether or not player objects are automatically created on connect, and on scene change. variable playerSpawnMethod PlayerSpawnMethod playerSpawnMethod ; The current method of spawning players used by the NetworkManager . variable spawnPrefabs List < GameObject > spawnPrefabs = new List < GameObject > (); List of prefabs that will be registered with the spawning system. For each of these prefabs, ClientScene.RegisterPrefab() will be automatically invoked. variable numPlayers int numPlayers => NetworkServer . connections . Count ( kv => kv . Value . identity != null ); Number of active player objects across all connections on the server. This is only valid on the host / server. variable isNetworkActive bool isNetworkActive ; True if the server or client is started and running This is set True in StartServer / StartClient, and set False in StopServer / StopClient variable clientLoadedScene bool clientLoadedScene ; This is true if the client loaded a new scene when connecting to the server. This is set before OnClientConnect is called, so it can be checked there to perform different logic if a scene load occurred. variable loadingSceneAsync static UnityEngine . AsyncOperation loadingSceneAsync = \"\" ; variable startPositionIndex static int startPositionIndex ; variable startPositions static List < Transform > startPositions = new List < Transform > (); List of transforms populted by NetworkStartPosition components found in the scene. Protected Attributes Documentation variable transport Transport transport ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkManager"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#mirrornetworkmanager","text":"Inherits from MonoBehaviour Inherited by NetworkRoomManager","title":"Mirror::NetworkManager"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#public-functions","text":"Name virtual void OnValidate () virtual so that inheriting classes' OnValidate() can call base.OnValidate() too virtual void Awake () virtual so that inheriting classes' Awake() can call base.Awake() too virtual void Start () virtual so that inheriting classes' Start() can call base.Start() too virtual void LateUpdate () virtual so that inheriting classes' LateUpdate() can call base.LateUpdate() too void StartServer () This starts a new server. void StartClient () This starts a network client. It uses the networkAddress property as the address to connect to. void StartClient (Uri uri) This starts a network client. It uses the Uri parameter as the address to connect to. void StartHost () This starts a network \"host\" - a server and client in the same application. void StopHost () This stops both the client and the server that the manager is using. void StopServer () Stops the server that the manager is using. void StopClient () Stops the client that the manager is using. virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor virtual void ConfigureServerFrameRate () Set the frame rate for a headless server. virtual void OnDestroy () virtual so that inheriting classes' OnDestroy() can call base.OnDestroy() too virtual void ServerChangeScene (string newSceneName) This causes the server to switch scenes and sets the networkSceneName. Transform GetStartPosition () This finds a spawn position based on NetworkStartPosition objects in the scene. virtual void OnServerConnect ( NetworkConnection conn) Called on the server when a new client connects. virtual void OnServerDisconnect ( NetworkConnection conn) Called on the server when a client disconnects. virtual void OnServerReady ( NetworkConnection conn) Called on the server when a client is ready. virtual void OnServerAddPlayer ( NetworkConnection conn) Called on the server when a client adds a new player with ClientScene.AddPlayer. virtual void OnServerError ( NetworkConnection conn, int errorCode) Called on the server when a network error occurs for a client connection. virtual void OnServerChangeScene (string newSceneName) Called from ServerChangeScene immediately before SceneManager.LoadSceneAsync is executed virtual void OnServerSceneChanged (string sceneName) Called on the server when a scene is completed loaded, when the scene load was initiated by the server with ServerChangeScene() . virtual void OnClientConnect ( NetworkConnection conn) Called on the client when connected to a server. virtual void OnClientDisconnect ( NetworkConnection conn) Called on clients when disconnected from a server. virtual void OnClientError ( NetworkConnection conn, int errorCode) Called on clients when a network error occurs. virtual void OnClientNotReady ( NetworkConnection conn) Called on clients when a servers tells the client it is no longer ready. virtual void OnClientChangeScene (string newSceneName, SceneOperation sceneOperation, bool customHandling) Called from ClientChangeScene immediately before SceneManager.LoadSceneAsync is executed virtual void OnClientSceneChanged ( NetworkConnection conn) Called on clients when a scene has completed loaded, when the scene load was initiated by the server. virtual void OnStartHost () This is invoked when a host is started. virtual void OnStartServer () This is invoked when a server is started - including when a host is started. virtual void OnStartClient () This is invoked when the client is started. virtual void OnStopServer () This is called when a server is stopped - including when a host is stopped. virtual void OnStopClient () This is called when a client is stopped. virtual void OnStopHost () This is called when a host is stopped. bool IsSceneActive (string scene) void Shutdown () This is the only way to clear the singleton, so another instance can be created. void RegisterStartPosition (Transform start) Registers the transform of a game object as a player spawn location. void UnRegisterStartPosition (Transform start) Unregisters the transform of a game object as a player spawn location.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#public-properties","text":"Name NetworkManager singleton NetworkManager singleton NetworkManagerMode mode string networkSceneName The name of the current network scene.","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#public-attributes","text":"Name bool dontDestroyOnLoad A flag to control whether the NetworkManager object is destroyed when the scene changes. bool runInBackground Controls whether the program runs when it is in the background. bool autoStartServerBuild Automatically invoke StartServer() bool showDebugMessages Enables verbose debug messages in the console int serverTickRate Server Update frequency, per second. Use around 60Hz for fast paced games like Counter-Strike to minimize latency. Use around 30Hz for games like WoW to minimize computations. Use around 1-10Hz for slow paced games like EVE. string offlineScene The scene to switch to when offline. string onlineScene The scene to switch to when online. string networkAddress The network address currently in use. int maxConnections The maximum number of concurrent network connections to support. bool disconnectInactiveConnections Should the server disconnect remote connections that have gone silent for more than Server Idle Timeout? float disconnectInactiveTimeout Timeout in seconds since last message from a client after which server will auto-disconnect. NetworkAuthenticator authenticator GameObject playerPrefab The default prefab to be used to create player objects on the server. bool autoCreatePlayer A flag to control whether or not player objects are automatically created on connect, and on scene change. PlayerSpawnMethod playerSpawnMethod The current method of spawning players used by the NetworkManager . List< GameObject > spawnPrefabs List of prefabs that will be registered with the spawning system. int numPlayers Number of active player objects across all connections on the server. bool isNetworkActive True if the server or client is started and running bool clientLoadedScene This is true if the client loaded a new scene when connecting to the server. UnityEngine.AsyncOperation loadingSceneAsync int startPositionIndex List< Transform > startPositions List of transforms populted by NetworkStartPosition components found in the scene.","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#protected-attributes","text":"Name Transport transport","title":"Protected Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onvalidate","text":"inline virtual void OnValidate () virtual so that inheriting classes' OnValidate() can call base.OnValidate() too Reimplemented by : Mirror::NetworkRoomManager::OnValidate","title":"function OnValidate"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-awake","text":"inline virtual void Awake () virtual so that inheriting classes' Awake() can call base.Awake() too","title":"function Awake"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-start","text":"inline virtual void Start () virtual so that inheriting classes' Start() can call base.Start() too","title":"function Start"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-lateupdate","text":"inline virtual void LateUpdate () virtual so that inheriting classes' LateUpdate() can call base.LateUpdate() too","title":"function LateUpdate"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-startserver","text":"inline void StartServer () This starts a new server.","title":"function StartServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-startclient","text":"inline void StartClient () This starts a network client. It uses the networkAddress property as the address to connect to. This makes the newly created client connect to the server immediately.","title":"function StartClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-startclient_1","text":"inline void StartClient ( Uri uri ) This starts a network client. It uses the Uri parameter as the address to connect to. Parameters : uri location of the server to connect to This makes the newly created client connect to the server immediately.","title":"function StartClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-starthost","text":"inline void StartHost () This starts a network \"host\" - a server and client in the same application. The client returned from StartHost() is a special \"local\" client that communicates to the in-process server using a message queue instead of the real network. But in almost all other cases, it can be treated as a normal client.","title":"function StartHost"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-stophost","text":"inline void StopHost () This stops both the client and the server that the manager is using.","title":"function StopHost"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-stopserver","text":"inline void StopServer () Stops the server that the manager is using.","title":"function StopServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-stopclient","text":"inline void StopClient () Stops the client that the manager is using.","title":"function StopClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onapplicationquit","text":"inline virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor virtual so that inheriting classes' OnApplicationQuit() can call base.OnApplicationQuit() too","title":"function OnApplicationQuit"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-configureserverframerate","text":"inline virtual void ConfigureServerFrameRate () Set the frame rate for a headless server. Override if you wish to disable the behavior or set your own tick rate.","title":"function ConfigureServerFrameRate"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-ondestroy","text":"inline virtual void OnDestroy () virtual so that inheriting classes' OnDestroy() can call base.OnDestroy() too","title":"function OnDestroy"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-serverchangescene","text":"inline virtual void ServerChangeScene ( string newSceneName ) This causes the server to switch scenes and sets the networkSceneName. Parameters : newSceneName Reimplemented by : Mirror::NetworkRoomManager::ServerChangeScene Clients that connect to this server will automatically switch to this scene. This is called autmatically if onlineScene or offlineScene are set, but it can be called from user code to switch scenes again while the game is in progress. This automatically sets clients to be not-ready during the change and ready again to participate in the new scene.","title":"function ServerChangeScene"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-getstartposition","text":"inline Transform GetStartPosition () This finds a spawn position based on NetworkStartPosition objects in the scene. Return : Returns the transform to spawn a player at, or null. This is used by the default implementation of OnServerAddPlayer.","title":"function GetStartPosition"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onserverconnect","text":"inline virtual void OnServerConnect ( NetworkConnection conn ) Called on the server when a new client connects. Parameters : conn Connection from client. Reimplemented by : Mirror::NetworkRoomManager::OnServerConnect Unity calls this on the Server when a Client connects to the Server. Use an override to tell the NetworkManager what to do when a client connects to the server.","title":"function OnServerConnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onserverdisconnect","text":"inline virtual void OnServerDisconnect ( NetworkConnection conn ) Called on the server when a client disconnects. Parameters : conn Connection from client. Reimplemented by : Mirror::NetworkRoomManager::OnServerDisconnect This is called on the Server when a Client disconnects from the Server. Use an override to decide what should happen when a disconnection is detected.","title":"function OnServerDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onserverready","text":"inline virtual void OnServerReady ( NetworkConnection conn ) Called on the server when a client is ready. Parameters : conn Connection from client. Reimplemented by : Mirror::NetworkRoomManager::OnServerReady The default implementation of this function calls NetworkServer.SetClientReady() to continue the network setup process.","title":"function OnServerReady"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onserveraddplayer","text":"inline virtual void OnServerAddPlayer ( NetworkConnection conn ) Called on the server when a client adds a new player with ClientScene.AddPlayer. Parameters : conn Connection from client. Reimplemented by : Mirror::NetworkRoomManager::OnServerAddPlayer The default implementation for this function creates a new player object from the playerPrefab.","title":"function OnServerAddPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onservererror","text":"inline virtual void OnServerError ( NetworkConnection conn , int errorCode ) Called on the server when a network error occurs for a client connection. Parameters : conn Connection from client. errorCode Error code.","title":"function OnServerError"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onserverchangescene","text":"inline virtual void OnServerChangeScene ( string newSceneName ) Called from ServerChangeScene immediately before SceneManager.LoadSceneAsync is executed Parameters : newSceneName Name of the scene that's about to be loaded This allows server to do work / cleanup / prep before the scene changes.","title":"function OnServerChangeScene"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onserverscenechanged","text":"inline virtual void OnServerSceneChanged ( string sceneName ) Called on the server when a scene is completed loaded, when the scene load was initiated by the server with ServerChangeScene() . Parameters : sceneName The name of the new scene. Reimplemented by : Mirror::NetworkRoomManager::OnServerSceneChanged","title":"function OnServerSceneChanged"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onclientconnect","text":"inline virtual void OnClientConnect ( NetworkConnection conn ) Called on the client when connected to a server. Parameters : conn Connection to the server. Reimplemented by : Mirror::NetworkRoomManager::OnClientConnect The default implementation of this function sets the client as ready and adds a player. Override the function to dictate what happens when the client connects.","title":"function OnClientConnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onclientdisconnect","text":"inline virtual void OnClientDisconnect ( NetworkConnection conn ) Called on clients when disconnected from a server. Parameters : conn Connection to the server. Reimplemented by : Mirror::NetworkRoomManager::OnClientDisconnect This is called on the client when it disconnects from the server. Override this function to decide what happens when the client disconnects.","title":"function OnClientDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onclienterror","text":"inline virtual void OnClientError ( NetworkConnection conn , int errorCode ) Called on clients when a network error occurs. Parameters : conn Connection to a server. errorCode Error code.","title":"function OnClientError"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onclientnotready","text":"inline virtual void OnClientNotReady ( NetworkConnection conn ) Called on clients when a servers tells the client it is no longer ready. Parameters : conn Connection to the server. This is commonly used when switching scenes.","title":"function OnClientNotReady"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onclientchangescene","text":"inline virtual void OnClientChangeScene ( string newSceneName , SceneOperation sceneOperation , bool customHandling ) Called from ClientChangeScene immediately before SceneManager.LoadSceneAsync is executed Parameters : newSceneName Name of the scene that's about to be loaded sceneOperation Scene operation that's about to happen customHandling true to indicate that scene loading will be handled through overrides This allows client to do work / cleanup / prep before the scene changes.","title":"function OnClientChangeScene"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onclientscenechanged","text":"inline virtual void OnClientSceneChanged ( NetworkConnection conn ) Called on clients when a scene has completed loaded, when the scene load was initiated by the server. Parameters : conn The network connection that the scene change message arrived on. Reimplemented by : Mirror::NetworkRoomManager::OnClientSceneChanged Scene changes can cause player objects to be destroyed. The default implementation of OnClientSceneChanged in the NetworkManager is to add a player object for the connection if no player object exists.","title":"function OnClientSceneChanged"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onstarthost","text":"inline virtual void OnStartHost () This is invoked when a host is started. Reimplemented by : Mirror::NetworkRoomManager::OnStartHost StartHost has multiple signatures, but they all cause this hook to be called.","title":"function OnStartHost"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onstartserver","text":"inline virtual void OnStartServer () This is invoked when a server is started - including when a host is started. Reimplemented by : Mirror::NetworkRoomManager::OnStartServer StartServer has multiple signatures, but they all cause this hook to be called.","title":"function OnStartServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onstartclient","text":"inline virtual void OnStartClient () This is invoked when the client is started. Reimplemented by : Mirror::NetworkRoomManager::OnStartClient","title":"function OnStartClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onstopserver","text":"inline virtual void OnStopServer () This is called when a server is stopped - including when a host is stopped. Reimplemented by : Mirror::NetworkRoomManager::OnStopServer","title":"function OnStopServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onstopclient","text":"inline virtual void OnStopClient () This is called when a client is stopped. Reimplemented by : Mirror::NetworkRoomManager::OnStopClient","title":"function OnStopClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-onstophost","text":"inline virtual void OnStopHost () This is called when a host is stopped. Reimplemented by : Mirror::NetworkRoomManager::OnStopHost","title":"function OnStopHost"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-issceneactive","text":"static inline bool IsSceneActive ( string scene )","title":"function IsSceneActive"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-shutdown","text":"static inline void Shutdown () This is the only way to clear the singleton, so another instance can be created.","title":"function Shutdown"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-registerstartposition","text":"static inline void RegisterStartPosition ( Transform start ) Registers the transform of a game object as a player spawn location. Parameters : start Transform to register. This is done automatically by NetworkStartPosition components, but can be done manually from user script code.","title":"function RegisterStartPosition"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#function-unregisterstartposition","text":"static inline void UnRegisterStartPosition ( Transform start ) Unregisters the transform of a game object as a player spawn location. Parameters : start Transform to unregister. This is done automatically by the NetworkStartPosition component, but can be done manually from user code.","title":"function UnRegisterStartPosition"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#property-singleton","text":"static NetworkManager singleton ; NetworkManager singleton","title":"property singleton"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#property-mode","text":"NetworkManagerMode mode ;","title":"property mode"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#property-networkscenename","text":"static string networkSceneName ; The name of the current network scene. This is populated if the NetworkManager is doing scene management. Calls to ServerChangeScene() cause this to change. New clients that connect to a server will automatically load this scene. This is used to make sure that all scene changes are initialized by Mirror . Loading a scene manually wont set networkSceneName, so Mirror would still load it again on start.","title":"property networkSceneName"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-dontdestroyonload","text":"bool dontDestroyOnLoad = true ; A flag to control whether the NetworkManager object is destroyed when the scene changes. This should be set if your game has a single NetworkManager that exists for the lifetime of the process. If there is a NetworkManager in each scene, then this should not be set.","title":"variable dontDestroyOnLoad"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-runinbackground","text":"bool runInBackground = true ; Controls whether the program runs when it is in the background. This is required when multiple instances of a program using networking are running on the same machine, such as when testing using localhost. But this is not recommended when deploying to mobile platforms.","title":"variable runInBackground"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-autostartserverbuild","text":"bool autoStartServerBuild = true ; Automatically invoke StartServer() If the application is a Server Build, StartServer is automatically invoked. Server build is true when \"Server build\" is checked in build menu, or BuildOptions.EnableHeadlessMode flag is in BuildOptions","title":"variable autoStartServerBuild"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-showdebugmessages","text":"bool showDebugMessages ; Enables verbose debug messages in the console","title":"variable showDebugMessages"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-servertickrate","text":"int serverTickRate = 30 ; Server Update frequency, per second. Use around 60Hz for fast paced games like Counter-Strike to minimize latency. Use around 30Hz for games like WoW to minimize computations. Use around 1-10Hz for slow paced games like EVE.","title":"variable serverTickRate"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-offlinescene","text":"string offlineScene = \"\" ; The scene to switch to when offline. Setting this makes the NetworkManager do scene management. This scene will be switched to when a network session is completed - such as a client disconnect, or a server shutdown.","title":"variable offlineScene"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-onlinescene","text":"string onlineScene = \"\" ; The scene to switch to when online. Setting this makes the NetworkManager do scene management. This scene will be switched to when a network session is started - such as a client connect, or a server listen.","title":"variable onlineScene"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-networkaddress","text":"string networkAddress = \"localhost\" ; The network address currently in use. For clients, this is the address of the server that is connected to. For servers, this is the local address.","title":"variable networkAddress"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-maxconnections","text":"int maxConnections = 4 ; The maximum number of concurrent network connections to support. This effects the memory usage of the network layer.","title":"variable maxConnections"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-disconnectinactiveconnections","text":"bool disconnectInactiveConnections ; Should the server disconnect remote connections that have gone silent for more than Server Idle Timeout?","title":"variable disconnectInactiveConnections"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-disconnectinactivetimeout","text":"float disconnectInactiveTimeout = 60f ; Timeout in seconds since last message from a client after which server will auto-disconnect. By default, clients send at least a Ping message every 2 seconds. The Host client is immune from idle timeout disconnection. Default value is 60 seconds.","title":"variable disconnectInactiveTimeout"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-authenticator","text":"NetworkAuthenticator authenticator ;","title":"variable authenticator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-playerprefab","text":"GameObject playerPrefab ; The default prefab to be used to create player objects on the server. Player objects are created in the default handler for AddPlayer() on the server. Implementing OnServerAddPlayer overrides this behaviour.","title":"variable playerPrefab"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-autocreateplayer","text":"bool autoCreatePlayer = true ; A flag to control whether or not player objects are automatically created on connect, and on scene change.","title":"variable autoCreatePlayer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-playerspawnmethod","text":"PlayerSpawnMethod playerSpawnMethod ; The current method of spawning players used by the NetworkManager .","title":"variable playerSpawnMethod"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-spawnprefabs","text":"List < GameObject > spawnPrefabs = new List < GameObject > (); List of prefabs that will be registered with the spawning system. For each of these prefabs, ClientScene.RegisterPrefab() will be automatically invoked.","title":"variable spawnPrefabs"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-numplayers","text":"int numPlayers => NetworkServer . connections . Count ( kv => kv . Value . identity != null ); Number of active player objects across all connections on the server. This is only valid on the host / server.","title":"variable numPlayers"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-isnetworkactive","text":"bool isNetworkActive ; True if the server or client is started and running This is set True in StartServer / StartClient, and set False in StopServer / StopClient","title":"variable isNetworkActive"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-clientloadedscene","text":"bool clientLoadedScene ; This is true if the client loaded a new scene when connecting to the server. This is set before OnClientConnect is called, so it can be checked there to perform different logic if a scene load occurred.","title":"variable clientLoadedScene"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-loadingsceneasync","text":"static UnityEngine . AsyncOperation loadingSceneAsync = \"\" ;","title":"variable loadingSceneAsync"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-startpositionindex","text":"static int startPositionIndex ;","title":"variable startPositionIndex"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-startpositions","text":"static List < Transform > startPositions = new List < Transform > (); List of transforms populted by NetworkStartPosition components found in the scene.","title":"variable startPositions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManager/#variable-transport","text":"Transport transport ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable transport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManagerEditor/","text":"Mirror::NetworkManagerEditor Inherits from Editor Public Functions Name override void OnInspectorGUI () Protected Functions Name void Init () Protected Attributes Name NetworkManager networkManager Public Functions Documentation function OnInspectorGUI inline override void OnInspectorGUI () Protected Functions Documentation function Init inline void Init () Protected Attributes Documentation variable networkManager NetworkManager networkManager ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkManagerEditor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManagerEditor/#mirrornetworkmanagereditor","text":"Inherits from Editor","title":"Mirror::NetworkManagerEditor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManagerEditor/#public-functions","text":"Name override void OnInspectorGUI ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManagerEditor/#protected-functions","text":"Name void Init ()","title":"Protected Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManagerEditor/#protected-attributes","text":"Name NetworkManager networkManager","title":"Protected Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManagerEditor/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManagerEditor/#function-oninspectorgui","text":"inline override void OnInspectorGUI ()","title":"function OnInspectorGUI"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManagerEditor/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManagerEditor/#function-init","text":"inline void Init ()","title":"function Init"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManagerEditor/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManagerEditor/#variable-networkmanager","text":"NetworkManager networkManager ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable networkManager"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManagerHUD/","text":"Mirror::NetworkManagerHUD An extension for the NetworkManager that displays a default HUD for controlling the network state of the game. More... Inherits from MonoBehaviour Public Attributes Name bool showGUI Whether to show the default control HUD at runtime. int offsetX The horizontal offset in pixels to draw the HUD runtime GUI at. int offsetY The vertical offset in pixels to draw the HUD runtime GUI at. Detailed Description class Mirror :: NetworkManagerHUD ; An extension for the NetworkManager that displays a default HUD for controlling the network state of the game. This component also shows useful internal state for the networking system in the inspector window of the editor. It allows users to view connections, networked objects, message handlers, and packet statistics. This information can be helpful when debugging networked games. Public Attributes Documentation variable showGUI bool showGUI = true ; Whether to show the default control HUD at runtime. variable offsetX int offsetX ; The horizontal offset in pixels to draw the HUD runtime GUI at. variable offsetY int offsetY ; The vertical offset in pixels to draw the HUD runtime GUI at. Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkManagerHUD"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManagerHUD/#mirrornetworkmanagerhud","text":"An extension for the NetworkManager that displays a default HUD for controlling the network state of the game. More... Inherits from MonoBehaviour","title":"Mirror::NetworkManagerHUD"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManagerHUD/#public-attributes","text":"Name bool showGUI Whether to show the default control HUD at runtime. int offsetX The horizontal offset in pixels to draw the HUD runtime GUI at. int offsetY The vertical offset in pixels to draw the HUD runtime GUI at.","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManagerHUD/#detailed-description","text":"class Mirror :: NetworkManagerHUD ; An extension for the NetworkManager that displays a default HUD for controlling the network state of the game. This component also shows useful internal state for the networking system in the inspector window of the editor. It allows users to view connections, networked objects, message handlers, and packet statistics. This information can be helpful when debugging networked games.","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManagerHUD/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManagerHUD/#variable-showgui","text":"bool showGUI = true ; Whether to show the default control HUD at runtime.","title":"variable showGUI"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManagerHUD/#variable-offsetx","text":"int offsetX ; The horizontal offset in pixels to draw the HUD runtime GUI at.","title":"variable offsetX"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkManagerHUD/#variable-offsety","text":"int offsetY ; The vertical offset in pixels to draw the HUD runtime GUI at. Updated on 29 January 2021 at 18:34:47 UTC","title":"variable offsetY"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkMatchChecker/","text":"Mirror::NetworkMatchChecker Component that controls visibility of networked objects based on match id. More... Inherits from NetworkVisibility , NetworkBehaviour , MonoBehaviour Public Functions Name virtual override void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual override void OnStopServer () Invoked on the server when the object is unspawned virtual override bool OnCheckObserver ( NetworkConnection conn) Callback used by the visibility system to determine if an observer (player) can see this object. virtual override void OnRebuildObservers (HashSet< NetworkConnection > observers, bool initialize) Callback used by the visibility system to (re)construct the set of observers that can see this object. Public Properties Name Guid matchId Set this to the same value on all networked objects that belong to a given match Public Attributes Name string currentMatchDebug Additional inherited members Public Functions inherited from NetworkVisibility Name virtual void OnSetHostVisibility (bool visible) Callback used by the visibility system for objects on a host. Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Detailed Description class Mirror :: NetworkMatchChecker ; Component that controls visibility of networked objects based on match id. Any object with this component on it will only be visible to other objects in the same match. This would be used to isolate players to their respective matches within a single game server instance. Public Functions Documentation function OnStartServer inline virtual override void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. Reimplements : Mirror::NetworkBehaviour::OnStartServer This could be triggered by NetworkServer.Listen() for objects in the scene, or by NetworkServer.Spawn() for objects that are dynamically created. This will be called for objects on a \"host\" as well as for object on a dedicated server. function OnStopServer inline virtual override void OnStopServer () Invoked on the server when the object is unspawned Reimplements : Mirror::NetworkBehaviour::OnStopServer Useful for saving object data in persistant storage function OnCheckObserver inline virtual override bool OnCheckObserver ( NetworkConnection conn ) Callback used by the visibility system to determine if an observer (player) can see this object. Parameters : conn Network connection of a player. Return : True if the player can see this object. Reimplements : Mirror::NetworkVisibility::OnCheckObserver If this function returns true, the network connection will be added as an observer. function OnRebuildObservers inline virtual override void OnRebuildObservers ( HashSet < NetworkConnection > observers , bool initialize ) Callback used by the visibility system to (re)construct the set of observers that can see this object. Parameters : observers The new set of observers for this object. initialize True if the set of observers is being built for the first time. Reimplements : Mirror::NetworkVisibility::OnRebuildObservers Implementations of this callback should add network connections of players that can see this object to the observers set. Public Property Documentation property matchId Guid matchId ; Set this to the same value on all networked objects that belong to a given match Public Attributes Documentation variable currentMatchDebug string currentMatchDebug ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkMatchChecker"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkMatchChecker/#mirrornetworkmatchchecker","text":"Component that controls visibility of networked objects based on match id. More... Inherits from NetworkVisibility , NetworkBehaviour , MonoBehaviour","title":"Mirror::NetworkMatchChecker"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkMatchChecker/#public-functions","text":"Name virtual override void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual override void OnStopServer () Invoked on the server when the object is unspawned virtual override bool OnCheckObserver ( NetworkConnection conn) Callback used by the visibility system to determine if an observer (player) can see this object. virtual override void OnRebuildObservers (HashSet< NetworkConnection > observers, bool initialize) Callback used by the visibility system to (re)construct the set of observers that can see this object.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkMatchChecker/#public-properties","text":"Name Guid matchId Set this to the same value on all networked objects that belong to a given match","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkMatchChecker/#public-attributes","text":"Name string currentMatchDebug","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkMatchChecker/#additional-inherited-members","text":"Public Functions inherited from NetworkVisibility Name virtual void OnSetHostVisibility (bool visible) Callback used by the visibility system for objects on a host. Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkMatchChecker/#detailed-description","text":"class Mirror :: NetworkMatchChecker ; Component that controls visibility of networked objects based on match id. Any object with this component on it will only be visible to other objects in the same match. This would be used to isolate players to their respective matches within a single game server instance.","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkMatchChecker/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkMatchChecker/#function-onstartserver","text":"inline virtual override void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. Reimplements : Mirror::NetworkBehaviour::OnStartServer This could be triggered by NetworkServer.Listen() for objects in the scene, or by NetworkServer.Spawn() for objects that are dynamically created. This will be called for objects on a \"host\" as well as for object on a dedicated server.","title":"function OnStartServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkMatchChecker/#function-onstopserver","text":"inline virtual override void OnStopServer () Invoked on the server when the object is unspawned Reimplements : Mirror::NetworkBehaviour::OnStopServer Useful for saving object data in persistant storage","title":"function OnStopServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkMatchChecker/#function-oncheckobserver","text":"inline virtual override bool OnCheckObserver ( NetworkConnection conn ) Callback used by the visibility system to determine if an observer (player) can see this object. Parameters : conn Network connection of a player. Return : True if the player can see this object. Reimplements : Mirror::NetworkVisibility::OnCheckObserver If this function returns true, the network connection will be added as an observer.","title":"function OnCheckObserver"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkMatchChecker/#function-onrebuildobservers","text":"inline virtual override void OnRebuildObservers ( HashSet < NetworkConnection > observers , bool initialize ) Callback used by the visibility system to (re)construct the set of observers that can see this object. Parameters : observers The new set of observers for this object. initialize True if the set of observers is being built for the first time. Reimplements : Mirror::NetworkVisibility::OnRebuildObservers Implementations of this callback should add network connections of players that can see this object to the observers set.","title":"function OnRebuildObservers"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkMatchChecker/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkMatchChecker/#property-matchid","text":"Guid matchId ; Set this to the same value on all networked objects that belong to a given match","title":"property matchId"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkMatchChecker/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkMatchChecker/#variable-currentmatchdebug","text":"string currentMatchDebug ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable currentMatchDebug"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkOwnerChecker/","text":"Mirror::NetworkOwnerChecker Component that limits visibility of networked objects to the authority client. More... Inherits from NetworkVisibility , NetworkBehaviour , MonoBehaviour Public Functions Name virtual override bool OnCheckObserver ( NetworkConnection conn) Callback used by the visibility system to determine if an observer (player) can see this object. virtual override void OnRebuildObservers (HashSet< NetworkConnection > observers, bool initialize) Callback used by the visibility system to (re)construct the set of observers that can see this object. Additional inherited members Public Functions inherited from NetworkVisibility Name virtual void OnSetHostVisibility (bool visible) Callback used by the visibility system for objects on a host. Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Detailed Description class Mirror :: NetworkOwnerChecker ; Component that limits visibility of networked objects to the authority client. Any object with this component on it will only be visible to the client that has been assigned authority for it. This would be used for spawning a non-player networked object for single client to interact with, e.g. in-game puzzles. Public Functions Documentation function OnCheckObserver inline virtual override bool OnCheckObserver ( NetworkConnection conn ) Callback used by the visibility system to determine if an observer (player) can see this object. Parameters : conn Network connection of a player. Return : True if the client is the owner of this object. Reimplements : Mirror::NetworkVisibility::OnCheckObserver If this function returns true, the network connection will be added as an observer. function OnRebuildObservers inline virtual override void OnRebuildObservers ( HashSet < NetworkConnection > observers , bool initialize ) Callback used by the visibility system to (re)construct the set of observers that can see this object. Parameters : observers The new set of observers for this object. initialize True if the set of observers is being built for the first time. Reimplements : Mirror::NetworkVisibility::OnRebuildObservers Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkOwnerChecker"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkOwnerChecker/#mirrornetworkownerchecker","text":"Component that limits visibility of networked objects to the authority client. More... Inherits from NetworkVisibility , NetworkBehaviour , MonoBehaviour","title":"Mirror::NetworkOwnerChecker"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkOwnerChecker/#public-functions","text":"Name virtual override bool OnCheckObserver ( NetworkConnection conn) Callback used by the visibility system to determine if an observer (player) can see this object. virtual override void OnRebuildObservers (HashSet< NetworkConnection > observers, bool initialize) Callback used by the visibility system to (re)construct the set of observers that can see this object.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkOwnerChecker/#additional-inherited-members","text":"Public Functions inherited from NetworkVisibility Name virtual void OnSetHostVisibility (bool visible) Callback used by the visibility system for objects on a host. Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkOwnerChecker/#detailed-description","text":"class Mirror :: NetworkOwnerChecker ; Component that limits visibility of networked objects to the authority client. Any object with this component on it will only be visible to the client that has been assigned authority for it. This would be used for spawning a non-player networked object for single client to interact with, e.g. in-game puzzles.","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkOwnerChecker/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkOwnerChecker/#function-oncheckobserver","text":"inline virtual override bool OnCheckObserver ( NetworkConnection conn ) Callback used by the visibility system to determine if an observer (player) can see this object. Parameters : conn Network connection of a player. Return : True if the client is the owner of this object. Reimplements : Mirror::NetworkVisibility::OnCheckObserver If this function returns true, the network connection will be added as an observer.","title":"function OnCheckObserver"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkOwnerChecker/#function-onrebuildobservers","text":"inline virtual override void OnRebuildObservers ( HashSet < NetworkConnection > observers , bool initialize ) Callback used by the visibility system to (re)construct the set of observers that can see this object. Parameters : observers The new set of observers for this object. initialize True if the set of observers is being built for the first time. Reimplements : Mirror::NetworkVisibility::OnRebuildObservers Updated on 29 January 2021 at 18:34:47 UTC","title":"function OnRebuildObservers"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkPingDisplay/","text":"Mirror::NetworkPingDisplay Component that will display the clients ping in milliseconds Inherits from MonoBehaviour Public Attributes Name bool showPing bool showRoundTripTime Vector2 position int fontSize Color textColor string format Public Attributes Documentation variable showPing bool showPing = true ; variable showRoundTripTime bool showRoundTripTime = true ; variable position Vector2 position = new Vector2 ( 200 , 0 ); variable fontSize int fontSize = 24 ; variable textColor Color textColor = new Color32 ( 255 , 255 , 255 , 80 ); variable format string format = \"{0}ms\" ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkPingDisplay"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkPingDisplay/#mirrornetworkpingdisplay","text":"Component that will display the clients ping in milliseconds Inherits from MonoBehaviour","title":"Mirror::NetworkPingDisplay"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkPingDisplay/#public-attributes","text":"Name bool showPing bool showRoundTripTime Vector2 position int fontSize Color textColor string format","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkPingDisplay/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkPingDisplay/#variable-showping","text":"bool showPing = true ;","title":"variable showPing"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkPingDisplay/#variable-showroundtriptime","text":"bool showRoundTripTime = true ;","title":"variable showRoundTripTime"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkPingDisplay/#variable-position","text":"Vector2 position = new Vector2 ( 200 , 0 );","title":"variable position"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkPingDisplay/#variable-fontsize","text":"int fontSize = 24 ;","title":"variable fontSize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkPingDisplay/#variable-textcolor","text":"Color textColor = new Color32 ( 255 , 255 , 255 , 80 );","title":"variable textColor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkPingDisplay/#variable-format","text":"string format = \"{0}ms\" ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable format"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkProximityChecker/","text":"Mirror::NetworkProximityChecker Component that controls visibility of networked objects for players. More... Inherits from NetworkVisibility , NetworkBehaviour , MonoBehaviour Public Functions Name virtual override void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual override void OnStopServer () Invoked on the server when the object is unspawned virtual override bool OnCheckObserver ( NetworkConnection conn) Callback used by the visibility system to determine if an observer (player) can see this object. virtual override void OnRebuildObservers (HashSet< NetworkConnection > observers, bool initialize) Callback used by the visibility system to (re)construct the set of observers that can see this object. Public Attributes Name int visRange The maximim range that objects will be visible at. float visUpdateInterval How often (in seconds) that this object should update the list of observers that can see it. bool forceHidden Flag to force this object to be hidden for players. Additional inherited members Public Functions inherited from NetworkVisibility Name virtual void OnSetHostVisibility (bool visible) Callback used by the visibility system for objects on a host. Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Detailed Description class Mirror :: NetworkProximityChecker ; Component that controls visibility of networked objects for players. Any object with this component on it will not be visible to players more than a (configurable) distance away. Public Functions Documentation function OnStartServer inline virtual override void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. Reimplements : Mirror::NetworkBehaviour::OnStartServer This could be triggered by NetworkServer.Listen() for objects in the scene, or by NetworkServer.Spawn() for objects that are dynamically created. This will be called for objects on a \"host\" as well as for object on a dedicated server. function OnStopServer inline virtual override void OnStopServer () Invoked on the server when the object is unspawned Reimplements : Mirror::NetworkBehaviour::OnStopServer Useful for saving object data in persistant storage function OnCheckObserver inline virtual override bool OnCheckObserver ( NetworkConnection conn ) Callback used by the visibility system to determine if an observer (player) can see this object. Parameters : conn Network connection of a player. Return : True if the player can see this object. Reimplements : Mirror::NetworkVisibility::OnCheckObserver If this function returns true, the network connection will be added as an observer. function OnRebuildObservers inline virtual override void OnRebuildObservers ( HashSet < NetworkConnection > observers , bool initialize ) Callback used by the visibility system to (re)construct the set of observers that can see this object. Parameters : observers The new set of observers for this object. initialize True if the set of observers is being built for the first time. Reimplements : Mirror::NetworkVisibility::OnRebuildObservers Implementations of this callback should add network connections of players that can see this object to the observers set. Public Attributes Documentation variable visRange int visRange = 10 ; The maximim range that objects will be visible at. variable visUpdateInterval float visUpdateInterval = 1 ; How often (in seconds) that this object should update the list of observers that can see it. variable forceHidden bool forceHidden ; Flag to force this object to be hidden for players. If this object is a player object, it will not be hidden for that player. Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkProximityChecker"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkProximityChecker/#mirrornetworkproximitychecker","text":"Component that controls visibility of networked objects for players. More... Inherits from NetworkVisibility , NetworkBehaviour , MonoBehaviour","title":"Mirror::NetworkProximityChecker"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkProximityChecker/#public-functions","text":"Name virtual override void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual override void OnStopServer () Invoked on the server when the object is unspawned virtual override bool OnCheckObserver ( NetworkConnection conn) Callback used by the visibility system to determine if an observer (player) can see this object. virtual override void OnRebuildObservers (HashSet< NetworkConnection > observers, bool initialize) Callback used by the visibility system to (re)construct the set of observers that can see this object.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkProximityChecker/#public-attributes","text":"Name int visRange The maximim range that objects will be visible at. float visUpdateInterval How often (in seconds) that this object should update the list of observers that can see it. bool forceHidden Flag to force this object to be hidden for players.","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkProximityChecker/#additional-inherited-members","text":"Public Functions inherited from NetworkVisibility Name virtual void OnSetHostVisibility (bool visible) Callback used by the visibility system for objects on a host. Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkProximityChecker/#detailed-description","text":"class Mirror :: NetworkProximityChecker ; Component that controls visibility of networked objects for players. Any object with this component on it will not be visible to players more than a (configurable) distance away.","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkProximityChecker/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkProximityChecker/#function-onstartserver","text":"inline virtual override void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. Reimplements : Mirror::NetworkBehaviour::OnStartServer This could be triggered by NetworkServer.Listen() for objects in the scene, or by NetworkServer.Spawn() for objects that are dynamically created. This will be called for objects on a \"host\" as well as for object on a dedicated server.","title":"function OnStartServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkProximityChecker/#function-onstopserver","text":"inline virtual override void OnStopServer () Invoked on the server when the object is unspawned Reimplements : Mirror::NetworkBehaviour::OnStopServer Useful for saving object data in persistant storage","title":"function OnStopServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkProximityChecker/#function-oncheckobserver","text":"inline virtual override bool OnCheckObserver ( NetworkConnection conn ) Callback used by the visibility system to determine if an observer (player) can see this object. Parameters : conn Network connection of a player. Return : True if the player can see this object. Reimplements : Mirror::NetworkVisibility::OnCheckObserver If this function returns true, the network connection will be added as an observer.","title":"function OnCheckObserver"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkProximityChecker/#function-onrebuildobservers","text":"inline virtual override void OnRebuildObservers ( HashSet < NetworkConnection > observers , bool initialize ) Callback used by the visibility system to (re)construct the set of observers that can see this object. Parameters : observers The new set of observers for this object. initialize True if the set of observers is being built for the first time. Reimplements : Mirror::NetworkVisibility::OnRebuildObservers Implementations of this callback should add network connections of players that can see this object to the observers set.","title":"function OnRebuildObservers"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkProximityChecker/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkProximityChecker/#variable-visrange","text":"int visRange = 10 ; The maximim range that objects will be visible at.","title":"variable visRange"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkProximityChecker/#variable-visupdateinterval","text":"float visUpdateInterval = 1 ; How often (in seconds) that this object should update the list of observers that can see it.","title":"variable visUpdateInterval"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkProximityChecker/#variable-forcehidden","text":"bool forceHidden ; Flag to force this object to be hidden for players. If this object is a player object, it will not be hidden for that player. Updated on 29 January 2021 at 18:34:47 UTC","title":"variable forceHidden"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReader/","text":"Mirror::NetworkReader Binary stream Reader. Supports simple types, buffers, arrays, structs, and nested types More... Inherited by PooledNetworkReader Public Functions Name NetworkReader (byte [] bytes) NetworkReader (ArraySegment< byte > segment) byte ReadByte () byte [] ReadBytes (byte [] bytes, int count) read bytes into bytes ArraySegment< byte > ReadBytesSegment (int count) Create Segment from current position override string ToString () Information about reader: pos, len, buffer contents T Read< T > () Reads any data type that mirror supports Public Attributes Name int Position Next position to read from the buffer int Length Total number of bytes to read from buffer Detailed Description class Mirror :: NetworkReader ; Binary stream Reader. Supports simple types, buffers, arrays, structs, and nested types Use [NetworkReaderPool.GetReader] to reduce memory allocation Note: This class is intended to be extremely pedantic, and throw exceptions whenever stuff is going slightly wrong. The exceptions will be handled in NetworkServer/NetworkClient. Public Functions Documentation function NetworkReader inline NetworkReader ( byte [] bytes ) function NetworkReader inline NetworkReader ( ArraySegment < byte > segment ) function ReadByte inline byte ReadByte () function ReadBytes inline byte [] ReadBytes ( byte [] bytes , int count ) read bytes into bytes Return : bytes function ReadBytesSegment inline ArraySegment < byte > ReadBytesSegment ( int count ) Create Segment from current position Useful to parse payloads etc. without allocating function ToString inline override string ToString () Information about reader: pos, len, buffer contents function Read< T > inline T Read < T > () Reads any data type that mirror supports Template Parameters : T Return : Public Attributes Documentation variable Position int Position ; Next position to read from the buffer variable Length int Length => buffer . Count ; Total number of bytes to read from buffer Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkReader"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReader/#mirrornetworkreader","text":"Binary stream Reader. Supports simple types, buffers, arrays, structs, and nested types More... Inherited by PooledNetworkReader","title":"Mirror::NetworkReader"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReader/#public-functions","text":"Name NetworkReader (byte [] bytes) NetworkReader (ArraySegment< byte > segment) byte ReadByte () byte [] ReadBytes (byte [] bytes, int count) read bytes into bytes ArraySegment< byte > ReadBytesSegment (int count) Create Segment from current position override string ToString () Information about reader: pos, len, buffer contents T Read< T > () Reads any data type that mirror supports","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReader/#public-attributes","text":"Name int Position Next position to read from the buffer int Length Total number of bytes to read from buffer","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReader/#detailed-description","text":"class Mirror :: NetworkReader ; Binary stream Reader. Supports simple types, buffers, arrays, structs, and nested types Use [NetworkReaderPool.GetReader] to reduce memory allocation Note: This class is intended to be extremely pedantic, and throw exceptions whenever stuff is going slightly wrong. The exceptions will be handled in NetworkServer/NetworkClient.","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReader/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReader/#function-networkreader","text":"inline NetworkReader ( byte [] bytes )","title":"function NetworkReader"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReader/#function-networkreader_1","text":"inline NetworkReader ( ArraySegment < byte > segment )","title":"function NetworkReader"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReader/#function-readbyte","text":"inline byte ReadByte ()","title":"function ReadByte"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReader/#function-readbytes","text":"inline byte [] ReadBytes ( byte [] bytes , int count ) read bytes into bytes Return : bytes","title":"function ReadBytes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReader/#function-readbytessegment","text":"inline ArraySegment < byte > ReadBytesSegment ( int count ) Create Segment from current position Useful to parse payloads etc. without allocating","title":"function ReadBytesSegment"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReader/#function-tostring","text":"inline override string ToString () Information about reader: pos, len, buffer contents","title":"function ToString"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReader/#function-read-t","text":"inline T Read < T > () Reads any data type that mirror supports Template Parameters : T Return :","title":"function Read&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReader/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReader/#variable-position","text":"int Position ; Next position to read from the buffer","title":"variable Position"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReader/#variable-length","text":"int Length => buffer . Count ; Total number of bytes to read from buffer Updated on 29 January 2021 at 18:34:47 UTC","title":"variable Length"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/","text":"Mirror::NetworkReaderExtensions Public Functions Name byte ReadByte (this NetworkReader reader) sbyte ReadSByte (this NetworkReader reader) char ReadChar (this NetworkReader reader) bool ReadBoolean (this NetworkReader reader) short ReadInt16 (this NetworkReader reader) ushort ReadUInt16 (this NetworkReader reader) int ReadInt32 (this NetworkReader reader) uint ReadUInt32 (this NetworkReader reader) long ReadInt64 (this NetworkReader reader) ulong ReadUInt64 (this NetworkReader reader) float ReadSingle (this NetworkReader reader) double ReadDouble (this NetworkReader reader) decimal ReadDecimal (this NetworkReader reader) string ReadString (this NetworkReader reader) T:System.ArgumentExceptionif an invalid utf8 string is sent byte [] ReadBytesAndSize (this NetworkReader reader) T:OverflowExceptionif count is invalid ArraySegment< byte > ReadBytesAndSizeSegment (this NetworkReader reader) T:OverflowExceptionif count is invalid Vector2 ReadVector2 (this NetworkReader reader) Vector3 ReadVector3 (this NetworkReader reader) Vector4 ReadVector4 (this NetworkReader reader) Vector2Int ReadVector2Int (this NetworkReader reader) Vector3Int ReadVector3Int (this NetworkReader reader) Color ReadColor (this NetworkReader reader) Color32 ReadColor32 (this NetworkReader reader) Quaternion ReadQuaternion (this NetworkReader reader) Rect ReadRect (this NetworkReader reader) Plane ReadPlane (this NetworkReader reader) Ray ReadRay (this NetworkReader reader) Matrix4x4 ReadMatrix4x4 (this NetworkReader reader) byte [] ReadBytes (this NetworkReader reader, int count) Guid ReadGuid (this NetworkReader reader) Transform ReadTransform (this NetworkReader reader) GameObject ReadGameObject (this NetworkReader reader) NetworkIdentity ReadNetworkIdentity (this NetworkReader reader) NetworkBehaviour ReadNetworkBehaviour (this NetworkReader reader) T ReadNetworkBehaviour< T > (this NetworkReader reader) NetworkBehaviour.NetworkBehaviourSyncVar ReadNetworkBehaviourSyncVar (this NetworkReader reader) List< T > ReadList< T > (this NetworkReader reader) T [] ReadArray< T > (this NetworkReader reader) Uri ReadUri (this NetworkReader reader) Public Functions Documentation function ReadByte static byte ReadByte ( this NetworkReader reader ) function ReadSByte static sbyte ReadSByte ( this NetworkReader reader ) function ReadChar static char ReadChar ( this NetworkReader reader ) function ReadBoolean static bool ReadBoolean ( this NetworkReader reader ) function ReadInt16 static short ReadInt16 ( this NetworkReader reader ) function ReadUInt16 static inline ushort ReadUInt16 ( this NetworkReader reader ) function ReadInt32 static int ReadInt32 ( this NetworkReader reader ) function ReadUInt32 static inline uint ReadUInt32 ( this NetworkReader reader ) function ReadInt64 static long ReadInt64 ( this NetworkReader reader ) function ReadUInt64 static inline ulong ReadUInt64 ( this NetworkReader reader ) function ReadSingle static inline float ReadSingle ( this NetworkReader reader ) function ReadDouble static inline double ReadDouble ( this NetworkReader reader ) function ReadDecimal static inline decimal ReadDecimal ( this NetworkReader reader ) function ReadString static inline string ReadString ( this NetworkReader reader ) T:System.ArgumentExceptionif an invalid utf8 string is sent function ReadBytesAndSize static inline byte [] ReadBytesAndSize ( this NetworkReader reader ) T:OverflowExceptionif count is invalid function ReadBytesAndSizeSegment static inline ArraySegment < byte > ReadBytesAndSizeSegment ( this NetworkReader reader ) T:OverflowExceptionif count is invalid function ReadVector2 static Vector2 ReadVector2 ( this NetworkReader reader ) function ReadVector3 static Vector3 ReadVector3 ( this NetworkReader reader ) function ReadVector4 static Vector4 ReadVector4 ( this NetworkReader reader ) function ReadVector2Int static Vector2Int ReadVector2Int ( this NetworkReader reader ) function ReadVector3Int static Vector3Int ReadVector3Int ( this NetworkReader reader ) function ReadColor static Color ReadColor ( this NetworkReader reader ) function ReadColor32 static Color32 ReadColor32 ( this NetworkReader reader ) function ReadQuaternion static Quaternion ReadQuaternion ( this NetworkReader reader ) function ReadRect static Rect ReadRect ( this NetworkReader reader ) function ReadPlane static Plane ReadPlane ( this NetworkReader reader ) function ReadRay static Ray ReadRay ( this NetworkReader reader ) function ReadMatrix4x4 static inline Matrix4x4 ReadMatrix4x4 ( this NetworkReader reader ) function ReadBytes static inline byte [] ReadBytes ( this NetworkReader reader , int count ) function ReadGuid static Guid ReadGuid ( this NetworkReader reader ) function ReadTransform static inline Transform ReadTransform ( this NetworkReader reader ) function ReadGameObject static inline GameObject ReadGameObject ( this NetworkReader reader ) function ReadNetworkIdentity static inline NetworkIdentity ReadNetworkIdentity ( this NetworkReader reader ) function ReadNetworkBehaviour static inline NetworkBehaviour ReadNetworkBehaviour ( this NetworkReader reader ) function ReadNetworkBehaviour< T > static inline T ReadNetworkBehaviour < T > ( this NetworkReader reader ) function ReadNetworkBehaviourSyncVar static inline NetworkBehaviour . NetworkBehaviourSyncVar ReadNetworkBehaviourSyncVar ( this NetworkReader reader ) function ReadList< T > static inline List < T > ReadList < T > ( this NetworkReader reader ) function ReadArray< T > static inline T [] ReadArray < T > ( this NetworkReader reader ) function ReadUri static inline Uri ReadUri ( this NetworkReader reader ) Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkReaderExtensions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#mirrornetworkreaderextensions","text":"","title":"Mirror::NetworkReaderExtensions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#public-functions","text":"Name byte ReadByte (this NetworkReader reader) sbyte ReadSByte (this NetworkReader reader) char ReadChar (this NetworkReader reader) bool ReadBoolean (this NetworkReader reader) short ReadInt16 (this NetworkReader reader) ushort ReadUInt16 (this NetworkReader reader) int ReadInt32 (this NetworkReader reader) uint ReadUInt32 (this NetworkReader reader) long ReadInt64 (this NetworkReader reader) ulong ReadUInt64 (this NetworkReader reader) float ReadSingle (this NetworkReader reader) double ReadDouble (this NetworkReader reader) decimal ReadDecimal (this NetworkReader reader) string ReadString (this NetworkReader reader) T:System.ArgumentExceptionif an invalid utf8 string is sent byte [] ReadBytesAndSize (this NetworkReader reader) T:OverflowExceptionif count is invalid ArraySegment< byte > ReadBytesAndSizeSegment (this NetworkReader reader) T:OverflowExceptionif count is invalid Vector2 ReadVector2 (this NetworkReader reader) Vector3 ReadVector3 (this NetworkReader reader) Vector4 ReadVector4 (this NetworkReader reader) Vector2Int ReadVector2Int (this NetworkReader reader) Vector3Int ReadVector3Int (this NetworkReader reader) Color ReadColor (this NetworkReader reader) Color32 ReadColor32 (this NetworkReader reader) Quaternion ReadQuaternion (this NetworkReader reader) Rect ReadRect (this NetworkReader reader) Plane ReadPlane (this NetworkReader reader) Ray ReadRay (this NetworkReader reader) Matrix4x4 ReadMatrix4x4 (this NetworkReader reader) byte [] ReadBytes (this NetworkReader reader, int count) Guid ReadGuid (this NetworkReader reader) Transform ReadTransform (this NetworkReader reader) GameObject ReadGameObject (this NetworkReader reader) NetworkIdentity ReadNetworkIdentity (this NetworkReader reader) NetworkBehaviour ReadNetworkBehaviour (this NetworkReader reader) T ReadNetworkBehaviour< T > (this NetworkReader reader) NetworkBehaviour.NetworkBehaviourSyncVar ReadNetworkBehaviourSyncVar (this NetworkReader reader) List< T > ReadList< T > (this NetworkReader reader) T [] ReadArray< T > (this NetworkReader reader) Uri ReadUri (this NetworkReader reader)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readbyte","text":"static byte ReadByte ( this NetworkReader reader )","title":"function ReadByte"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readsbyte","text":"static sbyte ReadSByte ( this NetworkReader reader )","title":"function ReadSByte"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readchar","text":"static char ReadChar ( this NetworkReader reader )","title":"function ReadChar"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readboolean","text":"static bool ReadBoolean ( this NetworkReader reader )","title":"function ReadBoolean"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readint16","text":"static short ReadInt16 ( this NetworkReader reader )","title":"function ReadInt16"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readuint16","text":"static inline ushort ReadUInt16 ( this NetworkReader reader )","title":"function ReadUInt16"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readint32","text":"static int ReadInt32 ( this NetworkReader reader )","title":"function ReadInt32"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readuint32","text":"static inline uint ReadUInt32 ( this NetworkReader reader )","title":"function ReadUInt32"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readint64","text":"static long ReadInt64 ( this NetworkReader reader )","title":"function ReadInt64"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readuint64","text":"static inline ulong ReadUInt64 ( this NetworkReader reader )","title":"function ReadUInt64"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readsingle","text":"static inline float ReadSingle ( this NetworkReader reader )","title":"function ReadSingle"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readdouble","text":"static inline double ReadDouble ( this NetworkReader reader )","title":"function ReadDouble"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readdecimal","text":"static inline decimal ReadDecimal ( this NetworkReader reader )","title":"function ReadDecimal"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readstring","text":"static inline string ReadString ( this NetworkReader reader ) T:System.ArgumentExceptionif an invalid utf8 string is sent","title":"function ReadString"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readbytesandsize","text":"static inline byte [] ReadBytesAndSize ( this NetworkReader reader ) T:OverflowExceptionif count is invalid","title":"function ReadBytesAndSize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readbytesandsizesegment","text":"static inline ArraySegment < byte > ReadBytesAndSizeSegment ( this NetworkReader reader ) T:OverflowExceptionif count is invalid","title":"function ReadBytesAndSizeSegment"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readvector2","text":"static Vector2 ReadVector2 ( this NetworkReader reader )","title":"function ReadVector2"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readvector3","text":"static Vector3 ReadVector3 ( this NetworkReader reader )","title":"function ReadVector3"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readvector4","text":"static Vector4 ReadVector4 ( this NetworkReader reader )","title":"function ReadVector4"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readvector2int","text":"static Vector2Int ReadVector2Int ( this NetworkReader reader )","title":"function ReadVector2Int"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readvector3int","text":"static Vector3Int ReadVector3Int ( this NetworkReader reader )","title":"function ReadVector3Int"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readcolor","text":"static Color ReadColor ( this NetworkReader reader )","title":"function ReadColor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readcolor32","text":"static Color32 ReadColor32 ( this NetworkReader reader )","title":"function ReadColor32"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readquaternion","text":"static Quaternion ReadQuaternion ( this NetworkReader reader )","title":"function ReadQuaternion"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readrect","text":"static Rect ReadRect ( this NetworkReader reader )","title":"function ReadRect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readplane","text":"static Plane ReadPlane ( this NetworkReader reader )","title":"function ReadPlane"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readray","text":"static Ray ReadRay ( this NetworkReader reader )","title":"function ReadRay"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readmatrix4x4","text":"static inline Matrix4x4 ReadMatrix4x4 ( this NetworkReader reader )","title":"function ReadMatrix4x4"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readbytes","text":"static inline byte [] ReadBytes ( this NetworkReader reader , int count )","title":"function ReadBytes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readguid","text":"static Guid ReadGuid ( this NetworkReader reader )","title":"function ReadGuid"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readtransform","text":"static inline Transform ReadTransform ( this NetworkReader reader )","title":"function ReadTransform"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readgameobject","text":"static inline GameObject ReadGameObject ( this NetworkReader reader )","title":"function ReadGameObject"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readnetworkidentity","text":"static inline NetworkIdentity ReadNetworkIdentity ( this NetworkReader reader )","title":"function ReadNetworkIdentity"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readnetworkbehaviour","text":"static inline NetworkBehaviour ReadNetworkBehaviour ( this NetworkReader reader )","title":"function ReadNetworkBehaviour"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readnetworkbehaviour-t","text":"static inline T ReadNetworkBehaviour < T > ( this NetworkReader reader )","title":"function ReadNetworkBehaviour&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readnetworkbehavioursyncvar","text":"static inline NetworkBehaviour . NetworkBehaviourSyncVar ReadNetworkBehaviourSyncVar ( this NetworkReader reader )","title":"function ReadNetworkBehaviourSyncVar"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readlist-t","text":"static inline List < T > ReadList < T > ( this NetworkReader reader )","title":"function ReadList&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readarray-t","text":"static inline T [] ReadArray < T > ( this NetworkReader reader )","title":"function ReadArray&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderExtensions/#function-readuri","text":"static inline Uri ReadUri ( this NetworkReader reader ) Updated on 29 January 2021 at 18:34:47 UTC","title":"function ReadUri"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderPool/","text":"Mirror::NetworkReaderPool Pool of NetworkReaders More... Public Functions Name PooledNetworkReader GetReader (byte [] bytes) Get the next reader in the pool PooledNetworkReader GetReader (ArraySegment< byte > segment) Get the next reader in the pool void Recycle ( PooledNetworkReader reader) Puts reader back into pool Detailed Description class Mirror :: NetworkReaderPool ; Pool of NetworkReaders Use this pool instead of NetworkReader to reduce memory allocation Public Functions Documentation function GetReader static inline PooledNetworkReader GetReader ( byte [] bytes ) Get the next reader in the pool If pool is empty, creates a new Reader function GetReader static inline PooledNetworkReader GetReader ( ArraySegment < byte > segment ) Get the next reader in the pool If pool is empty, creates a new Reader function Recycle static inline void Recycle ( PooledNetworkReader reader ) Puts reader back into pool When pool is full, the extra reader is left for the GC Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkReaderPool"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderPool/#mirrornetworkreaderpool","text":"Pool of NetworkReaders More...","title":"Mirror::NetworkReaderPool"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderPool/#public-functions","text":"Name PooledNetworkReader GetReader (byte [] bytes) Get the next reader in the pool PooledNetworkReader GetReader (ArraySegment< byte > segment) Get the next reader in the pool void Recycle ( PooledNetworkReader reader) Puts reader back into pool","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderPool/#detailed-description","text":"class Mirror :: NetworkReaderPool ; Pool of NetworkReaders Use this pool instead of NetworkReader to reduce memory allocation","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderPool/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderPool/#function-getreader","text":"static inline PooledNetworkReader GetReader ( byte [] bytes ) Get the next reader in the pool If pool is empty, creates a new Reader","title":"function GetReader"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderPool/#function-getreader_1","text":"static inline PooledNetworkReader GetReader ( ArraySegment < byte > segment ) Get the next reader in the pool If pool is empty, creates a new Reader","title":"function GetReader"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkReaderPool/#function-recycle","text":"static inline void Recycle ( PooledNetworkReader reader ) Puts reader back into pool When pool is full, the extra reader is left for the GC Updated on 29 January 2021 at 18:34:47 UTC","title":"function Recycle"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/","text":"Mirror::NetworkRoomManager This is a specialized NetworkManager that includes a networked room. More... Inherits from NetworkManager , MonoBehaviour Inherited by NetworkLobbyManager Public Classes Name struct PendingPlayer Public Functions Name virtual override void OnValidate () virtual so that inheriting classes' OnValidate() can call base.OnValidate() too void ReadyStatusChanged () virtual override void OnServerReady ( NetworkConnection conn) Called on the server when a client is ready. void CheckReadyToBegin () CheckReadyToBegin checks all of the players in the room to see if their readyToBegin flag is set. virtual override void OnServerConnect ( NetworkConnection conn) Called on the server when a new client connects. virtual override void OnServerDisconnect ( NetworkConnection conn) Called on the server when a client disconnects. virtual override void OnServerAddPlayer ( NetworkConnection conn) Called on the server when a client adds a new player with ClientScene.AddPlayer. void RecalculateRoomPlayerIndices () virtual override void ServerChangeScene (string newSceneName) This causes the server to switch scenes and sets the networkSceneName. virtual override void OnServerSceneChanged (string sceneName) Called on the server when a scene is completed loaded, when the scene load was initiated by the server with ServerChangeScene() . virtual override void OnStartServer () This is invoked when a server is started - including when a host is started. virtual override void OnStartHost () This is invoked when a host is started. virtual override void OnStopServer () This is called when a server is stopped - including when a host is stopped. virtual override void OnStopHost () This is called when a host is stopped. virtual override void OnStartClient () This is invoked when the client is started. virtual override void OnClientConnect ( NetworkConnection conn) Called on the client when connected to a server. virtual override void OnClientDisconnect ( NetworkConnection conn) Called on clients when disconnected from a server. virtual override void OnStopClient () This is called when a client is stopped. virtual override void OnClientSceneChanged ( NetworkConnection conn) Called on clients when a scene has completed loaded, when the scene load was initiated by the server. virtual void OnRoomStartHost () This is called on the host when a host is started. virtual void OnRoomStopHost () This is called on the host when the host is stopped. virtual void OnRoomStartServer () This is called on the server when the server is started - including when a host is started. virtual void OnRoomStopServer () This is called on the server when the server is started - including when a host is stopped. virtual void OnRoomServerConnect ( NetworkConnection conn) This is called on the server when a new client connects to the server. virtual void OnRoomServerDisconnect ( NetworkConnection conn) This is called on the server when a client disconnects. virtual void OnRoomServerSceneChanged (string sceneName) This is called on the server when a networked scene finishes loading. virtual GameObject OnRoomServerCreateRoomPlayer ( NetworkConnection conn) This allows customization of the creation of the room-player object on the server. virtual GameObject OnRoomServerCreateGamePlayer ( NetworkConnection conn, GameObject roomPlayer) This allows customization of the creation of the GamePlayer object on the server. virtual void OnRoomServerAddPlayer ( NetworkConnection conn) This allows customization of the creation of the GamePlayer object on the server. virtual bool OnRoomServerSceneLoadedForPlayer ( NetworkConnection conn, GameObject roomPlayer, GameObject gamePlayer) This is called on the server when it is told that a client has finished switching from the room scene to a game player scene. virtual void OnRoomServerPlayersReady () This is called on the server when all the players in the room are ready. virtual void OnRoomServerPlayersNotReady () This is called on the server when CheckReadyToBegin finds that players are not ready virtual void OnRoomClientEnter () This is a hook to allow custom behaviour when the game client enters the room. virtual void OnRoomClientExit () This is a hook to allow custom behaviour when the game client exits the room. virtual void OnRoomClientConnect ( NetworkConnection conn) This is called on the client when it connects to server. virtual void OnRoomClientDisconnect ( NetworkConnection conn) This is called on the client when disconnected from a server. virtual void OnRoomStartClient () This is called on the client when a client is started. virtual void OnRoomStopClient () This is called on the client when the client stops. virtual void OnRoomClientSceneChanged ( NetworkConnection conn) This is called on the client when the client is finished loading a new networked scene. virtual void OnRoomClientAddPlayerFailed () Called on the client when adding a player to the room fails. virtual void OnGUI () virtual so inheriting classes can roll their own Public Properties Name bool allPlayersReady Public Attributes Name bool showRoomGUI int minPlayers NetworkRoomPlayer roomPlayerPrefab string RoomScene The scene to use for the room. This is similar to the offlineScene of the NetworkManager . string GameplayScene The scene to use for the playing the game from the room. This is similar to the onlineScene of the NetworkManager . List< PendingPlayer > pendingPlayers List of players that are in the Room List< NetworkRoomPlayer > roomSlots These slots track players that enter the room. int clientIndex Additional inherited members Public Functions inherited from NetworkManager Name virtual void Awake () virtual so that inheriting classes' Awake() can call base.Awake() too virtual void Start () virtual so that inheriting classes' Start() can call base.Start() too virtual void LateUpdate () virtual so that inheriting classes' LateUpdate() can call base.LateUpdate() too void StartServer () This starts a new server. void StartClient () This starts a network client. It uses the networkAddress property as the address to connect to. void StartClient (Uri uri) This starts a network client. It uses the Uri parameter as the address to connect to. void StartHost () This starts a network \"host\" - a server and client in the same application. void StopHost () This stops both the client and the server that the manager is using. void StopServer () Stops the server that the manager is using. void StopClient () Stops the client that the manager is using. virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor virtual void ConfigureServerFrameRate () Set the frame rate for a headless server. virtual void OnDestroy () virtual so that inheriting classes' OnDestroy() can call base.OnDestroy() too Transform GetStartPosition () This finds a spawn position based on NetworkStartPosition objects in the scene. virtual void OnServerError ( NetworkConnection conn, int errorCode) Called on the server when a network error occurs for a client connection. virtual void OnServerChangeScene (string newSceneName) Called from ServerChangeScene immediately before SceneManager.LoadSceneAsync is executed virtual void OnClientError ( NetworkConnection conn, int errorCode) Called on clients when a network error occurs. virtual void OnClientNotReady ( NetworkConnection conn) Called on clients when a servers tells the client it is no longer ready. virtual void OnClientChangeScene (string newSceneName, SceneOperation sceneOperation, bool customHandling) Called from ClientChangeScene immediately before SceneManager.LoadSceneAsync is executed bool IsSceneActive (string scene) void Shutdown () This is the only way to clear the singleton, so another instance can be created. void RegisterStartPosition (Transform start) Registers the transform of a game object as a player spawn location. void UnRegisterStartPosition (Transform start) Unregisters the transform of a game object as a player spawn location. Public Properties inherited from NetworkManager Name NetworkManager singleton NetworkManager singleton NetworkManagerMode mode string networkSceneName The name of the current network scene. Public Attributes inherited from NetworkManager Name bool dontDestroyOnLoad A flag to control whether the NetworkManager object is destroyed when the scene changes. bool runInBackground Controls whether the program runs when it is in the background. bool autoStartServerBuild Automatically invoke StartServer() bool showDebugMessages Enables verbose debug messages in the console int serverTickRate Server Update frequency, per second. Use around 60Hz for fast paced games like Counter-Strike to minimize latency. Use around 30Hz for games like WoW to minimize computations. Use around 1-10Hz for slow paced games like EVE. string offlineScene The scene to switch to when offline. string onlineScene The scene to switch to when online. string networkAddress The network address currently in use. int maxConnections The maximum number of concurrent network connections to support. bool disconnectInactiveConnections Should the server disconnect remote connections that have gone silent for more than Server Idle Timeout? float disconnectInactiveTimeout Timeout in seconds since last message from a client after which server will auto-disconnect. NetworkAuthenticator authenticator GameObject playerPrefab The default prefab to be used to create player objects on the server. bool autoCreatePlayer A flag to control whether or not player objects are automatically created on connect, and on scene change. PlayerSpawnMethod playerSpawnMethod The current method of spawning players used by the NetworkManager . List< GameObject > spawnPrefabs List of prefabs that will be registered with the spawning system. int numPlayers Number of active player objects across all connections on the server. bool isNetworkActive True if the server or client is started and running bool clientLoadedScene This is true if the client loaded a new scene when connecting to the server. UnityEngine.AsyncOperation loadingSceneAsync int startPositionIndex List< Transform > startPositions List of transforms populted by NetworkStartPosition components found in the scene. Protected Attributes inherited from NetworkManager Name Transport transport Detailed Description class Mirror :: NetworkRoomManager ; This is a specialized NetworkManager that includes a networked room. The room has slots that track the joined players, and a maximum player count that is enforced. It requires that the NetworkRoomPlayer component be on the room player objects. NetworkRoomManager is derived from NetworkManager , and so it implements many of the virtual functions provided by the NetworkManager class. To avoid accidentally replacing functionality of the NetworkRoomManager , there are new virtual functions on the NetworkRoomManager that begin with \"OnRoom\". These should be used on classes derived from NetworkRoomManager instead of the virtual functions on NetworkManager . The OnRoom*() functions have empty implementations on the NetworkRoomManager base class, so the base class functions do not have to be called. Public Functions Documentation function OnValidate inline virtual override void OnValidate () virtual so that inheriting classes' OnValidate() can call base.OnValidate() too Reimplements : Mirror::NetworkManager::OnValidate function ReadyStatusChanged inline void ReadyStatusChanged () function OnServerReady inline virtual override void OnServerReady ( NetworkConnection conn ) Called on the server when a client is ready. Parameters : conn Connection from client. Reimplements : Mirror::NetworkManager::OnServerReady The default implementation of this function calls NetworkServer.SetClientReady() to continue the network setup process. function CheckReadyToBegin inline void CheckReadyToBegin () CheckReadyToBegin checks all of the players in the room to see if their readyToBegin flag is set. If all of the players are ready, then the server switches from the RoomScene to the PlayScene, essentially starting the game. This is called automatically in response to NetworkRoomPlayer.CmdChangeReadyState. function OnServerConnect inline virtual override void OnServerConnect ( NetworkConnection conn ) Called on the server when a new client connects. Parameters : conn Connection from client. Reimplements : Mirror::NetworkManager::OnServerConnect Unity calls this on the Server when a Client connects to the Server. Use an override to tell the NetworkManager what to do when a client connects to the server. function OnServerDisconnect inline virtual override void OnServerDisconnect ( NetworkConnection conn ) Called on the server when a client disconnects. Parameters : conn Connection from client. Reimplements : Mirror::NetworkManager::OnServerDisconnect This is called on the Server when a Client disconnects from the Server. Use an override to decide what should happen when a disconnection is detected. function OnServerAddPlayer inline virtual override void OnServerAddPlayer ( NetworkConnection conn ) Called on the server when a client adds a new player with ClientScene.AddPlayer. Parameters : conn Connection from client. Reimplements : Mirror::NetworkManager::OnServerAddPlayer The default implementation for this function creates a new player object from the playerPrefab. function RecalculateRoomPlayerIndices inline void RecalculateRoomPlayerIndices () function ServerChangeScene inline virtual override void ServerChangeScene ( string newSceneName ) This causes the server to switch scenes and sets the networkSceneName. Parameters : newSceneName Reimplements : Mirror::NetworkManager::ServerChangeScene Clients that connect to this server will automatically switch to this scene. This is called autmatically if onlineScene or offlineScene are set, but it can be called from user code to switch scenes again while the game is in progress. This automatically sets clients to be not-ready. The clients must call NetworkClient.Ready() again to participate in the new scene. function OnServerSceneChanged inline virtual override void OnServerSceneChanged ( string sceneName ) Called on the server when a scene is completed loaded, when the scene load was initiated by the server with ServerChangeScene() . Parameters : sceneName The name of the new scene. Reimplements : Mirror::NetworkManager::OnServerSceneChanged function OnStartServer inline virtual override void OnStartServer () This is invoked when a server is started - including when a host is started. Reimplements : Mirror::NetworkManager::OnStartServer StartServer has multiple signatures, but they all cause this hook to be called. function OnStartHost inline virtual override void OnStartHost () This is invoked when a host is started. Reimplements : Mirror::NetworkManager::OnStartHost StartHost has multiple signatures, but they all cause this hook to be called. function OnStopServer inline virtual override void OnStopServer () This is called when a server is stopped - including when a host is stopped. Reimplements : Mirror::NetworkManager::OnStopServer function OnStopHost inline virtual override void OnStopHost () This is called when a host is stopped. Reimplements : Mirror::NetworkManager::OnStopHost function OnStartClient inline virtual override void OnStartClient () This is invoked when the client is started. Reimplements : Mirror::NetworkManager::OnStartClient function OnClientConnect inline virtual override void OnClientConnect ( NetworkConnection conn ) Called on the client when connected to a server. Parameters : conn Connection to the server. Reimplements : Mirror::NetworkManager::OnClientConnect The default implementation of this function sets the client as ready and adds a player. Override the function to dictate what happens when the client connects. function OnClientDisconnect inline virtual override void OnClientDisconnect ( NetworkConnection conn ) Called on clients when disconnected from a server. Parameters : conn Connection to the server. Reimplements : Mirror::NetworkManager::OnClientDisconnect This is called on the client when it disconnects from the server. Override this function to decide what happens when the client disconnects. function OnStopClient inline virtual override void OnStopClient () This is called when a client is stopped. Reimplements : Mirror::NetworkManager::OnStopClient function OnClientSceneChanged inline virtual override void OnClientSceneChanged ( NetworkConnection conn ) Called on clients when a scene has completed loaded, when the scene load was initiated by the server. Parameters : conn Connection of the client Reimplements : Mirror::NetworkManager::OnClientSceneChanged Scene changes can cause player objects to be destroyed. The default implementation of OnClientSceneChanged in the NetworkManager is to add a player object for the connection if no player object exists. function OnRoomStartHost inline virtual void OnRoomStartHost () This is called on the host when a host is started. function OnRoomStopHost inline virtual void OnRoomStopHost () This is called on the host when the host is stopped. function OnRoomStartServer inline virtual void OnRoomStartServer () This is called on the server when the server is started - including when a host is started. function OnRoomStopServer inline virtual void OnRoomStopServer () This is called on the server when the server is started - including when a host is stopped. function OnRoomServerConnect inline virtual void OnRoomServerConnect ( NetworkConnection conn ) This is called on the server when a new client connects to the server. Parameters : conn The new connection. function OnRoomServerDisconnect inline virtual void OnRoomServerDisconnect ( NetworkConnection conn ) This is called on the server when a client disconnects. Parameters : conn The connection that disconnected. function OnRoomServerSceneChanged inline virtual void OnRoomServerSceneChanged ( string sceneName ) This is called on the server when a networked scene finishes loading. Parameters : sceneName Name of the new scene. function OnRoomServerCreateRoomPlayer inline virtual GameObject OnRoomServerCreateRoomPlayer ( NetworkConnection conn ) This allows customization of the creation of the room-player object on the server. Parameters : conn The connection the player object is for. Return : The new room-player object. By default the roomPlayerPrefab is used to create the room-player, but this function allows that behaviour to be customized. function OnRoomServerCreateGamePlayer inline virtual GameObject OnRoomServerCreateGamePlayer ( NetworkConnection conn , GameObject roomPlayer ) This allows customization of the creation of the GamePlayer object on the server. Parameters : conn The connection the player object is for. roomPlayer The room player object for this connection. Return : A new GamePlayer object. By default the gamePlayerPrefab is used to create the game-player, but this function allows that behaviour to be customized. The object returned from the function will be used to replace the room-player on the connection. function OnRoomServerAddPlayer inline virtual void OnRoomServerAddPlayer ( NetworkConnection conn ) This allows customization of the creation of the GamePlayer object on the server. Parameters : conn The connection the player object is for. This is only called for subsequent GamePlay scenes after the first one. See OnRoomServerCreateGamePlayer(NetworkConnection, GameObject) to customize the player object for the initial GamePlay scene. function OnRoomServerSceneLoadedForPlayer inline virtual bool OnRoomServerSceneLoadedForPlayer ( NetworkConnection conn , GameObject roomPlayer , GameObject gamePlayer ) This is called on the server when it is told that a client has finished switching from the room scene to a game player scene. Parameters : conn The connection of the player roomPlayer The room player object. gamePlayer The game player object. Return : False to not allow this player to replace the room player. When switching from the room, the room-player is replaced with a game-player object. This callback function gives an opportunity to apply state from the room-player to the game-player object. function OnRoomServerPlayersReady inline virtual void OnRoomServerPlayersReady () This is called on the server when all the players in the room are ready. The default implementation of this function uses ServerChangeScene() to switch to the game player scene. By implementing this callback you can customize what happens when all the players in the room are ready, such as adding a countdown or a confirmation for a group leader. function OnRoomServerPlayersNotReady inline virtual void OnRoomServerPlayersNotReady () This is called on the server when CheckReadyToBegin finds that players are not ready May be called multiple times while not ready players are joining function OnRoomClientEnter inline virtual void OnRoomClientEnter () This is a hook to allow custom behaviour when the game client enters the room. function OnRoomClientExit inline virtual void OnRoomClientExit () This is a hook to allow custom behaviour when the game client exits the room. function OnRoomClientConnect inline virtual void OnRoomClientConnect ( NetworkConnection conn ) This is called on the client when it connects to server. Parameters : conn The connection that connected. function OnRoomClientDisconnect inline virtual void OnRoomClientDisconnect ( NetworkConnection conn ) This is called on the client when disconnected from a server. Parameters : conn The connection that disconnected. function OnRoomStartClient inline virtual void OnRoomStartClient () This is called on the client when a client is started. Parameters : roomClient The connection for the room. function OnRoomStopClient inline virtual void OnRoomStopClient () This is called on the client when the client stops. function OnRoomClientSceneChanged inline virtual void OnRoomClientSceneChanged ( NetworkConnection conn ) This is called on the client when the client is finished loading a new networked scene. Parameters : conn The connection that finished loading a new networked scene. function OnRoomClientAddPlayerFailed inline virtual void OnRoomClientAddPlayerFailed () Called on the client when adding a player to the room fails. This could be because the room is full, or the connection is not allowed to have more players. function OnGUI inline virtual void OnGUI () virtual so inheriting classes can roll their own Public Property Documentation property allPlayersReady bool allPlayersReady ; Public Attributes Documentation variable showRoomGUI bool showRoomGUI = true ; variable minPlayers int minPlayers = 1 ; variable roomPlayerPrefab NetworkRoomPlayer roomPlayerPrefab ; variable RoomScene string RoomScene ; The scene to use for the room. This is similar to the offlineScene of the NetworkManager . variable GameplayScene string GameplayScene ; The scene to use for the playing the game from the room. This is similar to the onlineScene of the NetworkManager . variable pendingPlayers List < PendingPlayer > pendingPlayers = new List < [ PendingPlayer ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structMirror_1_1NetworkRoomManager_1_1PendingPlayer / ) > (); List of players that are in the Room variable roomSlots List < NetworkRoomPlayer > roomSlots = new List < [ NetworkRoomPlayer ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1NetworkRoomPlayer / ) > (); These slots track players that enter the room. The slotId on players is global to the game - across all players. variable clientIndex int clientIndex ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::NetworkRoomManager"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#mirrornetworkroommanager","text":"This is a specialized NetworkManager that includes a networked room. More... Inherits from NetworkManager , MonoBehaviour Inherited by NetworkLobbyManager","title":"Mirror::NetworkRoomManager"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#public-classes","text":"Name struct PendingPlayer","title":"Public Classes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#public-functions","text":"Name virtual override void OnValidate () virtual so that inheriting classes' OnValidate() can call base.OnValidate() too void ReadyStatusChanged () virtual override void OnServerReady ( NetworkConnection conn) Called on the server when a client is ready. void CheckReadyToBegin () CheckReadyToBegin checks all of the players in the room to see if their readyToBegin flag is set. virtual override void OnServerConnect ( NetworkConnection conn) Called on the server when a new client connects. virtual override void OnServerDisconnect ( NetworkConnection conn) Called on the server when a client disconnects. virtual override void OnServerAddPlayer ( NetworkConnection conn) Called on the server when a client adds a new player with ClientScene.AddPlayer. void RecalculateRoomPlayerIndices () virtual override void ServerChangeScene (string newSceneName) This causes the server to switch scenes and sets the networkSceneName. virtual override void OnServerSceneChanged (string sceneName) Called on the server when a scene is completed loaded, when the scene load was initiated by the server with ServerChangeScene() . virtual override void OnStartServer () This is invoked when a server is started - including when a host is started. virtual override void OnStartHost () This is invoked when a host is started. virtual override void OnStopServer () This is called when a server is stopped - including when a host is stopped. virtual override void OnStopHost () This is called when a host is stopped. virtual override void OnStartClient () This is invoked when the client is started. virtual override void OnClientConnect ( NetworkConnection conn) Called on the client when connected to a server. virtual override void OnClientDisconnect ( NetworkConnection conn) Called on clients when disconnected from a server. virtual override void OnStopClient () This is called when a client is stopped. virtual override void OnClientSceneChanged ( NetworkConnection conn) Called on clients when a scene has completed loaded, when the scene load was initiated by the server. virtual void OnRoomStartHost () This is called on the host when a host is started. virtual void OnRoomStopHost () This is called on the host when the host is stopped. virtual void OnRoomStartServer () This is called on the server when the server is started - including when a host is started. virtual void OnRoomStopServer () This is called on the server when the server is started - including when a host is stopped. virtual void OnRoomServerConnect ( NetworkConnection conn) This is called on the server when a new client connects to the server. virtual void OnRoomServerDisconnect ( NetworkConnection conn) This is called on the server when a client disconnects. virtual void OnRoomServerSceneChanged (string sceneName) This is called on the server when a networked scene finishes loading. virtual GameObject OnRoomServerCreateRoomPlayer ( NetworkConnection conn) This allows customization of the creation of the room-player object on the server. virtual GameObject OnRoomServerCreateGamePlayer ( NetworkConnection conn, GameObject roomPlayer) This allows customization of the creation of the GamePlayer object on the server. virtual void OnRoomServerAddPlayer ( NetworkConnection conn) This allows customization of the creation of the GamePlayer object on the server. virtual bool OnRoomServerSceneLoadedForPlayer ( NetworkConnection conn, GameObject roomPlayer, GameObject gamePlayer) This is called on the server when it is told that a client has finished switching from the room scene to a game player scene. virtual void OnRoomServerPlayersReady () This is called on the server when all the players in the room are ready. virtual void OnRoomServerPlayersNotReady () This is called on the server when CheckReadyToBegin finds that players are not ready virtual void OnRoomClientEnter () This is a hook to allow custom behaviour when the game client enters the room. virtual void OnRoomClientExit () This is a hook to allow custom behaviour when the game client exits the room. virtual void OnRoomClientConnect ( NetworkConnection conn) This is called on the client when it connects to server. virtual void OnRoomClientDisconnect ( NetworkConnection conn) This is called on the client when disconnected from a server. virtual void OnRoomStartClient () This is called on the client when a client is started. virtual void OnRoomStopClient () This is called on the client when the client stops. virtual void OnRoomClientSceneChanged ( NetworkConnection conn) This is called on the client when the client is finished loading a new networked scene. virtual void OnRoomClientAddPlayerFailed () Called on the client when adding a player to the room fails. virtual void OnGUI () virtual so inheriting classes can roll their own","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#public-properties","text":"Name bool allPlayersReady","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#public-attributes","text":"Name bool showRoomGUI int minPlayers NetworkRoomPlayer roomPlayerPrefab string RoomScene The scene to use for the room. This is similar to the offlineScene of the NetworkManager . string GameplayScene The scene to use for the playing the game from the room. This is similar to the onlineScene of the NetworkManager . List< PendingPlayer > pendingPlayers List of players that are in the Room List< NetworkRoomPlayer > roomSlots These slots track players that enter the room. int clientIndex","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#additional-inherited-members","text":"Public Functions inherited from NetworkManager Name virtual void Awake () virtual so that inheriting classes' Awake() can call base.Awake() too virtual void Start () virtual so that inheriting classes' Start() can call base.Start() too virtual void LateUpdate () virtual so that inheriting classes' LateUpdate() can call base.LateUpdate() too void StartServer () This starts a new server. void StartClient () This starts a network client. It uses the networkAddress property as the address to connect to. void StartClient (Uri uri) This starts a network client. It uses the Uri parameter as the address to connect to. void StartHost () This starts a network \"host\" - a server and client in the same application. void StopHost () This stops both the client and the server that the manager is using. void StopServer () Stops the server that the manager is using. void StopClient () Stops the client that the manager is using. virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor virtual void ConfigureServerFrameRate () Set the frame rate for a headless server. virtual void OnDestroy () virtual so that inheriting classes' OnDestroy() can call base.OnDestroy() too Transform GetStartPosition () This finds a spawn position based on NetworkStartPosition objects in the scene. virtual void OnServerError ( NetworkConnection conn, int errorCode) Called on the server when a network error occurs for a client connection. virtual void OnServerChangeScene (string newSceneName) Called from ServerChangeScene immediately before SceneManager.LoadSceneAsync is executed virtual void OnClientError ( NetworkConnection conn, int errorCode) Called on clients when a network error occurs. virtual void OnClientNotReady ( NetworkConnection conn) Called on clients when a servers tells the client it is no longer ready. virtual void OnClientChangeScene (string newSceneName, SceneOperation sceneOperation, bool customHandling) Called from ClientChangeScene immediately before SceneManager.LoadSceneAsync is executed bool IsSceneActive (string scene) void Shutdown () This is the only way to clear the singleton, so another instance can be created. void RegisterStartPosition (Transform start) Registers the transform of a game object as a player spawn location. void UnRegisterStartPosition (Transform start) Unregisters the transform of a game object as a player spawn location. Public Properties inherited from NetworkManager Name NetworkManager singleton NetworkManager singleton NetworkManagerMode mode string networkSceneName The name of the current network scene. Public Attributes inherited from NetworkManager Name bool dontDestroyOnLoad A flag to control whether the NetworkManager object is destroyed when the scene changes. bool runInBackground Controls whether the program runs when it is in the background. bool autoStartServerBuild Automatically invoke StartServer() bool showDebugMessages Enables verbose debug messages in the console int serverTickRate Server Update frequency, per second. Use around 60Hz for fast paced games like Counter-Strike to minimize latency. Use around 30Hz for games like WoW to minimize computations. Use around 1-10Hz for slow paced games like EVE. string offlineScene The scene to switch to when offline. string onlineScene The scene to switch to when online. string networkAddress The network address currently in use. int maxConnections The maximum number of concurrent network connections to support. bool disconnectInactiveConnections Should the server disconnect remote connections that have gone silent for more than Server Idle Timeout? float disconnectInactiveTimeout Timeout in seconds since last message from a client after which server will auto-disconnect. NetworkAuthenticator authenticator GameObject playerPrefab The default prefab to be used to create player objects on the server. bool autoCreatePlayer A flag to control whether or not player objects are automatically created on connect, and on scene change. PlayerSpawnMethod playerSpawnMethod The current method of spawning players used by the NetworkManager . List< GameObject > spawnPrefabs List of prefabs that will be registered with the spawning system. int numPlayers Number of active player objects across all connections on the server. bool isNetworkActive True if the server or client is started and running bool clientLoadedScene This is true if the client loaded a new scene when connecting to the server. UnityEngine.AsyncOperation loadingSceneAsync int startPositionIndex List< Transform > startPositions List of transforms populted by NetworkStartPosition components found in the scene. Protected Attributes inherited from NetworkManager Name Transport transport","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#detailed-description","text":"class Mirror :: NetworkRoomManager ; This is a specialized NetworkManager that includes a networked room. The room has slots that track the joined players, and a maximum player count that is enforced. It requires that the NetworkRoomPlayer component be on the room player objects. NetworkRoomManager is derived from NetworkManager , and so it implements many of the virtual functions provided by the NetworkManager class. To avoid accidentally replacing functionality of the NetworkRoomManager , there are new virtual functions on the NetworkRoomManager that begin with \"OnRoom\". These should be used on classes derived from NetworkRoomManager instead of the virtual functions on NetworkManager . The OnRoom*() functions have empty implementations on the NetworkRoomManager base class, so the base class functions do not have to be called.","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onvalidate","text":"inline virtual override void OnValidate () virtual so that inheriting classes' OnValidate() can call base.OnValidate() too Reimplements : Mirror::NetworkManager::OnValidate","title":"function OnValidate"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-readystatuschanged","text":"inline void ReadyStatusChanged ()","title":"function ReadyStatusChanged"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onserverready","text":"inline virtual override void OnServerReady ( NetworkConnection conn ) Called on the server when a client is ready. Parameters : conn Connection from client. Reimplements : Mirror::NetworkManager::OnServerReady The default implementation of this function calls NetworkServer.SetClientReady() to continue the network setup process.","title":"function OnServerReady"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-checkreadytobegin","text":"inline void CheckReadyToBegin () CheckReadyToBegin checks all of the players in the room to see if their readyToBegin flag is set. If all of the players are ready, then the server switches from the RoomScene to the PlayScene, essentially starting the game. This is called automatically in response to NetworkRoomPlayer.CmdChangeReadyState.","title":"function CheckReadyToBegin"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onserverconnect","text":"inline virtual override void OnServerConnect ( NetworkConnection conn ) Called on the server when a new client connects. Parameters : conn Connection from client. Reimplements : Mirror::NetworkManager::OnServerConnect Unity calls this on the Server when a Client connects to the Server. Use an override to tell the NetworkManager what to do when a client connects to the server.","title":"function OnServerConnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onserverdisconnect","text":"inline virtual override void OnServerDisconnect ( NetworkConnection conn ) Called on the server when a client disconnects. Parameters : conn Connection from client. Reimplements : Mirror::NetworkManager::OnServerDisconnect This is called on the Server when a Client disconnects from the Server. Use an override to decide what should happen when a disconnection is detected.","title":"function OnServerDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onserveraddplayer","text":"inline virtual override void OnServerAddPlayer ( NetworkConnection conn ) Called on the server when a client adds a new player with ClientScene.AddPlayer. Parameters : conn Connection from client. Reimplements : Mirror::NetworkManager::OnServerAddPlayer The default implementation for this function creates a new player object from the playerPrefab.","title":"function OnServerAddPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-recalculateroomplayerindices","text":"inline void RecalculateRoomPlayerIndices ()","title":"function RecalculateRoomPlayerIndices"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-serverchangescene","text":"inline virtual override void ServerChangeScene ( string newSceneName ) This causes the server to switch scenes and sets the networkSceneName. Parameters : newSceneName Reimplements : Mirror::NetworkManager::ServerChangeScene Clients that connect to this server will automatically switch to this scene. This is called autmatically if onlineScene or offlineScene are set, but it can be called from user code to switch scenes again while the game is in progress. This automatically sets clients to be not-ready. The clients must call NetworkClient.Ready() again to participate in the new scene.","title":"function ServerChangeScene"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onserverscenechanged","text":"inline virtual override void OnServerSceneChanged ( string sceneName ) Called on the server when a scene is completed loaded, when the scene load was initiated by the server with ServerChangeScene() . Parameters : sceneName The name of the new scene. Reimplements : Mirror::NetworkManager::OnServerSceneChanged","title":"function OnServerSceneChanged"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onstartserver","text":"inline virtual override void OnStartServer () This is invoked when a server is started - including when a host is started. Reimplements : Mirror::NetworkManager::OnStartServer StartServer has multiple signatures, but they all cause this hook to be called.","title":"function OnStartServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onstarthost","text":"inline virtual override void OnStartHost () This is invoked when a host is started. Reimplements : Mirror::NetworkManager::OnStartHost StartHost has multiple signatures, but they all cause this hook to be called.","title":"function OnStartHost"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onstopserver","text":"inline virtual override void OnStopServer () This is called when a server is stopped - including when a host is stopped. Reimplements : Mirror::NetworkManager::OnStopServer","title":"function OnStopServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onstophost","text":"inline virtual override void OnStopHost () This is called when a host is stopped. Reimplements : Mirror::NetworkManager::OnStopHost","title":"function OnStopHost"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onstartclient","text":"inline virtual override void OnStartClient () This is invoked when the client is started. Reimplements : Mirror::NetworkManager::OnStartClient","title":"function OnStartClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onclientconnect","text":"inline virtual override void OnClientConnect ( NetworkConnection conn ) Called on the client when connected to a server. Parameters : conn Connection to the server. Reimplements : Mirror::NetworkManager::OnClientConnect The default implementation of this function sets the client as ready and adds a player. Override the function to dictate what happens when the client connects.","title":"function OnClientConnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onclientdisconnect","text":"inline virtual override void OnClientDisconnect ( NetworkConnection conn ) Called on clients when disconnected from a server. Parameters : conn Connection to the server. Reimplements : Mirror::NetworkManager::OnClientDisconnect This is called on the client when it disconnects from the server. Override this function to decide what happens when the client disconnects.","title":"function OnClientDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onstopclient","text":"inline virtual override void OnStopClient () This is called when a client is stopped. Reimplements : Mirror::NetworkManager::OnStopClient","title":"function OnStopClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onclientscenechanged","text":"inline virtual override void OnClientSceneChanged ( NetworkConnection conn ) Called on clients when a scene has completed loaded, when the scene load was initiated by the server. Parameters : conn Connection of the client Reimplements : Mirror::NetworkManager::OnClientSceneChanged Scene changes can cause player objects to be destroyed. The default implementation of OnClientSceneChanged in the NetworkManager is to add a player object for the connection if no player object exists.","title":"function OnClientSceneChanged"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomstarthost","text":"inline virtual void OnRoomStartHost () This is called on the host when a host is started.","title":"function OnRoomStartHost"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomstophost","text":"inline virtual void OnRoomStopHost () This is called on the host when the host is stopped.","title":"function OnRoomStopHost"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomstartserver","text":"inline virtual void OnRoomStartServer () This is called on the server when the server is started - including when a host is started.","title":"function OnRoomStartServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomstopserver","text":"inline virtual void OnRoomStopServer () This is called on the server when the server is started - including when a host is stopped.","title":"function OnRoomStopServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomserverconnect","text":"inline virtual void OnRoomServerConnect ( NetworkConnection conn ) This is called on the server when a new client connects to the server. Parameters : conn The new connection.","title":"function OnRoomServerConnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomserverdisconnect","text":"inline virtual void OnRoomServerDisconnect ( NetworkConnection conn ) This is called on the server when a client disconnects. Parameters : conn The connection that disconnected.","title":"function OnRoomServerDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomserverscenechanged","text":"inline virtual void OnRoomServerSceneChanged ( string sceneName ) This is called on the server when a networked scene finishes loading. Parameters : sceneName Name of the new scene.","title":"function OnRoomServerSceneChanged"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomservercreateroomplayer","text":"inline virtual GameObject OnRoomServerCreateRoomPlayer ( NetworkConnection conn ) This allows customization of the creation of the room-player object on the server. Parameters : conn The connection the player object is for. Return : The new room-player object. By default the roomPlayerPrefab is used to create the room-player, but this function allows that behaviour to be customized.","title":"function OnRoomServerCreateRoomPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomservercreategameplayer","text":"inline virtual GameObject OnRoomServerCreateGamePlayer ( NetworkConnection conn , GameObject roomPlayer ) This allows customization of the creation of the GamePlayer object on the server. Parameters : conn The connection the player object is for. roomPlayer The room player object for this connection. Return : A new GamePlayer object. By default the gamePlayerPrefab is used to create the game-player, but this function allows that behaviour to be customized. The object returned from the function will be used to replace the room-player on the connection.","title":"function OnRoomServerCreateGamePlayer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomserveraddplayer","text":"inline virtual void OnRoomServerAddPlayer ( NetworkConnection conn ) This allows customization of the creation of the GamePlayer object on the server. Parameters : conn The connection the player object is for. This is only called for subsequent GamePlay scenes after the first one. See OnRoomServerCreateGamePlayer(NetworkConnection, GameObject) to customize the player object for the initial GamePlay scene.","title":"function OnRoomServerAddPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomserversceneloadedforplayer","text":"inline virtual bool OnRoomServerSceneLoadedForPlayer ( NetworkConnection conn , GameObject roomPlayer , GameObject gamePlayer ) This is called on the server when it is told that a client has finished switching from the room scene to a game player scene. Parameters : conn The connection of the player roomPlayer The room player object. gamePlayer The game player object. Return : False to not allow this player to replace the room player. When switching from the room, the room-player is replaced with a game-player object. This callback function gives an opportunity to apply state from the room-player to the game-player object.","title":"function OnRoomServerSceneLoadedForPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomserverplayersready","text":"inline virtual void OnRoomServerPlayersReady () This is called on the server when all the players in the room are ready. The default implementation of this function uses ServerChangeScene() to switch to the game player scene. By implementing this callback you can customize what happens when all the players in the room are ready, such as adding a countdown or a confirmation for a group leader.","title":"function OnRoomServerPlayersReady"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomserverplayersnotready","text":"inline virtual void OnRoomServerPlayersNotReady () This is called on the server when CheckReadyToBegin finds that players are not ready May be called multiple times while not ready players are joining","title":"function OnRoomServerPlayersNotReady"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomcliententer","text":"inline virtual void OnRoomClientEnter () This is a hook to allow custom behaviour when the game client enters the room.","title":"function OnRoomClientEnter"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomclientexit","text":"inline virtual void OnRoomClientExit () This is a hook to allow custom behaviour when the game client exits the room.","title":"function OnRoomClientExit"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomclientconnect","text":"inline virtual void OnRoomClientConnect ( NetworkConnection conn ) This is called on the client when it connects to server. Parameters : conn The connection that connected.","title":"function OnRoomClientConnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomclientdisconnect","text":"inline virtual void OnRoomClientDisconnect ( NetworkConnection conn ) This is called on the client when disconnected from a server. Parameters : conn The connection that disconnected.","title":"function OnRoomClientDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomstartclient","text":"inline virtual void OnRoomStartClient () This is called on the client when a client is started. Parameters : roomClient The connection for the room.","title":"function OnRoomStartClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomstopclient","text":"inline virtual void OnRoomStopClient () This is called on the client when the client stops.","title":"function OnRoomStopClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomclientscenechanged","text":"inline virtual void OnRoomClientSceneChanged ( NetworkConnection conn ) This is called on the client when the client is finished loading a new networked scene. Parameters : conn The connection that finished loading a new networked scene.","title":"function OnRoomClientSceneChanged"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-onroomclientaddplayerfailed","text":"inline virtual void OnRoomClientAddPlayerFailed () Called on the client when adding a player to the room fails. This could be because the room is full, or the connection is not allowed to have more players.","title":"function OnRoomClientAddPlayerFailed"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#function-ongui","text":"inline virtual void OnGUI () virtual so inheriting classes can roll their own","title":"function OnGUI"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#property-allplayersready","text":"bool allPlayersReady ;","title":"property allPlayersReady"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#variable-showroomgui","text":"bool showRoomGUI = true ;","title":"variable showRoomGUI"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#variable-minplayers","text":"int minPlayers = 1 ;","title":"variable minPlayers"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#variable-roomplayerprefab","text":"NetworkRoomPlayer roomPlayerPrefab ;","title":"variable roomPlayerPrefab"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#variable-roomscene","text":"string RoomScene ; The scene to use for the room. This is similar to the offlineScene of the NetworkManager .","title":"variable RoomScene"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#variable-gameplayscene","text":"string GameplayScene ; The scene to use for the playing the game from the room. This is similar to the onlineScene of the NetworkManager .","title":"variable GameplayScene"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#variable-pendingplayers","text":"List < PendingPlayer > pendingPlayers = new List < [ PendingPlayer ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structMirror_1_1NetworkRoomManager_1_1PendingPlayer / ) > (); List of players that are in the Room","title":"variable pendingPlayers"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#variable-roomslots","text":"List < NetworkRoomPlayer > roomSlots = new List < [ NetworkRoomPlayer ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1NetworkRoomPlayer / ) > (); These slots track players that enter the room. The slotId on players is global to the game - across all players.","title":"variable roomSlots"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomManager/#variable-clientindex","text":"int clientIndex ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable clientIndex"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomPlayer/","text":"Mirror::NetworkRoomPlayer This component works in conjunction with the NetworkRoomManager to make up the multiplayer room system. More... Inherits from NetworkBehaviour , MonoBehaviour Inherited by NetworkLobbyPlayer Public Functions Name void Start () Do not use Start - Override OnStartrHost / OnStartClient instead! virtual void OnDisable () void CmdChangeReadyState (bool readyState) virtual void IndexChanged (int oldIndex, int newIndex) This is a hook that is invoked on clients when the index changes. virtual void ReadyStateChanged (bool oldReadyState, bool newReadyState) This is a hook that is invoked on clients when a RoomPlayer switches between ready or not ready. virtual void OnClientEnterRoom () This is a hook that is invoked on clients for all room player objects when entering the room. virtual void OnClientExitRoom () This is a hook that is invoked on clients for all room player objects when exiting the room. virtual void OnGUI () Render a UI for the room. Override to provide your on UI Public Attributes Name bool showRoomGUI This flag controls whether the default UI is shown for the room player. bool readyToBegin Diagnostic flag indicating whether this player is ready for the game to begin. int index Diagnostic index of the player, e.g. Player1, Player2, etc. Additional inherited members Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Detailed Description class Mirror :: NetworkRoomPlayer ; This component works in conjunction with the NetworkRoomManager to make up the multiplayer room system. The RoomPrefab object of the NetworkRoomManager must have this component on it. This component holds basic room player data required for the room to function. Game specific data for room players can be put in other components on the RoomPrefab or in scripts derived from NetworkRoomPlayer . Public Functions Documentation function Start inline void Start () Do not use Start - Override OnStartrHost / OnStartClient instead! function OnDisable inline virtual void OnDisable () function CmdChangeReadyState inline void CmdChangeReadyState ( bool readyState ) function IndexChanged inline virtual void IndexChanged ( int oldIndex , int newIndex ) This is a hook that is invoked on clients when the index changes. Parameters : oldIndex The old index value newIndex The new index value function ReadyStateChanged inline virtual void ReadyStateChanged ( bool oldReadyState , bool newReadyState ) This is a hook that is invoked on clients when a RoomPlayer switches between ready or not ready. Parameters : newReadyState New Ready State This function is called when the a client player calls CmdChangeReadyState. function OnClientEnterRoom inline virtual void OnClientEnterRoom () This is a hook that is invoked on clients for all room player objects when entering the room. Note: isLocalPlayer is not guaranteed to be set until OnStartLocalPlayer is called. function OnClientExitRoom inline virtual void OnClientExitRoom () This is a hook that is invoked on clients for all room player objects when exiting the room. function OnGUI inline virtual void OnGUI () Render a UI for the room. Override to provide your on UI Public Attributes Documentation variable showRoomGUI bool showRoomGUI = true ; This flag controls whether the default UI is shown for the room player. As this UI is rendered using the old GUI system, it is only recommended for testing purposes. variable readyToBegin bool readyToBegin ; Diagnostic flag indicating whether this player is ready for the game to begin. Invoke CmdChangeReadyState method on the client to set this flag. When all players are ready to begin, the game will start. This should not be set directly, CmdChangeReadyState should be called on the client to set it on the server. variable index int index ; Diagnostic index of the player, e.g. Player1, Player2, etc. Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::NetworkRoomPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomPlayer/#mirrornetworkroomplayer","text":"This component works in conjunction with the NetworkRoomManager to make up the multiplayer room system. More... Inherits from NetworkBehaviour , MonoBehaviour Inherited by NetworkLobbyPlayer","title":"Mirror::NetworkRoomPlayer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomPlayer/#public-functions","text":"Name void Start () Do not use Start - Override OnStartrHost / OnStartClient instead! virtual void OnDisable () void CmdChangeReadyState (bool readyState) virtual void IndexChanged (int oldIndex, int newIndex) This is a hook that is invoked on clients when the index changes. virtual void ReadyStateChanged (bool oldReadyState, bool newReadyState) This is a hook that is invoked on clients when a RoomPlayer switches between ready or not ready. virtual void OnClientEnterRoom () This is a hook that is invoked on clients for all room player objects when entering the room. virtual void OnClientExitRoom () This is a hook that is invoked on clients for all room player objects when exiting the room. virtual void OnGUI () Render a UI for the room. Override to provide your on UI","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomPlayer/#public-attributes","text":"Name bool showRoomGUI This flag controls whether the default UI is shown for the room player. bool readyToBegin Diagnostic flag indicating whether this player is ready for the game to begin. int index Diagnostic index of the player, e.g. Player1, Player2, etc.","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomPlayer/#additional-inherited-members","text":"Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomPlayer/#detailed-description","text":"class Mirror :: NetworkRoomPlayer ; This component works in conjunction with the NetworkRoomManager to make up the multiplayer room system. The RoomPrefab object of the NetworkRoomManager must have this component on it. This component holds basic room player data required for the room to function. Game specific data for room players can be put in other components on the RoomPrefab or in scripts derived from NetworkRoomPlayer .","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomPlayer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomPlayer/#function-start","text":"inline void Start () Do not use Start - Override OnStartrHost / OnStartClient instead!","title":"function Start"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomPlayer/#function-ondisable","text":"inline virtual void OnDisable ()","title":"function OnDisable"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomPlayer/#function-cmdchangereadystate","text":"inline void CmdChangeReadyState ( bool readyState )","title":"function CmdChangeReadyState"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomPlayer/#function-indexchanged","text":"inline virtual void IndexChanged ( int oldIndex , int newIndex ) This is a hook that is invoked on clients when the index changes. Parameters : oldIndex The old index value newIndex The new index value","title":"function IndexChanged"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomPlayer/#function-readystatechanged","text":"inline virtual void ReadyStateChanged ( bool oldReadyState , bool newReadyState ) This is a hook that is invoked on clients when a RoomPlayer switches between ready or not ready. Parameters : newReadyState New Ready State This function is called when the a client player calls CmdChangeReadyState.","title":"function ReadyStateChanged"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomPlayer/#function-oncliententerroom","text":"inline virtual void OnClientEnterRoom () This is a hook that is invoked on clients for all room player objects when entering the room. Note: isLocalPlayer is not guaranteed to be set until OnStartLocalPlayer is called.","title":"function OnClientEnterRoom"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomPlayer/#function-onclientexitroom","text":"inline virtual void OnClientExitRoom () This is a hook that is invoked on clients for all room player objects when exiting the room.","title":"function OnClientExitRoom"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomPlayer/#function-ongui","text":"inline virtual void OnGUI () Render a UI for the room. Override to provide your on UI","title":"function OnGUI"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomPlayer/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomPlayer/#variable-showroomgui","text":"bool showRoomGUI = true ; This flag controls whether the default UI is shown for the room player. As this UI is rendered using the old GUI system, it is only recommended for testing purposes.","title":"variable showRoomGUI"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomPlayer/#variable-readytobegin","text":"bool readyToBegin ; Diagnostic flag indicating whether this player is ready for the game to begin. Invoke CmdChangeReadyState method on the client to set this flag. When all players are ready to begin, the game will start. This should not be set directly, CmdChangeReadyState should be called on the client to set it on the server.","title":"variable readyToBegin"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkRoomPlayer/#variable-index","text":"int index ; Diagnostic index of the player, e.g. Player1, Player2, etc. Updated on 29 January 2021 at 18:34:48 UTC","title":"variable index"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkSceneChecker/","text":"Mirror::NetworkSceneChecker Component that controls visibility of networked objects between scenes. More... Inherits from NetworkVisibility , NetworkBehaviour , MonoBehaviour Public Functions Name virtual override void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual override void OnStopServer () Invoked on the server when the object is unspawned virtual override bool OnCheckObserver ( NetworkConnection conn) Callback used by the visibility system to determine if an observer (player) can see this object. virtual override void OnRebuildObservers (HashSet< NetworkConnection > observers, bool initialize) Callback used by the visibility system to (re)construct the set of observers that can see this object. Public Attributes Name bool forceHidden Flag to force this object to be hidden from all observers. Additional inherited members Public Functions inherited from NetworkVisibility Name virtual void OnSetHostVisibility (bool visible) Callback used by the visibility system for objects on a host. Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Detailed Description class Mirror :: NetworkSceneChecker ; Component that controls visibility of networked objects between scenes. Any object with this component on it will only be visible to other objects in the same scene This would be used when the server has multiple additive subscenes loaded to isolate players to their respective subscenes Public Functions Documentation function OnStartServer inline virtual override void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. Reimplements : Mirror::NetworkBehaviour::OnStartServer This could be triggered by NetworkServer.Listen() for objects in the scene, or by NetworkServer.Spawn() for objects that are dynamically created. This will be called for objects on a \"host\" as well as for object on a dedicated server. function OnStopServer inline virtual override void OnStopServer () Invoked on the server when the object is unspawned Reimplements : Mirror::NetworkBehaviour::OnStopServer Useful for saving object data in persistant storage function OnCheckObserver inline virtual override bool OnCheckObserver ( NetworkConnection conn ) Callback used by the visibility system to determine if an observer (player) can see this object. Parameters : conn Network connection of a player. Return : True if the player can see this object. Reimplements : Mirror::NetworkVisibility::OnCheckObserver If this function returns true, the network connection will be added as an observer. function OnRebuildObservers inline virtual override void OnRebuildObservers ( HashSet < NetworkConnection > observers , bool initialize ) Callback used by the visibility system to (re)construct the set of observers that can see this object. Parameters : observers The new set of observers for this object. initialize True if the set of observers is being built for the first time. Reimplements : Mirror::NetworkVisibility::OnRebuildObservers Implementations of this callback should add network connections of players that can see this object to the observers set. Public Attributes Documentation variable forceHidden bool forceHidden ; Flag to force this object to be hidden from all observers. If this object is a player object, it will not be hidden for that client. Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::NetworkSceneChecker"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkSceneChecker/#mirrornetworkscenechecker","text":"Component that controls visibility of networked objects between scenes. More... Inherits from NetworkVisibility , NetworkBehaviour , MonoBehaviour","title":"Mirror::NetworkSceneChecker"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkSceneChecker/#public-functions","text":"Name virtual override void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual override void OnStopServer () Invoked on the server when the object is unspawned virtual override bool OnCheckObserver ( NetworkConnection conn) Callback used by the visibility system to determine if an observer (player) can see this object. virtual override void OnRebuildObservers (HashSet< NetworkConnection > observers, bool initialize) Callback used by the visibility system to (re)construct the set of observers that can see this object.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkSceneChecker/#public-attributes","text":"Name bool forceHidden Flag to force this object to be hidden from all observers.","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkSceneChecker/#additional-inherited-members","text":"Public Functions inherited from NetworkVisibility Name virtual void OnSetHostVisibility (bool visible) Callback used by the visibility system for objects on a host. Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkSceneChecker/#detailed-description","text":"class Mirror :: NetworkSceneChecker ; Component that controls visibility of networked objects between scenes. Any object with this component on it will only be visible to other objects in the same scene This would be used when the server has multiple additive subscenes loaded to isolate players to their respective subscenes","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkSceneChecker/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkSceneChecker/#function-onstartserver","text":"inline virtual override void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. Reimplements : Mirror::NetworkBehaviour::OnStartServer This could be triggered by NetworkServer.Listen() for objects in the scene, or by NetworkServer.Spawn() for objects that are dynamically created. This will be called for objects on a \"host\" as well as for object on a dedicated server.","title":"function OnStartServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkSceneChecker/#function-onstopserver","text":"inline virtual override void OnStopServer () Invoked on the server when the object is unspawned Reimplements : Mirror::NetworkBehaviour::OnStopServer Useful for saving object data in persistant storage","title":"function OnStopServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkSceneChecker/#function-oncheckobserver","text":"inline virtual override bool OnCheckObserver ( NetworkConnection conn ) Callback used by the visibility system to determine if an observer (player) can see this object. Parameters : conn Network connection of a player. Return : True if the player can see this object. Reimplements : Mirror::NetworkVisibility::OnCheckObserver If this function returns true, the network connection will be added as an observer.","title":"function OnCheckObserver"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkSceneChecker/#function-onrebuildobservers","text":"inline virtual override void OnRebuildObservers ( HashSet < NetworkConnection > observers , bool initialize ) Callback used by the visibility system to (re)construct the set of observers that can see this object. Parameters : observers The new set of observers for this object. initialize True if the set of observers is being built for the first time. Reimplements : Mirror::NetworkVisibility::OnRebuildObservers Implementations of this callback should add network connections of players that can see this object to the observers set.","title":"function OnRebuildObservers"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkSceneChecker/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkSceneChecker/#variable-forcehidden","text":"bool forceHidden ; Flag to force this object to be hidden from all observers. If this object is a player object, it will not be hidden for that client. Updated on 29 January 2021 at 18:34:48 UTC","title":"variable forceHidden"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkScenePostProcess/","text":"Mirror::NetworkScenePostProcess Inherits from MonoBehaviour Public Functions Name void OnPostProcessScene () Public Functions Documentation function OnPostProcessScene static inline void OnPostProcessScene () Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::NetworkScenePostProcess"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkScenePostProcess/#mirrornetworkscenepostprocess","text":"Inherits from MonoBehaviour","title":"Mirror::NetworkScenePostProcess"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkScenePostProcess/#public-functions","text":"Name void OnPostProcessScene ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkScenePostProcess/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkScenePostProcess/#function-onpostprocessscene","text":"static inline void OnPostProcessScene () Updated on 29 January 2021 at 18:34:48 UTC","title":"function OnPostProcessScene"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/","text":"Mirror::NetworkServer The NetworkServer. More... Public Functions Name void Shutdown () This shuts down the server and disconnects all clients. void Listen (int maxConns) Start the server, setting the maximum number of connections. bool AddConnection ( NetworkConnectionToClient conn) bool RemoveConnection (int connectionId) This removes an external connection added with AddExternalConnection(). void ActivateHostScene () void SendToAll< T > (T msg, int channelId =Channels.DefaultReliable, bool sendToReadyOnly =false) Send a message to all connected clients, both ready and not-ready. void SendToReady< T > (T msg, int channelId =Channels.DefaultReliable) Send a message to only clients which are ready. void SendToReady< T > ( NetworkIdentity identity, T msg, bool includeOwner =true, int channelId =Channels.DefaultReliable) Send a message to only clients which are ready with option to include the owner of the object identity. void SendToReady< T > ( NetworkIdentity identity, T msg, int channelId) Send a message to only clients which are ready including the owner of the object identity. void DisconnectAll () Disconnect all currently connected clients, including the local connection. void DisconnectAllConnections () Disconnect all currently connected clients except the local connection. bool NoConnections () If connections is empty or if only has host void Update () Called from NetworkManager in LateUpdate void RegisterHandler< T > (Action< NetworkConnection , T > handler, bool requireAuthentication =true) Register a handler for a particular message type. void RegisterHandler< T > (Action< T > handler, bool requireAuthentication =true) Register a handler for a particular message type. void ReplaceHandler< T > (Action< NetworkConnection , T > handler, bool requireAuthentication =true) Replaces a handler for a particular message type. void ReplaceHandler< T > (Action< T > handler, bool requireAuthentication =true) Replaces a handler for a particular message type. void UnregisterHandler< T > () Unregisters a handler for a particular message type. void ClearHandlers () Clear all registered callback handlers. void SendToClientOfPlayer< T > ( NetworkIdentity identity, T msg, int channelId =Channels.DefaultReliable) send this message to the player only bool ReplacePlayerForConnection ( NetworkConnection conn, GameObject player, Guid assetId, bool keepAuthority =false) This replaces the player object for a connection with a different player object. The old player object is not destroyed. bool ReplacePlayerForConnection ( NetworkConnection conn, GameObject player, bool keepAuthority =false) This replaces the player object for a connection with a different player object. The old player object is not destroyed. bool AddPlayerForConnection ( NetworkConnection conn, GameObject player, Guid assetId) bool AddPlayerForConnection ( NetworkConnection conn, GameObject player) void SetClientReady ( NetworkConnection conn) Sets the client to be ready. void SetAllClientsNotReady () Marks all connected clients as no longer ready. void SetClientNotReady ( NetworkConnection conn) Sets the client of the connection to be not-ready. void RemovePlayerForConnection ( NetworkConnection conn, bool destroyServerObject) Removes the player object from the connection void DestroyPlayerForConnection ( NetworkConnection conn) This destroys all the player objects associated with a NetworkConnections on a server. void Spawn (GameObject obj, NetworkConnection ownerConnection =null) Spawn the given game object on all clients which are ready. void Spawn (GameObject obj, GameObject ownerPlayer) This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client. void Spawn (GameObject obj, Guid assetId, NetworkConnection ownerConnection =null) This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client. void Destroy (GameObject obj) Destroys this object and corresponding objects on all clients. void UnSpawn (GameObject obj) This takes an object that has been spawned and un-spawns it. bool SpawnObjects () This causes NetworkIdentity objects in a scene to be spawned on a server. Public Properties Name NetworkConnectionToClient localConnection The connection to the host mode client (if any). bool active Public Attributes Name int maxConnections bool localClientActive Dictionary< int, NetworkConnectionToClient > connections A list of local connections on the server. bool dontListen bool disconnectInactiveConnections Should the server disconnect remote connections that have gone silent for more than Server Idle Timeout? float disconnectInactiveTimeout Timeout in seconds since last message from a client after which server will auto-disconnect. Detailed Description class Mirror :: NetworkServer ; The NetworkServer. NetworkServer handles remote connections from remote clients via a NetworkServerSimple instance, and also has a local connection for a local client. The NetworkServer is a singleton. It has static convenience functions such as NetworkServer.SendToAll() and NetworkServer.Spawn() which automatically use the singleton instance. The NetworkManager uses the NetworkServer, but it can be used without the NetworkManager . The set of networked objects that have been spawned is managed by NetworkServer. Objects are spawned with NetworkServer.Spawn() which adds them to this set, and makes them be created on clients. Spawned objects are removed automatically when they are destroyed, or than they can be removed from the spawned set by calling NetworkServer.UnSpawn() - this does not destroy the object. There are a number of internal messages used by NetworkServer, these are setup when NetworkServer.Listen() is called. Public Functions Documentation function Shutdown static inline void Shutdown () This shuts down the server and disconnects all clients. function Listen static inline void Listen ( int maxConns ) Start the server, setting the maximum number of connections. Parameters : maxConns Maximum number of allowed connections function AddConnection static inline bool AddConnection ( NetworkConnectionToClient conn ) Parameters : conn Network connection to add. Return : True if added. This accepts a network connection and adds it to the server. This connection will use the callbacks registered with the server. function RemoveConnection static inline bool RemoveConnection ( int connectionId ) This removes an external connection added with AddExternalConnection(). Parameters : connectionId The id of the connection to remove. Return : True if the removal succeeded function ActivateHostScene static inline void ActivateHostScene () function SendToAll< T > static inline void SendToAll < T > ( T msg , int channelId = Channels . DefaultReliable , bool sendToReadyOnly = false ) Send a message to all connected clients, both ready and not-ready. Parameters : msg Message channelId Transport channel to use sendToReadyOnly Indicates if only ready clients should receive the message Template Parameters : T Message type See NetworkConnection.isReady function SendToReady< T > static inline void SendToReady < T > ( T msg , int channelId = Channels . DefaultReliable ) Send a message to only clients which are ready. Parameters : msg Message channelId Transport channel to use Template Parameters : T Message type. See NetworkConnection.isReady function SendToReady< T > static inline void SendToReady < T > ( NetworkIdentity identity , T msg , bool includeOwner = true , int channelId = Channels . DefaultReliable ) Send a message to only clients which are ready with option to include the owner of the object identity. Parameters : identity Identity of the owner msg Message includeOwner Should the owner of the object be included channelId Transport channel to use Template Parameters : T Message type. See NetworkConnection.isReady function SendToReady< T > static inline void SendToReady < T > ( NetworkIdentity identity , T msg , int channelId ) Send a message to only clients which are ready including the owner of the object identity. Parameters : identity identity of the object msg Message channelId Transport channel to use Template Parameters : T Message type See NetworkConnection.isReady function DisconnectAll static inline void DisconnectAll () Disconnect all currently connected clients, including the local connection. This can only be called on the server. Clients will receive the Disconnect message. function DisconnectAllConnections static inline void DisconnectAllConnections () Disconnect all currently connected clients except the local connection. This can only be called on the server. Clients will receive the Disconnect message. function NoConnections static inline bool NoConnections () If connections is empty or if only has host Return : function Update static inline void Update () Called from NetworkManager in LateUpdate The user should never need to pump the update loop manually function RegisterHandler< T > static inline void RegisterHandler < T > ( Action < NetworkConnection , T > handler , bool requireAuthentication = true ) Register a handler for a particular message type. Parameters : handler Function handler which will be invoked when this message type is received. requireAuthentication True if the message requires an authenticated connection Template Parameters : T Message type There are several system message types which you can add handlers for. You can also add your own message types. function RegisterHandler< T > static inline void RegisterHandler < T > ( Action < T > handler , bool requireAuthentication = true ) Register a handler for a particular message type. Parameters : handler Function handler which will be invoked when this message type is received. requireAuthentication True if the message requires an authenticated connection Template Parameters : T Message type There are several system message types which you can add handlers for. You can also add your own message types. function ReplaceHandler< T > static inline void ReplaceHandler < T > ( Action < NetworkConnection , T > handler , bool requireAuthentication = true ) Replaces a handler for a particular message type. Parameters : handler Function handler which will be invoked when this message type is received. requireAuthentication True if the message requires an authenticated connection Template Parameters : T Message type See also [RegisterHandler(T)(Action(NetworkConnection, T), bool)] function ReplaceHandler< T > static inline void ReplaceHandler < T > ( Action < T > handler , bool requireAuthentication = true ) Replaces a handler for a particular message type. Parameters : handler Function handler which will be invoked when this message type is received. requireAuthentication True if the message requires an authenticated connection Template Parameters : T Message type See also [RegisterHandler(T)(Action(NetworkConnection, T), bool)] function UnregisterHandler< T > static inline void UnregisterHandler < T > () Unregisters a handler for a particular message type. Template Parameters : T Message type function ClearHandlers static inline void ClearHandlers () Clear all registered callback handlers. function SendToClientOfPlayer< T > static inline void SendToClientOfPlayer < T > ( NetworkIdentity identity , T msg , int channelId = Channels . DefaultReliable ) send this message to the player only Parameters : identity msg Template Parameters : T Message type function ReplacePlayerForConnection static inline bool ReplacePlayerForConnection ( NetworkConnection conn , GameObject player , Guid assetId , bool keepAuthority = false ) This replaces the player object for a connection with a different player object. The old player object is not destroyed. Parameters : conn Connection which is adding the player. player Player object spawned for the player. assetId keepAuthority Does the previous player remain attached to this connection? Return : True if connection was successfully replaced for player. If a connection already has a player object, this can be used to replace that object with a different player object. This does NOT change the ready state of the connection, so it can safely be used while changing scenes. function ReplacePlayerForConnection static inline bool ReplacePlayerForConnection ( NetworkConnection conn , GameObject player , bool keepAuthority = false ) This replaces the player object for a connection with a different player object. The old player object is not destroyed. Parameters : conn Connection which is adding the player. player Player object spawned for the player. keepAuthority Does the previous player remain attached to this connection? Return : True if connection was successfully replaced for player. If a connection already has a player object, this can be used to replace that object with a different player object. This does NOT change the ready state of the connection, so it can safely be used while changing scenes. function AddPlayerForConnection static inline bool AddPlayerForConnection ( NetworkConnection conn , GameObject player , Guid assetId ) Parameters : conn Connection which is adding the player. player Player object spawned for the player. assetId Return : True if connection was sucessfully added for a connection. When an AddPlayer message handler has received a request from a player, the server calls this to associate the player object with the connection. When a player is added for a connection, the client for that connection is made ready automatically. The player object is automatically spawned, so you do not need to call NetworkServer.Spawn for that object. This function is used for \"adding\" a player, not for \"replacing\" the player on a connection. If there is already a player on this playerControllerId for this connection, this will fail. function AddPlayerForConnection static inline bool AddPlayerForConnection ( NetworkConnection conn , GameObject player ) Parameters : conn Connection which is adding the player. player Player object spawned for the player. Return : True if connection was successfully added for a connection. When an AddPlayer message handler has received a request from a player, the server calls this to associate the player object with the connection. When a player is added for a connection, the client for that connection is made ready automatically. The player object is automatically spawned, so you do not need to call NetworkServer.Spawn for that object. This function is used for \"adding\" a player, not for \"replacing\" the player on a connection. If there is already a player on this playerControllerId for this connection, this will fail. function SetClientReady static inline void SetClientReady ( NetworkConnection conn ) Sets the client to be ready. Parameters : conn The connection of the client to make ready. When a client has signaled that it is ready, this method tells the server that the client is ready to receive spawned objects and state synchronization updates. This is usually called in a handler for the SYSTEM_READY message. If there is not specific action a game needs to take for this message, relying on the default ready handler function is probably fine, so this call wont be needed. function SetAllClientsNotReady static inline void SetAllClientsNotReady () Marks all connected clients as no longer ready. All clients will no longer be sent state synchronization updates. The player's clients can call ClientManager.Ready() again to re-enter the ready state. This is useful when switching scenes. function SetClientNotReady static inline void SetClientNotReady ( NetworkConnection conn ) Sets the client of the connection to be not-ready. Parameters : conn The connection of the client to make not ready. Clients that are not ready do not receive spawned objects or state synchronization updates. They client can be made ready again by calling SetClientReady(). function RemovePlayerForConnection static inline void RemovePlayerForConnection ( NetworkConnection conn , bool destroyServerObject ) Removes the player object from the connection Parameters : conn The connection of the client to remove from destroyServerObject Indicates whether the server object should be destroyed function DestroyPlayerForConnection static inline void DestroyPlayerForConnection ( NetworkConnection conn ) This destroys all the player objects associated with a NetworkConnections on a server. Parameters : conn The connections object to clean up for. This is used when a client disconnects, to remove the players for that client. This also destroys non-player objects that have client authority set for this connection. function Spawn static inline void Spawn ( GameObject obj , NetworkConnection ownerConnection = null ) Spawn the given game object on all clients which are ready. Parameters : obj Game object with NetworkIdentity to spawn. ownerConnection The connection that has authority over the object This will cause a new object to be instantiated from the registered prefab, or from a custom spawn function. function Spawn static inline void Spawn ( GameObject obj , GameObject ownerPlayer ) This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client. Parameters : obj The object to spawn. ownerPlayer The player object to set Client Authority to. This is the same as calling NetworkIdentity.AssignClientAuthority on the spawned object. function Spawn static inline void Spawn ( GameObject obj , Guid assetId , NetworkConnection ownerConnection = null ) This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client. Parameters : obj The object to spawn. assetId The assetId of the object to spawn. Used for custom spawn handlers. ownerConnection The connection that has authority over the object This is the same as calling NetworkIdentity.AssignClientAuthority on the spawned object. function Destroy static inline void Destroy ( GameObject obj ) Destroys this object and corresponding objects on all clients. Parameters : obj Game object to destroy. In some cases it is useful to remove an object but not delete it on the server. For that, use NetworkServer.UnSpawn() instead of NetworkServer.Destroy(). function UnSpawn static inline void UnSpawn ( GameObject obj ) This takes an object that has been spawned and un-spawns it. Parameters : obj The spawned object to be unspawned. The object will be removed from clients that it was spawned on, or the custom spawn handler function on the client will be called for the object. Unlike when calling NetworkServer.Destroy(), on the server the object will NOT be destroyed. This allows the server to re-use the object, even spawn it again later. function SpawnObjects static inline bool SpawnObjects () This causes NetworkIdentity objects in a scene to be spawned on a server. Return : Success if objects where spawned. NetworkIdentity objects in a scene are disabled by default. Calling SpawnObjects() causes these scene objects to be enabled and spawned. It is like calling NetworkServer.Spawn() for each of them. Public Property Documentation property localConnection static NetworkConnectionToClient localConnection ; The connection to the host mode client (if any). property active static bool active ; Checks if the server has been started. This will be true after NetworkServer.Listen() has been called. Public Attributes Documentation variable maxConnections static int maxConnections ; variable localClientActive static bool localClientActive => localConnection != null ; True is a local client is currently active on the server. This will be true for \"Hosts\" on hosted server games. variable connections static Dictionary < int , NetworkConnectionToClient > connections = new Dictionary < int , [ NetworkConnectionToClient ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1NetworkConnectionToClient / ) > (); A list of local connections on the server. variable dontListen static bool dontListen ; If you enable this, the server will not listen for incoming connections on the regular network port. This can be used if the game is running in host mode and does not want external players to be able to connect - making it like a single-player game. Also this can be useful when using AddExternalConnection(). variable disconnectInactiveConnections static bool disconnectInactiveConnections ; Should the server disconnect remote connections that have gone silent for more than Server Idle Timeout? This value is initially set from NetworkManager in SetupServer and can be changed at runtime variable disconnectInactiveTimeout static float disconnectInactiveTimeout = 60f ; Timeout in seconds since last message from a client after which server will auto-disconnect. This value is initially set from NetworkManager in SetupServer and can be changed at runtime By default, clients send at least a Ping message every 2 seconds. The Host client is immune from idle timeout disconnection. Default value is 60 seconds. Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::NetworkServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#mirrornetworkserver","text":"The NetworkServer. More...","title":"Mirror::NetworkServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#public-functions","text":"Name void Shutdown () This shuts down the server and disconnects all clients. void Listen (int maxConns) Start the server, setting the maximum number of connections. bool AddConnection ( NetworkConnectionToClient conn) bool RemoveConnection (int connectionId) This removes an external connection added with AddExternalConnection(). void ActivateHostScene () void SendToAll< T > (T msg, int channelId =Channels.DefaultReliable, bool sendToReadyOnly =false) Send a message to all connected clients, both ready and not-ready. void SendToReady< T > (T msg, int channelId =Channels.DefaultReliable) Send a message to only clients which are ready. void SendToReady< T > ( NetworkIdentity identity, T msg, bool includeOwner =true, int channelId =Channels.DefaultReliable) Send a message to only clients which are ready with option to include the owner of the object identity. void SendToReady< T > ( NetworkIdentity identity, T msg, int channelId) Send a message to only clients which are ready including the owner of the object identity. void DisconnectAll () Disconnect all currently connected clients, including the local connection. void DisconnectAllConnections () Disconnect all currently connected clients except the local connection. bool NoConnections () If connections is empty or if only has host void Update () Called from NetworkManager in LateUpdate void RegisterHandler< T > (Action< NetworkConnection , T > handler, bool requireAuthentication =true) Register a handler for a particular message type. void RegisterHandler< T > (Action< T > handler, bool requireAuthentication =true) Register a handler for a particular message type. void ReplaceHandler< T > (Action< NetworkConnection , T > handler, bool requireAuthentication =true) Replaces a handler for a particular message type. void ReplaceHandler< T > (Action< T > handler, bool requireAuthentication =true) Replaces a handler for a particular message type. void UnregisterHandler< T > () Unregisters a handler for a particular message type. void ClearHandlers () Clear all registered callback handlers. void SendToClientOfPlayer< T > ( NetworkIdentity identity, T msg, int channelId =Channels.DefaultReliable) send this message to the player only bool ReplacePlayerForConnection ( NetworkConnection conn, GameObject player, Guid assetId, bool keepAuthority =false) This replaces the player object for a connection with a different player object. The old player object is not destroyed. bool ReplacePlayerForConnection ( NetworkConnection conn, GameObject player, bool keepAuthority =false) This replaces the player object for a connection with a different player object. The old player object is not destroyed. bool AddPlayerForConnection ( NetworkConnection conn, GameObject player, Guid assetId) bool AddPlayerForConnection ( NetworkConnection conn, GameObject player) void SetClientReady ( NetworkConnection conn) Sets the client to be ready. void SetAllClientsNotReady () Marks all connected clients as no longer ready. void SetClientNotReady ( NetworkConnection conn) Sets the client of the connection to be not-ready. void RemovePlayerForConnection ( NetworkConnection conn, bool destroyServerObject) Removes the player object from the connection void DestroyPlayerForConnection ( NetworkConnection conn) This destroys all the player objects associated with a NetworkConnections on a server. void Spawn (GameObject obj, NetworkConnection ownerConnection =null) Spawn the given game object on all clients which are ready. void Spawn (GameObject obj, GameObject ownerPlayer) This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client. void Spawn (GameObject obj, Guid assetId, NetworkConnection ownerConnection =null) This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client. void Destroy (GameObject obj) Destroys this object and corresponding objects on all clients. void UnSpawn (GameObject obj) This takes an object that has been spawned and un-spawns it. bool SpawnObjects () This causes NetworkIdentity objects in a scene to be spawned on a server.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#public-properties","text":"Name NetworkConnectionToClient localConnection The connection to the host mode client (if any). bool active","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#public-attributes","text":"Name int maxConnections bool localClientActive Dictionary< int, NetworkConnectionToClient > connections A list of local connections on the server. bool dontListen bool disconnectInactiveConnections Should the server disconnect remote connections that have gone silent for more than Server Idle Timeout? float disconnectInactiveTimeout Timeout in seconds since last message from a client after which server will auto-disconnect.","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#detailed-description","text":"class Mirror :: NetworkServer ; The NetworkServer. NetworkServer handles remote connections from remote clients via a NetworkServerSimple instance, and also has a local connection for a local client. The NetworkServer is a singleton. It has static convenience functions such as NetworkServer.SendToAll() and NetworkServer.Spawn() which automatically use the singleton instance. The NetworkManager uses the NetworkServer, but it can be used without the NetworkManager . The set of networked objects that have been spawned is managed by NetworkServer. Objects are spawned with NetworkServer.Spawn() which adds them to this set, and makes them be created on clients. Spawned objects are removed automatically when they are destroyed, or than they can be removed from the spawned set by calling NetworkServer.UnSpawn() - this does not destroy the object. There are a number of internal messages used by NetworkServer, these are setup when NetworkServer.Listen() is called.","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-shutdown","text":"static inline void Shutdown () This shuts down the server and disconnects all clients.","title":"function Shutdown"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-listen","text":"static inline void Listen ( int maxConns ) Start the server, setting the maximum number of connections. Parameters : maxConns Maximum number of allowed connections","title":"function Listen"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-addconnection","text":"static inline bool AddConnection ( NetworkConnectionToClient conn ) Parameters : conn Network connection to add. Return : True if added. This accepts a network connection and adds it to the server. This connection will use the callbacks registered with the server.","title":"function AddConnection"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-removeconnection","text":"static inline bool RemoveConnection ( int connectionId ) This removes an external connection added with AddExternalConnection(). Parameters : connectionId The id of the connection to remove. Return : True if the removal succeeded","title":"function RemoveConnection"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-activatehostscene","text":"static inline void ActivateHostScene ()","title":"function ActivateHostScene"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-sendtoall-t","text":"static inline void SendToAll < T > ( T msg , int channelId = Channels . DefaultReliable , bool sendToReadyOnly = false ) Send a message to all connected clients, both ready and not-ready. Parameters : msg Message channelId Transport channel to use sendToReadyOnly Indicates if only ready clients should receive the message Template Parameters : T Message type See NetworkConnection.isReady","title":"function SendToAll&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-sendtoready-t","text":"static inline void SendToReady < T > ( T msg , int channelId = Channels . DefaultReliable ) Send a message to only clients which are ready. Parameters : msg Message channelId Transport channel to use Template Parameters : T Message type. See NetworkConnection.isReady","title":"function SendToReady&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-sendtoready-t_1","text":"static inline void SendToReady < T > ( NetworkIdentity identity , T msg , bool includeOwner = true , int channelId = Channels . DefaultReliable ) Send a message to only clients which are ready with option to include the owner of the object identity. Parameters : identity Identity of the owner msg Message includeOwner Should the owner of the object be included channelId Transport channel to use Template Parameters : T Message type. See NetworkConnection.isReady","title":"function SendToReady&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-sendtoready-t_2","text":"static inline void SendToReady < T > ( NetworkIdentity identity , T msg , int channelId ) Send a message to only clients which are ready including the owner of the object identity. Parameters : identity identity of the object msg Message channelId Transport channel to use Template Parameters : T Message type See NetworkConnection.isReady","title":"function SendToReady&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-disconnectall","text":"static inline void DisconnectAll () Disconnect all currently connected clients, including the local connection. This can only be called on the server. Clients will receive the Disconnect message.","title":"function DisconnectAll"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-disconnectallconnections","text":"static inline void DisconnectAllConnections () Disconnect all currently connected clients except the local connection. This can only be called on the server. Clients will receive the Disconnect message.","title":"function DisconnectAllConnections"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-noconnections","text":"static inline bool NoConnections () If connections is empty or if only has host Return :","title":"function NoConnections"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-update","text":"static inline void Update () Called from NetworkManager in LateUpdate The user should never need to pump the update loop manually","title":"function Update"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-registerhandler-t","text":"static inline void RegisterHandler < T > ( Action < NetworkConnection , T > handler , bool requireAuthentication = true ) Register a handler for a particular message type. Parameters : handler Function handler which will be invoked when this message type is received. requireAuthentication True if the message requires an authenticated connection Template Parameters : T Message type There are several system message types which you can add handlers for. You can also add your own message types.","title":"function RegisterHandler&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-registerhandler-t_1","text":"static inline void RegisterHandler < T > ( Action < T > handler , bool requireAuthentication = true ) Register a handler for a particular message type. Parameters : handler Function handler which will be invoked when this message type is received. requireAuthentication True if the message requires an authenticated connection Template Parameters : T Message type There are several system message types which you can add handlers for. You can also add your own message types.","title":"function RegisterHandler&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-replacehandler-t","text":"static inline void ReplaceHandler < T > ( Action < NetworkConnection , T > handler , bool requireAuthentication = true ) Replaces a handler for a particular message type. Parameters : handler Function handler which will be invoked when this message type is received. requireAuthentication True if the message requires an authenticated connection Template Parameters : T Message type See also [RegisterHandler(T)(Action(NetworkConnection, T), bool)]","title":"function ReplaceHandler&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-replacehandler-t_1","text":"static inline void ReplaceHandler < T > ( Action < T > handler , bool requireAuthentication = true ) Replaces a handler for a particular message type. Parameters : handler Function handler which will be invoked when this message type is received. requireAuthentication True if the message requires an authenticated connection Template Parameters : T Message type See also [RegisterHandler(T)(Action(NetworkConnection, T), bool)]","title":"function ReplaceHandler&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-unregisterhandler-t","text":"static inline void UnregisterHandler < T > () Unregisters a handler for a particular message type. Template Parameters : T Message type","title":"function UnregisterHandler&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-clearhandlers","text":"static inline void ClearHandlers () Clear all registered callback handlers.","title":"function ClearHandlers"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-sendtoclientofplayer-t","text":"static inline void SendToClientOfPlayer < T > ( NetworkIdentity identity , T msg , int channelId = Channels . DefaultReliable ) send this message to the player only Parameters : identity msg Template Parameters : T Message type","title":"function SendToClientOfPlayer&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-replaceplayerforconnection","text":"static inline bool ReplacePlayerForConnection ( NetworkConnection conn , GameObject player , Guid assetId , bool keepAuthority = false ) This replaces the player object for a connection with a different player object. The old player object is not destroyed. Parameters : conn Connection which is adding the player. player Player object spawned for the player. assetId keepAuthority Does the previous player remain attached to this connection? Return : True if connection was successfully replaced for player. If a connection already has a player object, this can be used to replace that object with a different player object. This does NOT change the ready state of the connection, so it can safely be used while changing scenes.","title":"function ReplacePlayerForConnection"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-replaceplayerforconnection_1","text":"static inline bool ReplacePlayerForConnection ( NetworkConnection conn , GameObject player , bool keepAuthority = false ) This replaces the player object for a connection with a different player object. The old player object is not destroyed. Parameters : conn Connection which is adding the player. player Player object spawned for the player. keepAuthority Does the previous player remain attached to this connection? Return : True if connection was successfully replaced for player. If a connection already has a player object, this can be used to replace that object with a different player object. This does NOT change the ready state of the connection, so it can safely be used while changing scenes.","title":"function ReplacePlayerForConnection"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-addplayerforconnection","text":"static inline bool AddPlayerForConnection ( NetworkConnection conn , GameObject player , Guid assetId ) Parameters : conn Connection which is adding the player. player Player object spawned for the player. assetId Return : True if connection was sucessfully added for a connection. When an AddPlayer message handler has received a request from a player, the server calls this to associate the player object with the connection. When a player is added for a connection, the client for that connection is made ready automatically. The player object is automatically spawned, so you do not need to call NetworkServer.Spawn for that object. This function is used for \"adding\" a player, not for \"replacing\" the player on a connection. If there is already a player on this playerControllerId for this connection, this will fail.","title":"function AddPlayerForConnection"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-addplayerforconnection_1","text":"static inline bool AddPlayerForConnection ( NetworkConnection conn , GameObject player ) Parameters : conn Connection which is adding the player. player Player object spawned for the player. Return : True if connection was successfully added for a connection. When an AddPlayer message handler has received a request from a player, the server calls this to associate the player object with the connection. When a player is added for a connection, the client for that connection is made ready automatically. The player object is automatically spawned, so you do not need to call NetworkServer.Spawn for that object. This function is used for \"adding\" a player, not for \"replacing\" the player on a connection. If there is already a player on this playerControllerId for this connection, this will fail.","title":"function AddPlayerForConnection"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-setclientready","text":"static inline void SetClientReady ( NetworkConnection conn ) Sets the client to be ready. Parameters : conn The connection of the client to make ready. When a client has signaled that it is ready, this method tells the server that the client is ready to receive spawned objects and state synchronization updates. This is usually called in a handler for the SYSTEM_READY message. If there is not specific action a game needs to take for this message, relying on the default ready handler function is probably fine, so this call wont be needed.","title":"function SetClientReady"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-setallclientsnotready","text":"static inline void SetAllClientsNotReady () Marks all connected clients as no longer ready. All clients will no longer be sent state synchronization updates. The player's clients can call ClientManager.Ready() again to re-enter the ready state. This is useful when switching scenes.","title":"function SetAllClientsNotReady"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-setclientnotready","text":"static inline void SetClientNotReady ( NetworkConnection conn ) Sets the client of the connection to be not-ready. Parameters : conn The connection of the client to make not ready. Clients that are not ready do not receive spawned objects or state synchronization updates. They client can be made ready again by calling SetClientReady().","title":"function SetClientNotReady"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-removeplayerforconnection","text":"static inline void RemovePlayerForConnection ( NetworkConnection conn , bool destroyServerObject ) Removes the player object from the connection Parameters : conn The connection of the client to remove from destroyServerObject Indicates whether the server object should be destroyed","title":"function RemovePlayerForConnection"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-destroyplayerforconnection","text":"static inline void DestroyPlayerForConnection ( NetworkConnection conn ) This destroys all the player objects associated with a NetworkConnections on a server. Parameters : conn The connections object to clean up for. This is used when a client disconnects, to remove the players for that client. This also destroys non-player objects that have client authority set for this connection.","title":"function DestroyPlayerForConnection"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-spawn","text":"static inline void Spawn ( GameObject obj , NetworkConnection ownerConnection = null ) Spawn the given game object on all clients which are ready. Parameters : obj Game object with NetworkIdentity to spawn. ownerConnection The connection that has authority over the object This will cause a new object to be instantiated from the registered prefab, or from a custom spawn function.","title":"function Spawn"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-spawn_1","text":"static inline void Spawn ( GameObject obj , GameObject ownerPlayer ) This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client. Parameters : obj The object to spawn. ownerPlayer The player object to set Client Authority to. This is the same as calling NetworkIdentity.AssignClientAuthority on the spawned object.","title":"function Spawn"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-spawn_2","text":"static inline void Spawn ( GameObject obj , Guid assetId , NetworkConnection ownerConnection = null ) This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client. Parameters : obj The object to spawn. assetId The assetId of the object to spawn. Used for custom spawn handlers. ownerConnection The connection that has authority over the object This is the same as calling NetworkIdentity.AssignClientAuthority on the spawned object.","title":"function Spawn"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-destroy","text":"static inline void Destroy ( GameObject obj ) Destroys this object and corresponding objects on all clients. Parameters : obj Game object to destroy. In some cases it is useful to remove an object but not delete it on the server. For that, use NetworkServer.UnSpawn() instead of NetworkServer.Destroy().","title":"function Destroy"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-unspawn","text":"static inline void UnSpawn ( GameObject obj ) This takes an object that has been spawned and un-spawns it. Parameters : obj The spawned object to be unspawned. The object will be removed from clients that it was spawned on, or the custom spawn handler function on the client will be called for the object. Unlike when calling NetworkServer.Destroy(), on the server the object will NOT be destroyed. This allows the server to re-use the object, even spawn it again later.","title":"function UnSpawn"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#function-spawnobjects","text":"static inline bool SpawnObjects () This causes NetworkIdentity objects in a scene to be spawned on a server. Return : Success if objects where spawned. NetworkIdentity objects in a scene are disabled by default. Calling SpawnObjects() causes these scene objects to be enabled and spawned. It is like calling NetworkServer.Spawn() for each of them.","title":"function SpawnObjects"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#property-localconnection","text":"static NetworkConnectionToClient localConnection ; The connection to the host mode client (if any).","title":"property localConnection"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#property-active","text":"static bool active ; Checks if the server has been started. This will be true after NetworkServer.Listen() has been called.","title":"property active"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#variable-maxconnections","text":"static int maxConnections ;","title":"variable maxConnections"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#variable-localclientactive","text":"static bool localClientActive => localConnection != null ; True is a local client is currently active on the server. This will be true for \"Hosts\" on hosted server games.","title":"variable localClientActive"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#variable-connections","text":"static Dictionary < int , NetworkConnectionToClient > connections = new Dictionary < int , [ NetworkConnectionToClient ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1NetworkConnectionToClient / ) > (); A list of local connections on the server.","title":"variable connections"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#variable-dontlisten","text":"static bool dontListen ; If you enable this, the server will not listen for incoming connections on the regular network port. This can be used if the game is running in host mode and does not want external players to be able to connect - making it like a single-player game. Also this can be useful when using AddExternalConnection().","title":"variable dontListen"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#variable-disconnectinactiveconnections","text":"static bool disconnectInactiveConnections ; Should the server disconnect remote connections that have gone silent for more than Server Idle Timeout? This value is initially set from NetworkManager in SetupServer and can be changed at runtime","title":"variable disconnectInactiveConnections"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkServer/#variable-disconnectinactivetimeout","text":"static float disconnectInactiveTimeout = 60f ; Timeout in seconds since last message from a client after which server will auto-disconnect. This value is initially set from NetworkManager in SetupServer and can be changed at runtime By default, clients send at least a Ping message every 2 seconds. The Host client is immune from idle timeout disconnection. Default value is 60 seconds. Updated on 29 January 2021 at 18:34:48 UTC","title":"variable disconnectInactiveTimeout"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkStartPosition/","text":"Mirror::NetworkStartPosition This component is used to make a gameObject a starting position for spawning player objects in multiplayer games. More... Inherits from MonoBehaviour Public Functions Name void Awake () void OnDestroy () Detailed Description class Mirror :: NetworkStartPosition ; This component is used to make a gameObject a starting position for spawning player objects in multiplayer games. This object's transform will be automatically registered and unregistered with the NetworkManager as a starting position. Public Functions Documentation function Awake inline void Awake () function OnDestroy inline void OnDestroy () Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::NetworkStartPosition"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkStartPosition/#mirrornetworkstartposition","text":"This component is used to make a gameObject a starting position for spawning player objects in multiplayer games. More... Inherits from MonoBehaviour","title":"Mirror::NetworkStartPosition"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkStartPosition/#public-functions","text":"Name void Awake () void OnDestroy ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkStartPosition/#detailed-description","text":"class Mirror :: NetworkStartPosition ; This component is used to make a gameObject a starting position for spawning player objects in multiplayer games. This object's transform will be automatically registered and unregistered with the NetworkManager as a starting position.","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkStartPosition/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkStartPosition/#function-awake","text":"inline void Awake ()","title":"function Awake"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkStartPosition/#function-ondestroy","text":"inline void OnDestroy () Updated on 29 January 2021 at 18:34:48 UTC","title":"function OnDestroy"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTime/","text":"Mirror::NetworkTime Synchronize time between the server and the clients Public Functions Name void Reset () Public Attributes Name float PingFrequency how often are we sending ping messages used to calculate network time and RTT int PingWindowSize average out the last few results from Ping double time The time in seconds since the server started. double timeVar Measurement of the variance of time. double timeSd standard deviation of time. double offset Clock difference in seconds between the client and the server double rtt how long in seconds does it take for a message to go to the server and come back double rttVar measure variance of rtt the higher the number, the less accurate rtt is double rttSd Measure the standard deviation of rtt the higher the number, the less accurate rtt is Public Functions Documentation function Reset static inline void Reset () Public Attributes Documentation variable PingFrequency static float PingFrequency = 2.0f ; how often are we sending ping messages used to calculate network time and RTT variable PingWindowSize static int PingWindowSize = 10 ; average out the last few results from Ping variable time static double time => LocalTime () - _offset . Value ; The time in seconds since the server started. variable timeVar static double timeVar => _offset . Var ; Measurement of the variance of time. The higher the variance, the less accurate the time is variable timeSd static double timeSd => Math . Sqrt ( timeVar ); standard deviation of time. The higher the variance, the less accurate the time is variable offset static double offset => _offset . Value ; Clock difference in seconds between the client and the server Note this value is always 0 at the server variable rtt static double rtt => _rtt . Value ; how long in seconds does it take for a message to go to the server and come back variable rttVar static double rttVar => _rtt . Var ; measure variance of rtt the higher the number, the less accurate rtt is variable rttSd static double rttSd => Math . Sqrt ( rttVar ); Measure the standard deviation of rtt the higher the number, the less accurate rtt is Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::NetworkTime"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTime/#mirrornetworktime","text":"Synchronize time between the server and the clients","title":"Mirror::NetworkTime"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTime/#public-functions","text":"Name void Reset ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTime/#public-attributes","text":"Name float PingFrequency how often are we sending ping messages used to calculate network time and RTT int PingWindowSize average out the last few results from Ping double time The time in seconds since the server started. double timeVar Measurement of the variance of time. double timeSd standard deviation of time. double offset Clock difference in seconds between the client and the server double rtt how long in seconds does it take for a message to go to the server and come back double rttVar measure variance of rtt the higher the number, the less accurate rtt is double rttSd Measure the standard deviation of rtt the higher the number, the less accurate rtt is","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTime/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTime/#function-reset","text":"static inline void Reset ()","title":"function Reset"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTime/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTime/#variable-pingfrequency","text":"static float PingFrequency = 2.0f ; how often are we sending ping messages used to calculate network time and RTT","title":"variable PingFrequency"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTime/#variable-pingwindowsize","text":"static int PingWindowSize = 10 ; average out the last few results from Ping","title":"variable PingWindowSize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTime/#variable-time","text":"static double time => LocalTime () - _offset . Value ; The time in seconds since the server started.","title":"variable time"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTime/#variable-timevar","text":"static double timeVar => _offset . Var ; Measurement of the variance of time. The higher the variance, the less accurate the time is","title":"variable timeVar"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTime/#variable-timesd","text":"static double timeSd => Math . Sqrt ( timeVar ); standard deviation of time. The higher the variance, the less accurate the time is","title":"variable timeSd"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTime/#variable-offset","text":"static double offset => _offset . Value ; Clock difference in seconds between the client and the server Note this value is always 0 at the server","title":"variable offset"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTime/#variable-rtt","text":"static double rtt => _rtt . Value ; how long in seconds does it take for a message to go to the server and come back","title":"variable rtt"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTime/#variable-rttvar","text":"static double rttVar => _rtt . Var ; measure variance of rtt the higher the number, the less accurate rtt is","title":"variable rttVar"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTime/#variable-rttsd","text":"static double rttSd => Math . Sqrt ( rttVar ); Measure the standard deviation of rtt the higher the number, the less accurate rtt is Updated on 29 January 2021 at 18:34:48 UTC","title":"variable rttSd"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransform/","text":"Mirror::NetworkTransform Inherits from NetworkTransformBase , NetworkBehaviour , MonoBehaviour Protected Attributes Name override Transform targetComponent Additional inherited members Public Classes inherited from NetworkTransformBase Name class DataPoint Public Functions inherited from NetworkTransformBase Name void SerializeIntoWriter ( NetworkWriter writer, Vector3 position, Quaternion rotation, Vector3 scale) virtual override bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual override void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . void ServerTeleport (Vector3 position) Server side teleportation. This method will override this GameObject's current Transform.Position to the Vector3 you have provided and send it to all other Clients to override it at their side too. void ServerTeleport (Vector3 position, Quaternion rotation) Server side teleportation. This method will override this GameObject's current Transform.Position and Transform.Rotation to the Vector3 you have provided and send it to all other Clients to override it at their side too. Public Attributes inherited from NetworkTransformBase Name bool clientAuthority float localPositionSensitivity float localRotationSensitivity float localScaleSensitivity Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Protected Attributes Documentation variable targetComponent override Transform targetComponent => transform ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::NetworkTransform"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransform/#mirrornetworktransform","text":"Inherits from NetworkTransformBase , NetworkBehaviour , MonoBehaviour","title":"Mirror::NetworkTransform"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransform/#protected-attributes","text":"Name override Transform targetComponent","title":"Protected Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransform/#additional-inherited-members","text":"Public Classes inherited from NetworkTransformBase Name class DataPoint Public Functions inherited from NetworkTransformBase Name void SerializeIntoWriter ( NetworkWriter writer, Vector3 position, Quaternion rotation, Vector3 scale) virtual override bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual override void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . void ServerTeleport (Vector3 position) Server side teleportation. This method will override this GameObject's current Transform.Position to the Vector3 you have provided and send it to all other Clients to override it at their side too. void ServerTeleport (Vector3 position, Quaternion rotation) Server side teleportation. This method will override this GameObject's current Transform.Position and Transform.Rotation to the Vector3 you have provided and send it to all other Clients to override it at their side too. Public Attributes inherited from NetworkTransformBase Name bool clientAuthority float localPositionSensitivity float localRotationSensitivity float localScaleSensitivity Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransform/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransform/#variable-targetcomponent","text":"override Transform targetComponent => transform ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable targetComponent"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase/","text":"Mirror::NetworkTransformBase Inherits from NetworkBehaviour , MonoBehaviour Inherited by NetworkTransform , NetworkTransformChild Public Classes Name class DataPoint Public Functions Name void SerializeIntoWriter ( NetworkWriter writer, Vector3 position, Quaternion rotation, Vector3 scale) virtual override bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual override void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . void ServerTeleport (Vector3 position) Server side teleportation. This method will override this GameObject's current Transform.Position to the Vector3 you have provided and send it to all other Clients to override it at their side too. void ServerTeleport (Vector3 position, Quaternion rotation) Server side teleportation. This method will override this GameObject's current Transform.Position and Transform.Rotation to the Vector3 you have provided and send it to all other Clients to override it at their side too. Protected Properties Name abstract Transform targetComponent Public Attributes Name bool clientAuthority float localPositionSensitivity float localRotationSensitivity float localScaleSensitivity Additional inherited members Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Public Functions Documentation function SerializeIntoWriter static inline void SerializeIntoWriter ( NetworkWriter writer , Vector3 position , Quaternion rotation , Vector3 scale ) function OnSerialize inline virtual override bool OnSerialize ( NetworkWriter writer , bool initialState ) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . Parameters : writer Writer to use to write to the stream. initialState If this is being called to send initial state. Return : True if data was written. Reimplements : Mirror::NetworkBehaviour::OnSerialize The initialState flag is useful to differentiate between the first time an object is serialized and when incremental updates can be sent. The first time an object is sent to a client, it must include a full state snapshot, but subsequent updates can save on bandwidth by including only incremental changes. Note that SyncVar hook functions are not called when initialState is true, only for incremental updates. If a class has SyncVars, then an implementation of this function and OnDeserialize() are added automatically to the class. So a class that has SyncVars cannot also have custom serialization functions. The OnSerialize function should return true to indicate that an update should be sent. If it returns true, then the dirty bits for that script are set to zero, if it returns false then the dirty bits are not changed. This allows multiple changes to a script to be accumulated over time and sent when the system is ready, instead of every frame. function OnDeserialize inline virtual override void OnDeserialize ( NetworkReader reader , bool initialState ) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . Parameters : reader Reader to read from the stream. initialState True if being sent initial state. Reimplements : Mirror::NetworkBehaviour::OnDeserialize function ServerTeleport inline void ServerTeleport ( Vector3 position ) Server side teleportation. This method will override this GameObject's current Transform.Position to the Vector3 you have provided and send it to all other Clients to override it at their side too. Parameters : position Where to teleport this GameObject function ServerTeleport inline void ServerTeleport ( Vector3 position , Quaternion rotation ) Server side teleportation. This method will override this GameObject's current Transform.Position and Transform.Rotation to the Vector3 you have provided and send it to all other Clients to override it at their side too. Parameters : position Where to teleport this GameObject rotation Which rotation to set this GameObject Protected Property Documentation property targetComponent abstract Transform targetComponent ; Public Attributes Documentation variable clientAuthority bool clientAuthority ; variable localPositionSensitivity float localPositionSensitivity = .01f ; variable localRotationSensitivity float localRotationSensitivity = .01f ; variable localScaleSensitivity float localScaleSensitivity = .01f ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::NetworkTransformBase"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase/#mirrornetworktransformbase","text":"Inherits from NetworkBehaviour , MonoBehaviour Inherited by NetworkTransform , NetworkTransformChild","title":"Mirror::NetworkTransformBase"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase/#public-classes","text":"Name class DataPoint","title":"Public Classes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase/#public-functions","text":"Name void SerializeIntoWriter ( NetworkWriter writer, Vector3 position, Quaternion rotation, Vector3 scale) virtual override bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual override void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . void ServerTeleport (Vector3 position) Server side teleportation. This method will override this GameObject's current Transform.Position to the Vector3 you have provided and send it to all other Clients to override it at their side too. void ServerTeleport (Vector3 position, Quaternion rotation) Server side teleportation. This method will override this GameObject's current Transform.Position and Transform.Rotation to the Vector3 you have provided and send it to all other Clients to override it at their side too.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase/#protected-properties","text":"Name abstract Transform targetComponent","title":"Protected Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase/#public-attributes","text":"Name bool clientAuthority float localPositionSensitivity float localRotationSensitivity float localScaleSensitivity","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase/#additional-inherited-members","text":"Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase/#function-serializeintowriter","text":"static inline void SerializeIntoWriter ( NetworkWriter writer , Vector3 position , Quaternion rotation , Vector3 scale )","title":"function SerializeIntoWriter"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase/#function-onserialize","text":"inline virtual override bool OnSerialize ( NetworkWriter writer , bool initialState ) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . Parameters : writer Writer to use to write to the stream. initialState If this is being called to send initial state. Return : True if data was written. Reimplements : Mirror::NetworkBehaviour::OnSerialize The initialState flag is useful to differentiate between the first time an object is serialized and when incremental updates can be sent. The first time an object is sent to a client, it must include a full state snapshot, but subsequent updates can save on bandwidth by including only incremental changes. Note that SyncVar hook functions are not called when initialState is true, only for incremental updates. If a class has SyncVars, then an implementation of this function and OnDeserialize() are added automatically to the class. So a class that has SyncVars cannot also have custom serialization functions. The OnSerialize function should return true to indicate that an update should be sent. If it returns true, then the dirty bits for that script are set to zero, if it returns false then the dirty bits are not changed. This allows multiple changes to a script to be accumulated over time and sent when the system is ready, instead of every frame.","title":"function OnSerialize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase/#function-ondeserialize","text":"inline virtual override void OnDeserialize ( NetworkReader reader , bool initialState ) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . Parameters : reader Reader to read from the stream. initialState True if being sent initial state. Reimplements : Mirror::NetworkBehaviour::OnDeserialize","title":"function OnDeserialize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase/#function-serverteleport","text":"inline void ServerTeleport ( Vector3 position ) Server side teleportation. This method will override this GameObject's current Transform.Position to the Vector3 you have provided and send it to all other Clients to override it at their side too. Parameters : position Where to teleport this GameObject","title":"function ServerTeleport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase/#function-serverteleport_1","text":"inline void ServerTeleport ( Vector3 position , Quaternion rotation ) Server side teleportation. This method will override this GameObject's current Transform.Position and Transform.Rotation to the Vector3 you have provided and send it to all other Clients to override it at their side too. Parameters : position Where to teleport this GameObject rotation Which rotation to set this GameObject","title":"function ServerTeleport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase/#protected-property-documentation","text":"","title":"Protected Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase/#property-targetcomponent","text":"abstract Transform targetComponent ;","title":"property targetComponent"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase/#variable-clientauthority","text":"bool clientAuthority ;","title":"variable clientAuthority"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase/#variable-localpositionsensitivity","text":"float localPositionSensitivity = .01f ;","title":"variable localPositionSensitivity"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase/#variable-localrotationsensitivity","text":"float localRotationSensitivity = .01f ;","title":"variable localRotationSensitivity"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase/#variable-localscalesensitivity","text":"float localScaleSensitivity = .01f ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable localScaleSensitivity"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase_1_1DataPoint/","text":"Mirror::NetworkTransformBase::DataPoint Public Attributes Name float timeStamp Vector3 localPosition Quaternion localRotation Vector3 localScale float movementSpeed Public Attributes Documentation variable timeStamp float timeStamp ; variable localPosition Vector3 localPosition ; variable localRotation Quaternion localRotation ; variable localScale Vector3 localScale ; variable movementSpeed float movementSpeed ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::NetworkTransformBase::DataPoint"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase_1_1DataPoint/#mirrornetworktransformbasedatapoint","text":"","title":"Mirror::NetworkTransformBase::DataPoint"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase_1_1DataPoint/#public-attributes","text":"Name float timeStamp Vector3 localPosition Quaternion localRotation Vector3 localScale float movementSpeed","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase_1_1DataPoint/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase_1_1DataPoint/#variable-timestamp","text":"float timeStamp ;","title":"variable timeStamp"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase_1_1DataPoint/#variable-localposition","text":"Vector3 localPosition ;","title":"variable localPosition"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase_1_1DataPoint/#variable-localrotation","text":"Quaternion localRotation ;","title":"variable localRotation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase_1_1DataPoint/#variable-localscale","text":"Vector3 localScale ;","title":"variable localScale"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformBase_1_1DataPoint/#variable-movementspeed","text":"float movementSpeed ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable movementSpeed"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformChild/","text":"Mirror::NetworkTransformChild A component to synchronize the position of child transforms of networked objects. More... Inherits from NetworkTransformBase , NetworkBehaviour , MonoBehaviour Public Attributes Name Transform target Protected Attributes Name override Transform targetComponent Additional inherited members Public Classes inherited from NetworkTransformBase Name class DataPoint Public Functions inherited from NetworkTransformBase Name void SerializeIntoWriter ( NetworkWriter writer, Vector3 position, Quaternion rotation, Vector3 scale) virtual override bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual override void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . void ServerTeleport (Vector3 position) Server side teleportation. This method will override this GameObject's current Transform.Position to the Vector3 you have provided and send it to all other Clients to override it at their side too. void ServerTeleport (Vector3 position, Quaternion rotation) Server side teleportation. This method will override this GameObject's current Transform.Position and Transform.Rotation to the Vector3 you have provided and send it to all other Clients to override it at their side too. Public Attributes inherited from NetworkTransformBase Name bool clientAuthority float localPositionSensitivity float localRotationSensitivity float localScaleSensitivity Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Detailed Description class Mirror :: NetworkTransformChild ; A component to synchronize the position of child transforms of networked objects. There must be a NetworkTransform on the root object of the hierarchy. There can be multiple NetworkTransformChild components on an object. This does not use physics for synchronization, it simply synchronizes the localPosition and localRotation of the child transform and lerps towards the recieved values. Public Attributes Documentation variable target Transform target ; Protected Attributes Documentation variable targetComponent override Transform targetComponent => target ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::NetworkTransformChild"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformChild/#mirrornetworktransformchild","text":"A component to synchronize the position of child transforms of networked objects. More... Inherits from NetworkTransformBase , NetworkBehaviour , MonoBehaviour","title":"Mirror::NetworkTransformChild"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformChild/#public-attributes","text":"Name Transform target","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformChild/#protected-attributes","text":"Name override Transform targetComponent","title":"Protected Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformChild/#additional-inherited-members","text":"Public Classes inherited from NetworkTransformBase Name class DataPoint Public Functions inherited from NetworkTransformBase Name void SerializeIntoWriter ( NetworkWriter writer, Vector3 position, Quaternion rotation, Vector3 scale) virtual override bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual override void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . void ServerTeleport (Vector3 position) Server side teleportation. This method will override this GameObject's current Transform.Position to the Vector3 you have provided and send it to all other Clients to override it at their side too. void ServerTeleport (Vector3 position, Quaternion rotation) Server side teleportation. This method will override this GameObject's current Transform.Position and Transform.Rotation to the Vector3 you have provided and send it to all other Clients to override it at their side too. Public Attributes inherited from NetworkTransformBase Name bool clientAuthority float localPositionSensitivity float localRotationSensitivity float localScaleSensitivity Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformChild/#detailed-description","text":"class Mirror :: NetworkTransformChild ; A component to synchronize the position of child transforms of networked objects. There must be a NetworkTransform on the root object of the hierarchy. There can be multiple NetworkTransformChild components on an object. This does not use physics for synchronization, it simply synchronizes the localPosition and localRotation of the child transform and lerps towards the recieved values.","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformChild/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformChild/#variable-target","text":"Transform target ;","title":"variable target"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformChild/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkTransformChild/#variable-targetcomponent","text":"override Transform targetComponent => target ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable targetComponent"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkVisibility/","text":"Mirror::NetworkVisibility Inherits from NetworkBehaviour , MonoBehaviour Inherited by NetworkMatchChecker , NetworkOwnerChecker , NetworkProximityChecker , NetworkSceneChecker Public Functions Name virtual abstract bool OnCheckObserver ( NetworkConnection conn) =0 Callback used by the visibility system to determine if an observer (player) can see this object. virtual abstract void OnRebuildObservers (HashSet< NetworkConnection > observers, bool initialize) =0 Callback used by the visibility system to (re)construct the set of observers that can see this object. virtual void OnSetHostVisibility (bool visible) Callback used by the visibility system for objects on a host. Additional inherited members Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists Public Functions Documentation function OnCheckObserver virtual abstract bool OnCheckObserver ( NetworkConnection conn ) = 0 Callback used by the visibility system to determine if an observer (player) can see this object. Parameters : conn Network connection of a player. Return : True if the player can see this object. Reimplemented by : Mirror::NetworkOwnerChecker::OnCheckObserver , Mirror::NetworkProximityChecker::OnCheckObserver , Mirror::NetworkSceneChecker::OnCheckObserver , Mirror::NetworkMatchChecker::OnCheckObserver If this function returns true, the network connection will be added as an observer. function OnRebuildObservers virtual abstract void OnRebuildObservers ( HashSet < NetworkConnection > observers , bool initialize ) = 0 Callback used by the visibility system to (re)construct the set of observers that can see this object. Parameters : observers The new set of observers for this object. initialize True if the set of observers is being built for the first time. Reimplemented by : Mirror::NetworkOwnerChecker::OnRebuildObservers , Mirror::NetworkProximityChecker::OnRebuildObservers , Mirror::NetworkSceneChecker::OnRebuildObservers , Mirror::NetworkMatchChecker::OnRebuildObservers Implementations of this callback should add network connections of players that can see this object to the observers set. function OnSetHostVisibility inline virtual void OnSetHostVisibility ( bool visible ) Callback used by the visibility system for objects on a host. Parameters : visible New visibility state. Objects on a host (with a local client) cannot be disabled or destroyed when they are not visible to the local client. So this function is called to allow custom code to hide these objects. A typical implementation will disable renderer components on the object. This is only called on local clients on a host. Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::NetworkVisibility"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkVisibility/#mirrornetworkvisibility","text":"Inherits from NetworkBehaviour , MonoBehaviour Inherited by NetworkMatchChecker , NetworkOwnerChecker , NetworkProximityChecker , NetworkSceneChecker","title":"Mirror::NetworkVisibility"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkVisibility/#public-functions","text":"Name virtual abstract bool OnCheckObserver ( NetworkConnection conn) =0 Callback used by the visibility system to determine if an observer (player) can see this object. virtual abstract void OnRebuildObservers (HashSet< NetworkConnection > observers, bool initialize) =0 Callback used by the visibility system to (re)construct the set of observers that can see this object. virtual void OnSetHostVisibility (bool visible) Callback used by the visibility system for objects on a host.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkVisibility/#additional-inherited-members","text":"Public Classes inherited from NetworkBehaviour Name struct NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Public Functions inherited from NetworkBehaviour Name void SetDirtyBit (ulong dirtyBit) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 void ClearAllDirtyBits () This clears all the dirty bits that were set on this script by SetDirtyBits(); bool IsDirty () virtual bool OnSerialize ( NetworkWriter writer, bool initialState) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize() . virtual void OnDeserialize ( NetworkReader reader, bool initialState) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize() . bool SerializeObjectsAll ( NetworkWriter writer) bool SerializeObjectsDelta ( NetworkWriter writer) virtual void OnStartServer () This is invoked for NetworkBehaviour objects when they become active on the server. virtual void OnStopServer () Invoked on the server when the object is unspawned virtual void OnStartClient () Called on every NetworkBehaviour when it is activated on a client. virtual void OnStopClient () This is invoked on clients when the server has caused this object to be destroyed. virtual void OnStartLocalPlayer () Called when the local player object has been set up. virtual void OnStartAuthority () This is invoked on behaviours that have authority, based on context and NetworkIdentity.hasAuthority . virtual void OnStopAuthority () This is invoked on behaviours when authority is removed. Protected Functions inherited from NetworkBehaviour Name bool getSyncVarHookGuard (ulong dirtyBit) void setSyncVarHookGuard (ulong dirtyBit, bool value) void InitSyncObject ( SyncObject syncObject) void SendCommandInternal (Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority =false) void SendRPCInternal (Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) void SendTargetRPCInternal ( NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) bool SyncVarGameObjectEqual (GameObject newGameObject, uint netIdField) void SetSyncVarGameObject (GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) GameObject GetSyncVarGameObject (uint netId, ref GameObject gameObjectField) bool SyncVarNetworkIdentityEqual ( NetworkIdentity newIdentity, uint netIdField) void SetSyncVarNetworkIdentity ( NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) NetworkIdentity GetSyncVarNetworkIdentity (uint netId, ref NetworkIdentity identityField) bool SyncVarNetworkBehaviourEqual< T > (T newBehaviour, NetworkBehaviourSyncVar syncField) void SetSyncVarNetworkBehaviour< T > (T newBehaviour, ref T behaviourField, ulong dirtyBit, ref NetworkBehaviourSyncVar syncField) T GetSyncVarNetworkBehaviour< T > ( NetworkBehaviourSyncVar syncNetBehaviour, ref T behaviourField) bool SyncVarEqual< T > (T value, ref T fieldValue) void SetSyncVar< T > (T value, ref T fieldValue, ulong dirtyBit) virtual bool SerializeSyncVars ( NetworkWriter writer, bool initialState) virtual void DeserializeSyncVars ( NetworkReader reader, bool initialState) Public Properties inherited from NetworkBehaviour Name NetworkIdentity netIdentity Returns the NetworkIdentity of this object int ComponentIndex Returns the index of the component on this object Protected Properties inherited from NetworkBehaviour Name ulong syncVarDirtyBits Public Attributes inherited from NetworkBehaviour Name SyncMode syncMode sync mode for OnSerialize float syncInterval sync interval for OnSerialize (in seconds) bool isServer Returns true if this object is active on an active server. bool isClient Returns true if running as a client and this object was spawned by a server. bool isLocalPlayer This returns true if this object is the one that represents the player on the local machine. bool isServerOnly True if this object only exists on the server bool isClientOnly True if this object exists on a client that is not also acting as a server bool hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. uint netId The unique network Id of this object. NetworkConnection connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the client. NetworkConnection connectionToClient The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server. Protected Attributes inherited from NetworkBehaviour Name readonly List< SyncObject > syncObjects objects that can synchronize themselves, such as synclists","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkVisibility/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkVisibility/#function-oncheckobserver","text":"virtual abstract bool OnCheckObserver ( NetworkConnection conn ) = 0 Callback used by the visibility system to determine if an observer (player) can see this object. Parameters : conn Network connection of a player. Return : True if the player can see this object. Reimplemented by : Mirror::NetworkOwnerChecker::OnCheckObserver , Mirror::NetworkProximityChecker::OnCheckObserver , Mirror::NetworkSceneChecker::OnCheckObserver , Mirror::NetworkMatchChecker::OnCheckObserver If this function returns true, the network connection will be added as an observer.","title":"function OnCheckObserver"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkVisibility/#function-onrebuildobservers","text":"virtual abstract void OnRebuildObservers ( HashSet < NetworkConnection > observers , bool initialize ) = 0 Callback used by the visibility system to (re)construct the set of observers that can see this object. Parameters : observers The new set of observers for this object. initialize True if the set of observers is being built for the first time. Reimplemented by : Mirror::NetworkOwnerChecker::OnRebuildObservers , Mirror::NetworkProximityChecker::OnRebuildObservers , Mirror::NetworkSceneChecker::OnRebuildObservers , Mirror::NetworkMatchChecker::OnRebuildObservers Implementations of this callback should add network connections of players that can see this object to the observers set.","title":"function OnRebuildObservers"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkVisibility/#function-onsethostvisibility","text":"inline virtual void OnSetHostVisibility ( bool visible ) Callback used by the visibility system for objects on a host. Parameters : visible New visibility state. Objects on a host (with a local client) cannot be disabled or destroyed when they are not visible to the local client. So this function is called to allow custom code to hide these objects. A typical implementation will disable renderer components on the object. This is only called on local clients on a host. Updated on 29 January 2021 at 18:34:48 UTC","title":"function OnSetHostVisibility"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriter/","text":"Mirror::NetworkWriter Binary stream Writer. Supports simple types, buffers, arrays, structs, and nested types More... Inherited by PooledNetworkWriter Public Functions Name void Reset () Reset both the position and length of the stream void SetLength (int newLength) Sets length, moves position if it is greater than new length byte [] ToArray () Copys buffer to new array with the size of Length ArraySegment< byte > ToArraySegment () Create an ArraySegment using the buffer and Length void WriteByte (byte value) void WriteBytes (byte [] buffer, int offset, int count) void Write< T > (T value) Writes any type that mirror supports Public Properties Name int Position Next position to write to the buffer Public Attributes Name const int MaxStringLength int Length Number of bytes writen to the buffer Detailed Description class Mirror :: NetworkWriter ; Binary stream Writer. Supports simple types, buffers, arrays, structs, and nested types Use [NetworkWriter.GetWriter] to reduce memory allocation Public Functions Documentation function Reset inline void Reset () Reset both the position and length of the stream Leaves the capacity the same so that we can reuse this writer without extra allocations function SetLength inline void SetLength ( int newLength ) Sets length, moves position if it is greater than new length Parameters : newLength Zeros out any extra length created by setlength function ToArray inline byte [] ToArray () Copys buffer to new array with the size of Length Return : all the data we have written, regardless of the current position function ToArraySegment inline ArraySegment < byte > ToArraySegment () Create an ArraySegment using the buffer and Length Return : all the data we have written, regardless of the current position Dont modify the NetworkWriter while using the ArraySegment as this can overwrite the bytes Use ToArraySegment instead of ToArray to avoid allocations function WriteByte inline void WriteByte ( byte value ) function WriteBytes inline void WriteBytes ( byte [] buffer , int offset , int count ) function Write< T > inline void Write < T > ( T value ) Writes any type that mirror supports Parameters : value Template Parameters : T Public Property Documentation property Position int Position ; Next position to write to the buffer Public Attributes Documentation variable MaxStringLength const int MaxStringLength = 1024 * 32 ; variable Length int Length => length ; Number of bytes writen to the buffer Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::NetworkWriter"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriter/#mirrornetworkwriter","text":"Binary stream Writer. Supports simple types, buffers, arrays, structs, and nested types More... Inherited by PooledNetworkWriter","title":"Mirror::NetworkWriter"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriter/#public-functions","text":"Name void Reset () Reset both the position and length of the stream void SetLength (int newLength) Sets length, moves position if it is greater than new length byte [] ToArray () Copys buffer to new array with the size of Length ArraySegment< byte > ToArraySegment () Create an ArraySegment using the buffer and Length void WriteByte (byte value) void WriteBytes (byte [] buffer, int offset, int count) void Write< T > (T value) Writes any type that mirror supports","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriter/#public-properties","text":"Name int Position Next position to write to the buffer","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriter/#public-attributes","text":"Name const int MaxStringLength int Length Number of bytes writen to the buffer","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriter/#detailed-description","text":"class Mirror :: NetworkWriter ; Binary stream Writer. Supports simple types, buffers, arrays, structs, and nested types Use [NetworkWriter.GetWriter] to reduce memory allocation","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriter/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriter/#function-reset","text":"inline void Reset () Reset both the position and length of the stream Leaves the capacity the same so that we can reuse this writer without extra allocations","title":"function Reset"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriter/#function-setlength","text":"inline void SetLength ( int newLength ) Sets length, moves position if it is greater than new length Parameters : newLength Zeros out any extra length created by setlength","title":"function SetLength"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriter/#function-toarray","text":"inline byte [] ToArray () Copys buffer to new array with the size of Length Return : all the data we have written, regardless of the current position","title":"function ToArray"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriter/#function-toarraysegment","text":"inline ArraySegment < byte > ToArraySegment () Create an ArraySegment using the buffer and Length Return : all the data we have written, regardless of the current position Dont modify the NetworkWriter while using the ArraySegment as this can overwrite the bytes Use ToArraySegment instead of ToArray to avoid allocations","title":"function ToArraySegment"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriter/#function-writebyte","text":"inline void WriteByte ( byte value )","title":"function WriteByte"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriter/#function-writebytes","text":"inline void WriteBytes ( byte [] buffer , int offset , int count )","title":"function WriteBytes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriter/#function-write-t","text":"inline void Write < T > ( T value ) Writes any type that mirror supports Parameters : value Template Parameters : T","title":"function Write&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriter/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriter/#property-position","text":"int Position ; Next position to write to the buffer","title":"property Position"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriter/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriter/#variable-maxstringlength","text":"const int MaxStringLength = 1024 * 32 ;","title":"variable MaxStringLength"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriter/#variable-length","text":"int Length => length ; Number of bytes writen to the buffer Updated on 29 January 2021 at 18:34:48 UTC","title":"variable Length"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/","text":"Mirror::NetworkWriterExtensions Public Functions Name void WriteByte (this NetworkWriter writer, byte value) void WriteSByte (this NetworkWriter writer, sbyte value) void WriteChar (this NetworkWriter writer, char value) void WriteBoolean (this NetworkWriter writer, bool value) void WriteUInt16 (this NetworkWriter writer, ushort value) void WriteInt16 (this NetworkWriter writer, short value) void WriteUInt32 (this NetworkWriter writer, uint value) void WriteInt32 (this NetworkWriter writer, int value) void WriteUInt64 (this NetworkWriter writer, ulong value) void WriteInt64 (this NetworkWriter writer, long value) void WriteSingle (this NetworkWriter writer, float value) void WriteDouble (this NetworkWriter writer, double value) void WriteDecimal (this NetworkWriter writer, decimal value) void WriteString (this NetworkWriter writer, string value) void WriteBytesAndSize (this NetworkWriter writer, byte [] buffer, int offset, int count) void WriteBytesAndSize (this NetworkWriter writer, byte [] buffer) void WriteBytesAndSizeSegment (this NetworkWriter writer, ArraySegment< byte > buffer) void WriteVector2 (this NetworkWriter writer, Vector2 value) void WriteVector3 (this NetworkWriter writer, Vector3 value) void WriteVector4 (this NetworkWriter writer, Vector4 value) void WriteVector2Int (this NetworkWriter writer, Vector2Int value) void WriteVector3Int (this NetworkWriter writer, Vector3Int value) void WriteColor (this NetworkWriter writer, Color value) void WriteColor32 (this NetworkWriter writer, Color32 value) void WriteQuaternion (this NetworkWriter writer, Quaternion value) void WriteRect (this NetworkWriter writer, Rect value) void WritePlane (this NetworkWriter writer, Plane value) void WriteRay (this NetworkWriter writer, Ray value) void WriteMatrix4x4 (this NetworkWriter writer, Matrix4x4 value) void WriteGuid (this NetworkWriter writer, Guid value) void WriteNetworkIdentity (this NetworkWriter writer, NetworkIdentity value) void WriteNetworkBehaviour (this NetworkWriter writer, NetworkBehaviour value) void WriteTransform (this NetworkWriter writer, Transform value) void WriteGameObject (this NetworkWriter writer, GameObject value) void WriteUri (this NetworkWriter writer, Uri uri) void WriteList< T > (this NetworkWriter writer, List< T > list) void WriteArray< T > (this NetworkWriter writer, T [] array) void WriteArraySegment< T > (this NetworkWriter writer, ArraySegment< T > segment) Public Functions Documentation function WriteByte static void WriteByte ( this NetworkWriter writer , byte value ) function WriteSByte static void WriteSByte ( this NetworkWriter writer , sbyte value ) function WriteChar static void WriteChar ( this NetworkWriter writer , char value ) function WriteBoolean static void WriteBoolean ( this NetworkWriter writer , bool value ) function WriteUInt16 static inline void WriteUInt16 ( this NetworkWriter writer , ushort value ) function WriteInt16 static void WriteInt16 ( this NetworkWriter writer , short value ) function WriteUInt32 static inline void WriteUInt32 ( this NetworkWriter writer , uint value ) function WriteInt32 static void WriteInt32 ( this NetworkWriter writer , int value ) function WriteUInt64 static inline void WriteUInt64 ( this NetworkWriter writer , ulong value ) function WriteInt64 static void WriteInt64 ( this NetworkWriter writer , long value ) function WriteSingle static inline void WriteSingle ( this NetworkWriter writer , float value ) function WriteDouble static inline void WriteDouble ( this NetworkWriter writer , double value ) function WriteDecimal static inline void WriteDecimal ( this NetworkWriter writer , decimal value ) function WriteString static inline void WriteString ( this NetworkWriter writer , string value ) function WriteBytesAndSize static inline void WriteBytesAndSize ( this NetworkWriter writer , byte [] buffer , int offset , int count ) function WriteBytesAndSize static inline void WriteBytesAndSize ( this NetworkWriter writer , byte [] buffer ) function WriteBytesAndSizeSegment static inline void WriteBytesAndSizeSegment ( this NetworkWriter writer , ArraySegment < byte > buffer ) function WriteVector2 static inline void WriteVector2 ( this NetworkWriter writer , Vector2 value ) function WriteVector3 static inline void WriteVector3 ( this NetworkWriter writer , Vector3 value ) function WriteVector4 static inline void WriteVector4 ( this NetworkWriter writer , Vector4 value ) function WriteVector2Int static inline void WriteVector2Int ( this NetworkWriter writer , Vector2Int value ) function WriteVector3Int static inline void WriteVector3Int ( this NetworkWriter writer , Vector3Int value ) function WriteColor static inline void WriteColor ( this NetworkWriter writer , Color value ) function WriteColor32 static inline void WriteColor32 ( this NetworkWriter writer , Color32 value ) function WriteQuaternion static inline void WriteQuaternion ( this NetworkWriter writer , Quaternion value ) function WriteRect static inline void WriteRect ( this NetworkWriter writer , Rect value ) function WritePlane static inline void WritePlane ( this NetworkWriter writer , Plane value ) function WriteRay static inline void WriteRay ( this NetworkWriter writer , Ray value ) function WriteMatrix4x4 static inline void WriteMatrix4x4 ( this NetworkWriter writer , Matrix4x4 value ) function WriteGuid static inline void WriteGuid ( this NetworkWriter writer , Guid value ) function WriteNetworkIdentity static inline void WriteNetworkIdentity ( this NetworkWriter writer , NetworkIdentity value ) function WriteNetworkBehaviour static inline void WriteNetworkBehaviour ( this NetworkWriter writer , NetworkBehaviour value ) function WriteTransform static inline void WriteTransform ( this NetworkWriter writer , Transform value ) function WriteGameObject static inline void WriteGameObject ( this NetworkWriter writer , GameObject value ) function WriteUri static inline void WriteUri ( this NetworkWriter writer , Uri uri ) function WriteList< T > static inline void WriteList < T > ( this NetworkWriter writer , List < T > list ) function WriteArray< T > static inline void WriteArray < T > ( this NetworkWriter writer , T [] array ) function WriteArraySegment< T > static inline void WriteArraySegment < T > ( this NetworkWriter writer , ArraySegment < T > segment ) Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::NetworkWriterExtensions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#mirrornetworkwriterextensions","text":"","title":"Mirror::NetworkWriterExtensions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#public-functions","text":"Name void WriteByte (this NetworkWriter writer, byte value) void WriteSByte (this NetworkWriter writer, sbyte value) void WriteChar (this NetworkWriter writer, char value) void WriteBoolean (this NetworkWriter writer, bool value) void WriteUInt16 (this NetworkWriter writer, ushort value) void WriteInt16 (this NetworkWriter writer, short value) void WriteUInt32 (this NetworkWriter writer, uint value) void WriteInt32 (this NetworkWriter writer, int value) void WriteUInt64 (this NetworkWriter writer, ulong value) void WriteInt64 (this NetworkWriter writer, long value) void WriteSingle (this NetworkWriter writer, float value) void WriteDouble (this NetworkWriter writer, double value) void WriteDecimal (this NetworkWriter writer, decimal value) void WriteString (this NetworkWriter writer, string value) void WriteBytesAndSize (this NetworkWriter writer, byte [] buffer, int offset, int count) void WriteBytesAndSize (this NetworkWriter writer, byte [] buffer) void WriteBytesAndSizeSegment (this NetworkWriter writer, ArraySegment< byte > buffer) void WriteVector2 (this NetworkWriter writer, Vector2 value) void WriteVector3 (this NetworkWriter writer, Vector3 value) void WriteVector4 (this NetworkWriter writer, Vector4 value) void WriteVector2Int (this NetworkWriter writer, Vector2Int value) void WriteVector3Int (this NetworkWriter writer, Vector3Int value) void WriteColor (this NetworkWriter writer, Color value) void WriteColor32 (this NetworkWriter writer, Color32 value) void WriteQuaternion (this NetworkWriter writer, Quaternion value) void WriteRect (this NetworkWriter writer, Rect value) void WritePlane (this NetworkWriter writer, Plane value) void WriteRay (this NetworkWriter writer, Ray value) void WriteMatrix4x4 (this NetworkWriter writer, Matrix4x4 value) void WriteGuid (this NetworkWriter writer, Guid value) void WriteNetworkIdentity (this NetworkWriter writer, NetworkIdentity value) void WriteNetworkBehaviour (this NetworkWriter writer, NetworkBehaviour value) void WriteTransform (this NetworkWriter writer, Transform value) void WriteGameObject (this NetworkWriter writer, GameObject value) void WriteUri (this NetworkWriter writer, Uri uri) void WriteList< T > (this NetworkWriter writer, List< T > list) void WriteArray< T > (this NetworkWriter writer, T [] array) void WriteArraySegment< T > (this NetworkWriter writer, ArraySegment< T > segment)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writebyte","text":"static void WriteByte ( this NetworkWriter writer , byte value )","title":"function WriteByte"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writesbyte","text":"static void WriteSByte ( this NetworkWriter writer , sbyte value )","title":"function WriteSByte"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writechar","text":"static void WriteChar ( this NetworkWriter writer , char value )","title":"function WriteChar"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writeboolean","text":"static void WriteBoolean ( this NetworkWriter writer , bool value )","title":"function WriteBoolean"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writeuint16","text":"static inline void WriteUInt16 ( this NetworkWriter writer , ushort value )","title":"function WriteUInt16"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writeint16","text":"static void WriteInt16 ( this NetworkWriter writer , short value )","title":"function WriteInt16"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writeuint32","text":"static inline void WriteUInt32 ( this NetworkWriter writer , uint value )","title":"function WriteUInt32"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writeint32","text":"static void WriteInt32 ( this NetworkWriter writer , int value )","title":"function WriteInt32"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writeuint64","text":"static inline void WriteUInt64 ( this NetworkWriter writer , ulong value )","title":"function WriteUInt64"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writeint64","text":"static void WriteInt64 ( this NetworkWriter writer , long value )","title":"function WriteInt64"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writesingle","text":"static inline void WriteSingle ( this NetworkWriter writer , float value )","title":"function WriteSingle"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writedouble","text":"static inline void WriteDouble ( this NetworkWriter writer , double value )","title":"function WriteDouble"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writedecimal","text":"static inline void WriteDecimal ( this NetworkWriter writer , decimal value )","title":"function WriteDecimal"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writestring","text":"static inline void WriteString ( this NetworkWriter writer , string value )","title":"function WriteString"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writebytesandsize","text":"static inline void WriteBytesAndSize ( this NetworkWriter writer , byte [] buffer , int offset , int count )","title":"function WriteBytesAndSize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writebytesandsize_1","text":"static inline void WriteBytesAndSize ( this NetworkWriter writer , byte [] buffer )","title":"function WriteBytesAndSize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writebytesandsizesegment","text":"static inline void WriteBytesAndSizeSegment ( this NetworkWriter writer , ArraySegment < byte > buffer )","title":"function WriteBytesAndSizeSegment"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writevector2","text":"static inline void WriteVector2 ( this NetworkWriter writer , Vector2 value )","title":"function WriteVector2"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writevector3","text":"static inline void WriteVector3 ( this NetworkWriter writer , Vector3 value )","title":"function WriteVector3"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writevector4","text":"static inline void WriteVector4 ( this NetworkWriter writer , Vector4 value )","title":"function WriteVector4"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writevector2int","text":"static inline void WriteVector2Int ( this NetworkWriter writer , Vector2Int value )","title":"function WriteVector2Int"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writevector3int","text":"static inline void WriteVector3Int ( this NetworkWriter writer , Vector3Int value )","title":"function WriteVector3Int"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writecolor","text":"static inline void WriteColor ( this NetworkWriter writer , Color value )","title":"function WriteColor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writecolor32","text":"static inline void WriteColor32 ( this NetworkWriter writer , Color32 value )","title":"function WriteColor32"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writequaternion","text":"static inline void WriteQuaternion ( this NetworkWriter writer , Quaternion value )","title":"function WriteQuaternion"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writerect","text":"static inline void WriteRect ( this NetworkWriter writer , Rect value )","title":"function WriteRect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writeplane","text":"static inline void WritePlane ( this NetworkWriter writer , Plane value )","title":"function WritePlane"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writeray","text":"static inline void WriteRay ( this NetworkWriter writer , Ray value )","title":"function WriteRay"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writematrix4x4","text":"static inline void WriteMatrix4x4 ( this NetworkWriter writer , Matrix4x4 value )","title":"function WriteMatrix4x4"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writeguid","text":"static inline void WriteGuid ( this NetworkWriter writer , Guid value )","title":"function WriteGuid"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writenetworkidentity","text":"static inline void WriteNetworkIdentity ( this NetworkWriter writer , NetworkIdentity value )","title":"function WriteNetworkIdentity"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writenetworkbehaviour","text":"static inline void WriteNetworkBehaviour ( this NetworkWriter writer , NetworkBehaviour value )","title":"function WriteNetworkBehaviour"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writetransform","text":"static inline void WriteTransform ( this NetworkWriter writer , Transform value )","title":"function WriteTransform"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writegameobject","text":"static inline void WriteGameObject ( this NetworkWriter writer , GameObject value )","title":"function WriteGameObject"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writeuri","text":"static inline void WriteUri ( this NetworkWriter writer , Uri uri )","title":"function WriteUri"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writelist-t","text":"static inline void WriteList < T > ( this NetworkWriter writer , List < T > list )","title":"function WriteList&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writearray-t","text":"static inline void WriteArray < T > ( this NetworkWriter writer , T [] array )","title":"function WriteArray&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterExtensions/#function-writearraysegment-t","text":"static inline void WriteArraySegment < T > ( this NetworkWriter writer , ArraySegment < T > segment ) Updated on 29 January 2021 at 18:34:48 UTC","title":"function WriteArraySegment&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterPool/","text":"Mirror::NetworkWriterPool Pool of NetworkWriters More... Public Functions Name PooledNetworkWriter GetWriter () Get the next writer in the pool void Recycle ( PooledNetworkWriter writer) Puts writer back into pool Detailed Description class Mirror :: NetworkWriterPool ; Pool of NetworkWriters Use this pool instead of NetworkWriter to reduce memory allocation Public Functions Documentation function GetWriter static inline PooledNetworkWriter GetWriter () Get the next writer in the pool If pool is empty, creates a new Writer function Recycle static inline void Recycle ( PooledNetworkWriter writer ) Puts writer back into pool When pool is full, the extra writer is left for the GC Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::NetworkWriterPool"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterPool/#mirrornetworkwriterpool","text":"Pool of NetworkWriters More...","title":"Mirror::NetworkWriterPool"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterPool/#public-functions","text":"Name PooledNetworkWriter GetWriter () Get the next writer in the pool void Recycle ( PooledNetworkWriter writer) Puts writer back into pool","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterPool/#detailed-description","text":"class Mirror :: NetworkWriterPool ; Pool of NetworkWriters Use this pool instead of NetworkWriter to reduce memory allocation","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterPool/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterPool/#function-getwriter","text":"static inline PooledNetworkWriter GetWriter () Get the next writer in the pool If pool is empty, creates a new Writer","title":"function GetWriter"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1NetworkWriterPool/#function-recycle","text":"static inline void Recycle ( PooledNetworkWriter writer ) Puts writer back into pool When pool is full, the extra writer is left for the GC Updated on 29 January 2021 at 18:34:48 UTC","title":"function Recycle"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Pool/","text":"Mirror::Pool More... Public Functions Name Pool (Func< T > objectGenerator) T Take () void Return (T item) Public Attributes Name int Count Detailed Description template < T > class Mirror :: Pool ; Public Functions Documentation function Pool inline Pool ( Func < T > objectGenerator ) function Take T Take () function Return void Return ( T item ) Public Attributes Documentation variable Count int Count => objects . Count ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Pool"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Pool/#mirrorpool","text":"More...","title":"Mirror::Pool"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Pool/#public-functions","text":"Name Pool (Func< T > objectGenerator) T Take () void Return (T item)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Pool/#public-attributes","text":"Name int Count","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Pool/#detailed-description","text":"template < T > class Mirror :: Pool ;","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Pool/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Pool/#function-pool","text":"inline Pool ( Func < T > objectGenerator )","title":"function Pool"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Pool/#function-take","text":"T Take ()","title":"function Take"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Pool/#function-return","text":"void Return ( T item )","title":"function Return"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Pool/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Pool/#variable-count","text":"int Count => objects . Count ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable Count"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1PooledNetworkReader/","text":"Mirror::PooledNetworkReader NetworkReader to be used with [NetworkReaderPool] Inherits from NetworkReader , IDisposable Public Functions Name void Dispose () Additional inherited members Public Functions inherited from NetworkReader Name NetworkReader (byte [] bytes) NetworkReader (ArraySegment< byte > segment) byte ReadByte () byte [] ReadBytes (byte [] bytes, int count) read bytes into bytes ArraySegment< byte > ReadBytesSegment (int count) Create Segment from current position override string ToString () Information about reader: pos, len, buffer contents T Read< T > () Reads any data type that mirror supports Public Attributes inherited from NetworkReader Name int Position Next position to read from the buffer int Length Total number of bytes to read from buffer Public Functions Documentation function Dispose inline void Dispose () Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::PooledNetworkReader"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1PooledNetworkReader/#mirrorpoolednetworkreader","text":"NetworkReader to be used with [NetworkReaderPool] Inherits from NetworkReader , IDisposable","title":"Mirror::PooledNetworkReader"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1PooledNetworkReader/#public-functions","text":"Name void Dispose ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1PooledNetworkReader/#additional-inherited-members","text":"Public Functions inherited from NetworkReader Name NetworkReader (byte [] bytes) NetworkReader (ArraySegment< byte > segment) byte ReadByte () byte [] ReadBytes (byte [] bytes, int count) read bytes into bytes ArraySegment< byte > ReadBytesSegment (int count) Create Segment from current position override string ToString () Information about reader: pos, len, buffer contents T Read< T > () Reads any data type that mirror supports Public Attributes inherited from NetworkReader Name int Position Next position to read from the buffer int Length Total number of bytes to read from buffer","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1PooledNetworkReader/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1PooledNetworkReader/#function-dispose","text":"inline void Dispose () Updated on 29 January 2021 at 18:34:48 UTC","title":"function Dispose"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1PooledNetworkWriter/","text":"Mirror::PooledNetworkWriter NetworkWriter to be used with [NetworkWriterPool] Inherits from NetworkWriter , IDisposable Public Functions Name void Dispose () Additional inherited members Public Functions inherited from NetworkWriter Name void Reset () Reset both the position and length of the stream void SetLength (int newLength) Sets length, moves position if it is greater than new length byte [] ToArray () Copys buffer to new array with the size of Length ArraySegment< byte > ToArraySegment () Create an ArraySegment using the buffer and Length void WriteByte (byte value) void WriteBytes (byte [] buffer, int offset, int count) void Write< T > (T value) Writes any type that mirror supports Public Properties inherited from NetworkWriter Name int Position Next position to write to the buffer Public Attributes inherited from NetworkWriter Name const int MaxStringLength int Length Number of bytes writen to the buffer Public Functions Documentation function Dispose inline void Dispose () Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::PooledNetworkWriter"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1PooledNetworkWriter/#mirrorpoolednetworkwriter","text":"NetworkWriter to be used with [NetworkWriterPool] Inherits from NetworkWriter , IDisposable","title":"Mirror::PooledNetworkWriter"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1PooledNetworkWriter/#public-functions","text":"Name void Dispose ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1PooledNetworkWriter/#additional-inherited-members","text":"Public Functions inherited from NetworkWriter Name void Reset () Reset both the position and length of the stream void SetLength (int newLength) Sets length, moves position if it is greater than new length byte [] ToArray () Copys buffer to new array with the size of Length ArraySegment< byte > ToArraySegment () Create an ArraySegment using the buffer and Length void WriteByte (byte value) void WriteBytes (byte [] buffer, int offset, int count) void Write< T > (T value) Writes any type that mirror supports Public Properties inherited from NetworkWriter Name int Position Next position to write to the buffer Public Attributes inherited from NetworkWriter Name const int MaxStringLength int Length Number of bytes writen to the buffer","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1PooledNetworkWriter/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1PooledNetworkWriter/#function-dispose","text":"inline void Dispose () Updated on 29 January 2021 at 18:34:48 UTC","title":"function Dispose"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1PreprocessorDefine/","text":"Mirror::PreprocessorDefine Public Functions Name void AddDefineSymbols () Add define symbols as soon as Unity gets done compiling. Public Functions Documentation function AddDefineSymbols static inline void AddDefineSymbols () Add define symbols as soon as Unity gets done compiling. Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::PreprocessorDefine"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1PreprocessorDefine/#mirrorpreprocessordefine","text":"","title":"Mirror::PreprocessorDefine"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1PreprocessorDefine/#public-functions","text":"Name void AddDefineSymbols () Add define symbols as soon as Unity gets done compiling.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1PreprocessorDefine/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1PreprocessorDefine/#function-adddefinesymbols","text":"static inline void AddDefineSymbols () Add define symbols as soon as Unity gets done compiling. Updated on 29 January 2021 at 18:34:48 UTC","title":"function AddDefineSymbols"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Reader/","text":"Mirror::Reader a class that holds readers for the different types Note that c# creates a different static variable for each type This will be populated by the weaver More... Public Attributes Name Func< NetworkReader , T > read Detailed Description template < T > class Mirror :: Reader ; a class that holds readers for the different types Note that c# creates a different static variable for each type This will be populated by the weaver Template Parameters : T Public Attributes Documentation variable read static Func < NetworkReader , T > read ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Reader"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Reader/#mirrorreader","text":"a class that holds readers for the different types Note that c# creates a different static variable for each type This will be populated by the weaver More...","title":"Mirror::Reader"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Reader/#public-attributes","text":"Name Func< NetworkReader , T > read","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Reader/#detailed-description","text":"template < T > class Mirror :: Reader ; a class that holds readers for the different types Note that c# creates a different static variable for each type This will be populated by the weaver Template Parameters : T","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Reader/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Reader/#variable-read","text":"static Func < NetworkReader , T > read ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable read"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1RemoteCalls_1_1Invoker/","text":"Mirror::RemoteCalls::Invoker Public Functions Name bool AreEqual (Type invokeClass, MirrorInvokeType invokeType, CmdDelegate invokeFunction) Public Attributes Name Type invokeClass MirrorInvokeType invokeType CmdDelegate invokeFunction bool cmdIgnoreAuthority Public Functions Documentation function AreEqual inline bool AreEqual ( Type invokeClass , MirrorInvokeType invokeType , CmdDelegate invokeFunction ) Public Attributes Documentation variable invokeClass Type invokeClass ; variable invokeType MirrorInvokeType invokeType ; variable invokeFunction CmdDelegate invokeFunction ; variable cmdIgnoreAuthority bool cmdIgnoreAuthority ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::RemoteCalls::Invoker"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1RemoteCalls_1_1Invoker/#mirrorremotecallsinvoker","text":"","title":"Mirror::RemoteCalls::Invoker"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1RemoteCalls_1_1Invoker/#public-functions","text":"Name bool AreEqual (Type invokeClass, MirrorInvokeType invokeType, CmdDelegate invokeFunction)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1RemoteCalls_1_1Invoker/#public-attributes","text":"Name Type invokeClass MirrorInvokeType invokeType CmdDelegate invokeFunction bool cmdIgnoreAuthority","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1RemoteCalls_1_1Invoker/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1RemoteCalls_1_1Invoker/#function-areequal","text":"inline bool AreEqual ( Type invokeClass , MirrorInvokeType invokeType , CmdDelegate invokeFunction )","title":"function AreEqual"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1RemoteCalls_1_1Invoker/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1RemoteCalls_1_1Invoker/#variable-invokeclass","text":"Type invokeClass ;","title":"variable invokeClass"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1RemoteCalls_1_1Invoker/#variable-invoketype","text":"MirrorInvokeType invokeType ;","title":"variable invokeType"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1RemoteCalls_1_1Invoker/#variable-invokefunction","text":"CmdDelegate invokeFunction ;","title":"variable invokeFunction"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1RemoteCalls_1_1Invoker/#variable-cmdignoreauthority","text":"bool cmdIgnoreAuthority ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable cmdIgnoreAuthority"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1RemoteCalls_1_1RemoteCallHelper/","text":"Mirror::RemoteCalls::RemoteCallHelper Used to help manage remote calls for NetworkBehaviours Public Functions Name void RegisterCommandDelegate (Type invokeClass, string cmdName, CmdDelegate func, bool ignoreAuthority) void RegisterRpcDelegate (Type invokeClass, string rpcName, CmdDelegate func) CmdDelegate GetDelegate (int cmdHash) Gets the handler function for a given hash Can be used by profilers and debuggers Public Functions Documentation function RegisterCommandDelegate static inline void RegisterCommandDelegate ( Type invokeClass , string cmdName , CmdDelegate func , bool ignoreAuthority ) function RegisterRpcDelegate static inline void RegisterRpcDelegate ( Type invokeClass , string rpcName , CmdDelegate func ) function GetDelegate static inline CmdDelegate GetDelegate ( int cmdHash ) Gets the handler function for a given hash Can be used by profilers and debuggers Parameters : cmdHash rpc function hash Return : The function delegate that will handle the command Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::RemoteCalls::RemoteCallHelper"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1RemoteCalls_1_1RemoteCallHelper/#mirrorremotecallsremotecallhelper","text":"Used to help manage remote calls for NetworkBehaviours","title":"Mirror::RemoteCalls::RemoteCallHelper"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1RemoteCalls_1_1RemoteCallHelper/#public-functions","text":"Name void RegisterCommandDelegate (Type invokeClass, string cmdName, CmdDelegate func, bool ignoreAuthority) void RegisterRpcDelegate (Type invokeClass, string rpcName, CmdDelegate func) CmdDelegate GetDelegate (int cmdHash) Gets the handler function for a given hash Can be used by profilers and debuggers","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1RemoteCalls_1_1RemoteCallHelper/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1RemoteCalls_1_1RemoteCallHelper/#function-registercommanddelegate","text":"static inline void RegisterCommandDelegate ( Type invokeClass , string cmdName , CmdDelegate func , bool ignoreAuthority )","title":"function RegisterCommandDelegate"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1RemoteCalls_1_1RemoteCallHelper/#function-registerrpcdelegate","text":"static inline void RegisterRpcDelegate ( Type invokeClass , string rpcName , CmdDelegate func )","title":"function RegisterRpcDelegate"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1RemoteCalls_1_1RemoteCallHelper/#function-getdelegate","text":"static inline CmdDelegate GetDelegate ( int cmdHash ) Gets the handler function for a given hash Can be used by profilers and debuggers Parameters : cmdHash rpc function hash Return : The function delegate that will handle the command Updated on 29 January 2021 at 18:34:49 UTC","title":"function GetDelegate"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SceneAttribute/","text":"Mirror::SceneAttribute Converts a string property into a Scene property in the inspector Inherits from PropertyAttribute Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SceneAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SceneAttribute/#mirrorsceneattribute","text":"Converts a string property into a Scene property in the inspector Inherits from PropertyAttribute Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SceneAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SceneDrawer/","text":"Mirror::SceneDrawer Inherits from PropertyDrawer Public Functions Name override void OnGUI (Rect position, SerializedProperty property, GUIContent label) Protected Functions Name SceneAsset GetBuildSettingsSceneObject (string sceneName) Public Functions Documentation function OnGUI inline override void OnGUI ( Rect position , SerializedProperty property , GUIContent label ) Protected Functions Documentation function GetBuildSettingsSceneObject inline SceneAsset GetBuildSettingsSceneObject ( string sceneName ) Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SceneDrawer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SceneDrawer/#mirrorscenedrawer","text":"Inherits from PropertyDrawer","title":"Mirror::SceneDrawer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SceneDrawer/#public-functions","text":"Name override void OnGUI (Rect position, SerializedProperty property, GUIContent label)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SceneDrawer/#protected-functions","text":"Name SceneAsset GetBuildSettingsSceneObject (string sceneName)","title":"Protected Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SceneDrawer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SceneDrawer/#function-ongui","text":"inline override void OnGUI ( Rect position , SerializedProperty property , GUIContent label )","title":"function OnGUI"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SceneDrawer/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SceneDrawer/#function-getbuildsettingssceneobject","text":"inline SceneAsset GetBuildSettingsSceneObject ( string sceneName ) Updated on 29 January 2021 at 18:34:48 UTC","title":"function GetBuildSettingsSceneObject"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ServerAttribute/","text":"Mirror::ServerAttribute Prevents clients from running this method. More... Inherits from Attribute Detailed Description class Mirror :: ServerAttribute ; Prevents clients from running this method. Prints a warning if a client tries to execute this method. Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::ServerAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ServerAttribute/#mirrorserverattribute","text":"Prevents clients from running this method. More... Inherits from Attribute","title":"Mirror::ServerAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ServerAttribute/#detailed-description","text":"class Mirror :: ServerAttribute ; Prevents clients from running this method. Prints a warning if a client tries to execute this method. Updated on 29 January 2021 at 18:34:48 UTC","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ServerCallbackAttribute/","text":"Mirror::ServerCallbackAttribute Prevents clients from running this method. More... Inherits from Attribute Detailed Description class Mirror :: ServerCallbackAttribute ; Prevents clients from running this method. No warning is thrown. Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::ServerCallbackAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ServerCallbackAttribute/#mirrorservercallbackattribute","text":"Prevents clients from running this method. More... Inherits from Attribute","title":"Mirror::ServerCallbackAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ServerCallbackAttribute/#detailed-description","text":"class Mirror :: ServerCallbackAttribute ; Prevents clients from running this method. No warning is thrown. Updated on 29 January 2021 at 18:34:48 UTC","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ShowInInspectorAttribute/","text":"Mirror::ShowInInspectorAttribute Used to show private SyncList in the inspector, More... Inherits from Attribute Detailed Description class Mirror :: ShowInInspectorAttribute ; Used to show private SyncList in the inspector, Use instead of SerializeField for non Serializable types Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::ShowInInspectorAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ShowInInspectorAttribute/#mirrorshowininspectorattribute","text":"Used to show private SyncList in the inspector, More... Inherits from Attribute","title":"Mirror::ShowInInspectorAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ShowInInspectorAttribute/#detailed-description","text":"class Mirror :: ShowInInspectorAttribute ; Used to show private SyncList in the inspector, Use instead of SerializeField for non Serializable types Updated on 29 January 2021 at 18:34:48 UTC","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ArrayBuffer/","text":"Mirror::SimpleWeb::ArrayBuffer Inherits from IDisposable Public Functions Name void SetReleasesRequired (int required) How many times release needs to be called before buffer is returned to pool ArrayBuffer ( IBufferOwner owner, int size) void Release () void Dispose () void CopyTo (byte [] target, int offset) void CopyFrom (ArraySegment< byte > segment) void CopyFrom (byte [] source, int offset, int length) void CopyFrom (IntPtr bufferPtr, int length) ArraySegment< byte > ToSegment () Public Attributes Name readonly byte [] array Public Functions Documentation function SetReleasesRequired inline void SetReleasesRequired ( int required ) How many times release needs to be called before buffer is returned to pool This allows the buffer to be used in multiple places at the same time function ArrayBuffer inline ArrayBuffer ( IBufferOwner owner , int size ) function Release inline void Release () function Dispose inline void Dispose () function CopyTo inline void CopyTo ( byte [] target , int offset ) function CopyFrom inline void CopyFrom ( ArraySegment < byte > segment ) function CopyFrom inline void CopyFrom ( byte [] source , int offset , int length ) function CopyFrom inline void CopyFrom ( IntPtr bufferPtr , int length ) function ToSegment inline ArraySegment < byte > ToSegment () Public Attributes Documentation variable array readonly byte [] array ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::ArrayBuffer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ArrayBuffer/#mirrorsimplewebarraybuffer","text":"Inherits from IDisposable","title":"Mirror::SimpleWeb::ArrayBuffer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ArrayBuffer/#public-functions","text":"Name void SetReleasesRequired (int required) How many times release needs to be called before buffer is returned to pool ArrayBuffer ( IBufferOwner owner, int size) void Release () void Dispose () void CopyTo (byte [] target, int offset) void CopyFrom (ArraySegment< byte > segment) void CopyFrom (byte [] source, int offset, int length) void CopyFrom (IntPtr bufferPtr, int length) ArraySegment< byte > ToSegment ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ArrayBuffer/#public-attributes","text":"Name readonly byte [] array","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ArrayBuffer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ArrayBuffer/#function-setreleasesrequired","text":"inline void SetReleasesRequired ( int required ) How many times release needs to be called before buffer is returned to pool This allows the buffer to be used in multiple places at the same time","title":"function SetReleasesRequired"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ArrayBuffer/#function-arraybuffer","text":"inline ArrayBuffer ( IBufferOwner owner , int size )","title":"function ArrayBuffer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ArrayBuffer/#function-release","text":"inline void Release ()","title":"function Release"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ArrayBuffer/#function-dispose","text":"inline void Dispose ()","title":"function Dispose"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ArrayBuffer/#function-copyto","text":"inline void CopyTo ( byte [] target , int offset )","title":"function CopyTo"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ArrayBuffer/#function-copyfrom","text":"inline void CopyFrom ( ArraySegment < byte > segment )","title":"function CopyFrom"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ArrayBuffer/#function-copyfrom_1","text":"inline void CopyFrom ( byte [] source , int offset , int length )","title":"function CopyFrom"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ArrayBuffer/#function-copyfrom_2","text":"inline void CopyFrom ( IntPtr bufferPtr , int length )","title":"function CopyFrom"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ArrayBuffer/#function-tosegment","text":"inline ArraySegment < byte > ToSegment ()","title":"function ToSegment"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ArrayBuffer/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ArrayBuffer/#variable-array","text":"readonly byte [] array ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable array"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1BufferBucket/","text":"Mirror::SimpleWeb::BufferBucket Inherits from IBufferOwner Public Functions Name BufferBucket (int arraySize) ArrayBuffer Take () void Return ( ArrayBuffer buffer) Public Attributes Name readonly int arraySize Public Functions Documentation function BufferBucket inline BufferBucket ( int arraySize ) function Take inline ArrayBuffer Take () function Return inline void Return ( ArrayBuffer buffer ) Public Attributes Documentation variable arraySize readonly int arraySize ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::BufferBucket"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1BufferBucket/#mirrorsimplewebbufferbucket","text":"Inherits from IBufferOwner","title":"Mirror::SimpleWeb::BufferBucket"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1BufferBucket/#public-functions","text":"Name BufferBucket (int arraySize) ArrayBuffer Take () void Return ( ArrayBuffer buffer)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1BufferBucket/#public-attributes","text":"Name readonly int arraySize","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1BufferBucket/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1BufferBucket/#function-bufferbucket","text":"inline BufferBucket ( int arraySize )","title":"function BufferBucket"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1BufferBucket/#function-take","text":"inline ArrayBuffer Take ()","title":"function Take"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1BufferBucket/#function-return","text":"inline void Return ( ArrayBuffer buffer )","title":"function Return"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1BufferBucket/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1BufferBucket/#variable-arraysize","text":"readonly int arraySize ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable arraySize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1BufferPool/","text":"Mirror::SimpleWeb::BufferPool Collection of different sized buffers More... Public Functions Name BufferPool (int bucketCount, int smallest, int largest) ArrayBuffer Take (int size) Detailed Description class Mirror :: SimpleWeb :: BufferPool ; Collection of different sized buffers Problem: Need to cached byte[] so that new ones arn't created each time Arrays sent are multiple different sizes Some message might be big so need buffers to cover that size Most messages will be small compared to max message size Solution: Create multiple groups of buffers covering the range of allowed sizes Split range exponentially (using math.log) so that there are more groups for small buffers Public Functions Documentation function BufferPool inline BufferPool ( int bucketCount , int smallest , int largest ) function Take inline ArrayBuffer Take ( int size ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::BufferPool"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1BufferPool/#mirrorsimplewebbufferpool","text":"Collection of different sized buffers More...","title":"Mirror::SimpleWeb::BufferPool"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1BufferPool/#public-functions","text":"Name BufferPool (int bucketCount, int smallest, int largest) ArrayBuffer Take (int size)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1BufferPool/#detailed-description","text":"class Mirror :: SimpleWeb :: BufferPool ; Collection of different sized buffers Problem: Need to cached byte[] so that new ones arn't created each time Arrays sent are multiple different sizes Some message might be big so need buffers to cover that size Most messages will be small compared to max message size Solution: Create multiple groups of buffers covering the range of allowed sizes Split range exponentially (using math.log) so that there are more groups for small buffers","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1BufferPool/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1BufferPool/#function-bufferpool","text":"inline BufferPool ( int bucketCount , int smallest , int largest )","title":"function BufferPool"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1BufferPool/#function-take","text":"inline ArrayBuffer Take ( int size ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function Take"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ClientHandshake/","text":"Mirror::SimpleWeb::ClientHandshake Handles Handshake to the server when it first connects More... Public Functions Name bool TryHandshake (Connection conn, Uri uri) Detailed Description class Mirror :: SimpleWeb :: ClientHandshake ; Handles Handshake to the server when it first connects The client handshake does not need buffers to reduce allocations since it only happens once Public Functions Documentation function TryHandshake inline bool TryHandshake ( Connection conn , Uri uri ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::ClientHandshake"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ClientHandshake/#mirrorsimplewebclienthandshake","text":"Handles Handshake to the server when it first connects More...","title":"Mirror::SimpleWeb::ClientHandshake"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ClientHandshake/#public-functions","text":"Name bool TryHandshake (Connection conn, Uri uri)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ClientHandshake/#detailed-description","text":"class Mirror :: SimpleWeb :: ClientHandshake ; Handles Handshake to the server when it first connects The client handshake does not need buffers to reduce allocations since it only happens once","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ClientHandshake/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ClientHandshake/#function-tryhandshake","text":"inline bool TryHandshake ( Connection conn , Uri uri ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function TryHandshake"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ClientSslHelper/","text":"Mirror::SimpleWeb::ClientSslHelper Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::ClientSslHelper"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ClientSslHelper/#mirrorsimplewebclientsslhelper","text":"Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::ClientSslHelper"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Connection/","text":"Mirror::SimpleWeb::Connection Inherits from IDisposable Public Functions Name Connection (TcpClient client, Action< Connection > onDispose) void Dispose () disposes client and stops threads override string ToString () Public Attributes Name const int IdNotSet TcpClient client int connId Stream stream Thread receiveThread Thread sendThread ManualResetEventSlim sendPending ConcurrentQueue< ArrayBuffer > sendQueue Action< Connection > onDispose Public Functions Documentation function Connection inline Connection ( TcpClient client , Action < Connection > onDispose ) function Dispose inline void Dispose () disposes client and stops threads function ToString inline override string ToString () Public Attributes Documentation variable IdNotSet const int IdNotSet = -1 ; variable client TcpClient client ; variable connId int connId = IdNotSet ; variable stream Stream stream ; variable receiveThread Thread receiveThread ; variable sendThread Thread sendThread ; variable sendPending ManualResetEventSlim sendPending = new ManualResetEventSlim ( false ); variable sendQueue ConcurrentQueue < ArrayBuffer > sendQueue = new ConcurrentQueue < [ ArrayBuffer ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1SimpleWeb_1_1ArrayBuffer / ) > (); variable onDispose Action < Connection > onDispose ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::Connection"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Connection/#mirrorsimplewebconnection","text":"Inherits from IDisposable","title":"Mirror::SimpleWeb::Connection"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Connection/#public-functions","text":"Name Connection (TcpClient client, Action< Connection > onDispose) void Dispose () disposes client and stops threads override string ToString ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Connection/#public-attributes","text":"Name const int IdNotSet TcpClient client int connId Stream stream Thread receiveThread Thread sendThread ManualResetEventSlim sendPending ConcurrentQueue< ArrayBuffer > sendQueue Action< Connection > onDispose","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Connection/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Connection/#function-connection","text":"inline Connection ( TcpClient client , Action < Connection > onDispose )","title":"function Connection"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Connection/#function-dispose","text":"inline void Dispose () disposes client and stops threads","title":"function Dispose"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Connection/#function-tostring","text":"inline override string ToString ()","title":"function ToString"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Connection/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Connection/#variable-idnotset","text":"const int IdNotSet = -1 ;","title":"variable IdNotSet"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Connection/#variable-client","text":"TcpClient client ;","title":"variable client"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Connection/#variable-connid","text":"int connId = IdNotSet ;","title":"variable connId"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Connection/#variable-stream","text":"Stream stream ;","title":"variable stream"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Connection/#variable-receivethread","text":"Thread receiveThread ;","title":"variable receiveThread"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Connection/#variable-sendthread","text":"Thread sendThread ;","title":"variable sendThread"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Connection/#variable-sendpending","text":"ManualResetEventSlim sendPending = new ManualResetEventSlim ( false );","title":"variable sendPending"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Connection/#variable-sendqueue","text":"ConcurrentQueue < ArrayBuffer > sendQueue = new ConcurrentQueue < [ ArrayBuffer ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classMirror_1_1SimpleWeb_1_1ArrayBuffer / ) > ();","title":"variable sendQueue"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Connection/#variable-ondispose","text":"Action < Connection > onDispose ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable onDispose"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Constants/","text":"Mirror::SimpleWeb::Constants Constant values that should never change More... Public Attributes Name const int HeaderSize Header is at most 4 bytes const int HeaderMinSize Smallest size of header const int ShortLength bytes for short length const int MaskSize Message mask is always 4 bytes const int BytePayloadLength Max size of a message for length to be 1 byte long const int UshortPayloadLength if payload length is 126 when next 2 bytes will be the length const int UlongPayloadLength if payload length is 127 when next 8 bytes will be the length const string HandshakeGUID Guid used for WebSocket Protocol readonly int HandshakeGUIDLength readonly byte [] HandshakeGUIDBytes readonly byte [] endOfHandshake Handshake messages will end with Detailed Description class Mirror :: SimpleWeb :: Constants ; Constant values that should never change Some values are from https://tools.ietf.org/html/rfc6455 Public Attributes Documentation variable HeaderSize const int HeaderSize = 4 ; Header is at most 4 bytes If message is less than 125 then header is 2 bytes, else header is 4 bytes variable HeaderMinSize const int HeaderMinSize = 2 ; Smallest size of header If message is less than 125 then header is 2 bytes, else header is 4 bytes variable ShortLength const int ShortLength = 2 ; bytes for short length variable MaskSize const int MaskSize = 4 ; Message mask is always 4 bytes variable BytePayloadLength const int BytePayloadLength = 125 ; Max size of a message for length to be 1 byte long payload length between 0-125 variable UshortPayloadLength const int UshortPayloadLength = 126 ; if payload length is 126 when next 2 bytes will be the length variable UlongPayloadLength const int UlongPayloadLength = 127 ; if payload length is 127 when next 8 bytes will be the length variable HandshakeGUID const string HandshakeGUID = \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\" ; Guid used for WebSocket Protocol variable HandshakeGUIDLength static readonly int HandshakeGUIDLength = HandshakeGUID . Length ; variable HandshakeGUIDBytes static readonly byte [] HandshakeGUIDBytes = Encoding . ASCII . GetBytes ( HandshakeGUID ); variable endOfHandshake static readonly byte [] endOfHandshake = new byte [ 4 ] { ( byte ) '\\r' , ( byte ) '\\n' , ( byte ) '\\r' , ( byte ) '\\n' }; Handshake messages will end with Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::Constants"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Constants/#mirrorsimplewebconstants","text":"Constant values that should never change More...","title":"Mirror::SimpleWeb::Constants"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Constants/#public-attributes","text":"Name const int HeaderSize Header is at most 4 bytes const int HeaderMinSize Smallest size of header const int ShortLength bytes for short length const int MaskSize Message mask is always 4 bytes const int BytePayloadLength Max size of a message for length to be 1 byte long const int UshortPayloadLength if payload length is 126 when next 2 bytes will be the length const int UlongPayloadLength if payload length is 127 when next 8 bytes will be the length const string HandshakeGUID Guid used for WebSocket Protocol readonly int HandshakeGUIDLength readonly byte [] HandshakeGUIDBytes readonly byte [] endOfHandshake Handshake messages will end with","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Constants/#detailed-description","text":"class Mirror :: SimpleWeb :: Constants ; Constant values that should never change Some values are from https://tools.ietf.org/html/rfc6455","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Constants/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Constants/#variable-headersize","text":"const int HeaderSize = 4 ; Header is at most 4 bytes If message is less than 125 then header is 2 bytes, else header is 4 bytes","title":"variable HeaderSize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Constants/#variable-headerminsize","text":"const int HeaderMinSize = 2 ; Smallest size of header If message is less than 125 then header is 2 bytes, else header is 4 bytes","title":"variable HeaderMinSize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Constants/#variable-shortlength","text":"const int ShortLength = 2 ; bytes for short length","title":"variable ShortLength"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Constants/#variable-masksize","text":"const int MaskSize = 4 ; Message mask is always 4 bytes","title":"variable MaskSize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Constants/#variable-bytepayloadlength","text":"const int BytePayloadLength = 125 ; Max size of a message for length to be 1 byte long payload length between 0-125","title":"variable BytePayloadLength"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Constants/#variable-ushortpayloadlength","text":"const int UshortPayloadLength = 126 ; if payload length is 126 when next 2 bytes will be the length","title":"variable UshortPayloadLength"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Constants/#variable-ulongpayloadlength","text":"const int UlongPayloadLength = 127 ; if payload length is 127 when next 8 bytes will be the length","title":"variable UlongPayloadLength"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Constants/#variable-handshakeguid","text":"const string HandshakeGUID = \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\" ; Guid used for WebSocket Protocol","title":"variable HandshakeGUID"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Constants/#variable-handshakeguidlength","text":"static readonly int HandshakeGUIDLength = HandshakeGUID . Length ;","title":"variable HandshakeGUIDLength"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Constants/#variable-handshakeguidbytes","text":"static readonly byte [] HandshakeGUIDBytes = Encoding . ASCII . GetBytes ( HandshakeGUID );","title":"variable HandshakeGUIDBytes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Constants/#variable-endofhandshake","text":"static readonly byte [] endOfHandshake = new byte [ 4 ] { ( byte ) '\\r' , ( byte ) '\\n' , ( byte ) '\\r' , ( byte ) '\\n' }; Handshake messages will end with Updated on 29 January 2021 at 18:34:49 UTC","title":"variable endOfHandshake"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Log/","text":"Mirror::SimpleWeb::Log Public Types Name enum Levels { none = 0, error = 1, warn = 2, info = 3, verbose = 4 } Public Functions Name string BufferToString (byte [] buffer, int offset =0, int? length =null) void DumpBuffer (string label, byte [] buffer, int offset, int length) void DumpBuffer (string label, ArrayBuffer arrayBuffer) void Verbose (string msg, bool showColor =true) void Info (string msg, bool showColor =true) void InfoException (Exception e) An expected Exception was caught, useful for debugging but not important void Warn (string msg, bool showColor =true) void Error (string msg, bool showColor =true) void Exception (Exception e) Public Attributes Name ILogger logger Levels level Public Types Documentation enum Levels Enumerator Value Description none 0 error 1 warn 2 info 3 verbose 4 Public Functions Documentation function BufferToString static inline string BufferToString ( byte [] buffer , int offset = 0 , int ? length = null ) function DumpBuffer static inline void DumpBuffer ( string label , byte [] buffer , int offset , int length ) function DumpBuffer static inline void DumpBuffer ( string label , ArrayBuffer arrayBuffer ) function Verbose static inline void Verbose ( string msg , bool showColor = true ) function Info static inline void Info ( string msg , bool showColor = true ) function InfoException static inline void InfoException ( Exception e ) An expected Exception was caught, useful for debugging but not important Parameters : msg showColor function Warn static inline void Warn ( string msg , bool showColor = true ) function Error static inline void Error ( string msg , bool showColor = true ) function Exception static inline void Exception ( Exception e ) Public Attributes Documentation variable logger static ILogger logger = Debug . unityLogger ; variable level static Levels level = Levels . none ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::Log"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Log/#mirrorsimpleweblog","text":"","title":"Mirror::SimpleWeb::Log"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Log/#public-types","text":"Name enum Levels { none = 0, error = 1, warn = 2, info = 3, verbose = 4 }","title":"Public Types"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Log/#public-functions","text":"Name string BufferToString (byte [] buffer, int offset =0, int? length =null) void DumpBuffer (string label, byte [] buffer, int offset, int length) void DumpBuffer (string label, ArrayBuffer arrayBuffer) void Verbose (string msg, bool showColor =true) void Info (string msg, bool showColor =true) void InfoException (Exception e) An expected Exception was caught, useful for debugging but not important void Warn (string msg, bool showColor =true) void Error (string msg, bool showColor =true) void Exception (Exception e)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Log/#public-attributes","text":"Name ILogger logger Levels level","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Log/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Log/#enum-levels","text":"Enumerator Value Description none 0 error 1 warn 2 info 3 verbose 4","title":"enum Levels"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Log/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Log/#function-buffertostring","text":"static inline string BufferToString ( byte [] buffer , int offset = 0 , int ? length = null )","title":"function BufferToString"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Log/#function-dumpbuffer","text":"static inline void DumpBuffer ( string label , byte [] buffer , int offset , int length )","title":"function DumpBuffer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Log/#function-dumpbuffer_1","text":"static inline void DumpBuffer ( string label , ArrayBuffer arrayBuffer )","title":"function DumpBuffer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Log/#function-verbose","text":"static inline void Verbose ( string msg , bool showColor = true )","title":"function Verbose"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Log/#function-info","text":"static inline void Info ( string msg , bool showColor = true )","title":"function Info"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Log/#function-infoexception","text":"static inline void InfoException ( Exception e ) An expected Exception was caught, useful for debugging but not important Parameters : msg showColor","title":"function InfoException"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Log/#function-warn","text":"static inline void Warn ( string msg , bool showColor = true )","title":"function Warn"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Log/#function-error","text":"static inline void Error ( string msg , bool showColor = true )","title":"function Error"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Log/#function-exception","text":"static inline void Exception ( Exception e )","title":"function Exception"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Log/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Log/#variable-logger","text":"static ILogger logger = Debug . unityLogger ;","title":"variable logger"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Log/#variable-level","text":"static Levels level = Levels . none ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable level"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1MessageProcessor/","text":"Mirror::SimpleWeb::MessageProcessor Public Functions Name bool NeedToReadShortLength (byte [] buffer) int GetOpcode (byte [] buffer) int GetPayloadLength (byte [] buffer) void ValidateHeader (byte [] buffer, int maxLength, bool expectMask) void ToggleMask (byte [] src, int sourceOffset, int messageLength, byte [] maskBuffer, int maskOffset) void ToggleMask (byte [] src, int sourceOffset, ArrayBuffer dst, int messageLength, byte [] maskBuffer, int maskOffset) void ToggleMask (byte [] src, int srcOffset, byte [] dst, int dstOffset, int messageLength, byte [] maskBuffer, int maskOffset) Public Functions Documentation function NeedToReadShortLength static inline bool NeedToReadShortLength ( byte [] buffer ) function GetOpcode static inline int GetOpcode ( byte [] buffer ) function GetPayloadLength static inline int GetPayloadLength ( byte [] buffer ) function ValidateHeader static inline void ValidateHeader ( byte [] buffer , int maxLength , bool expectMask ) function ToggleMask static inline void ToggleMask ( byte [] src , int sourceOffset , int messageLength , byte [] maskBuffer , int maskOffset ) function ToggleMask static inline void ToggleMask ( byte [] src , int sourceOffset , ArrayBuffer dst , int messageLength , byte [] maskBuffer , int maskOffset ) function ToggleMask static inline void ToggleMask ( byte [] src , int srcOffset , byte [] dst , int dstOffset , int messageLength , byte [] maskBuffer , int maskOffset ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::MessageProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1MessageProcessor/#mirrorsimplewebmessageprocessor","text":"","title":"Mirror::SimpleWeb::MessageProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1MessageProcessor/#public-functions","text":"Name bool NeedToReadShortLength (byte [] buffer) int GetOpcode (byte [] buffer) int GetPayloadLength (byte [] buffer) void ValidateHeader (byte [] buffer, int maxLength, bool expectMask) void ToggleMask (byte [] src, int sourceOffset, int messageLength, byte [] maskBuffer, int maskOffset) void ToggleMask (byte [] src, int sourceOffset, ArrayBuffer dst, int messageLength, byte [] maskBuffer, int maskOffset) void ToggleMask (byte [] src, int srcOffset, byte [] dst, int dstOffset, int messageLength, byte [] maskBuffer, int maskOffset)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1MessageProcessor/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1MessageProcessor/#function-needtoreadshortlength","text":"static inline bool NeedToReadShortLength ( byte [] buffer )","title":"function NeedToReadShortLength"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1MessageProcessor/#function-getopcode","text":"static inline int GetOpcode ( byte [] buffer )","title":"function GetOpcode"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1MessageProcessor/#function-getpayloadlength","text":"static inline int GetPayloadLength ( byte [] buffer )","title":"function GetPayloadLength"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1MessageProcessor/#function-validateheader","text":"static inline void ValidateHeader ( byte [] buffer , int maxLength , bool expectMask )","title":"function ValidateHeader"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1MessageProcessor/#function-togglemask","text":"static inline void ToggleMask ( byte [] src , int sourceOffset , int messageLength , byte [] maskBuffer , int maskOffset )","title":"function ToggleMask"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1MessageProcessor/#function-togglemask_1","text":"static inline void ToggleMask ( byte [] src , int sourceOffset , ArrayBuffer dst , int messageLength , byte [] maskBuffer , int maskOffset )","title":"function ToggleMask"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1MessageProcessor/#function-togglemask_2","text":"static inline void ToggleMask ( byte [] src , int srcOffset , byte [] dst , int dstOffset , int messageLength , byte [] maskBuffer , int maskOffset ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function ToggleMask"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReadHelper/","text":"Mirror::SimpleWeb::ReadHelper Public Functions Name int Read (Stream stream, byte [] outBuffer, int outOffset, int length) Reads exactly length from stream bool TryRead (Stream stream, byte [] outBuffer, int outOffset, int length) Reads and returns results. This should never throw an exception int SafeReadTillMatch (Stream stream, byte [] outBuffer, int outOffset, int maxLength, byte [] endOfHeader) Public Functions Documentation function Read static inline int Read ( Stream stream , byte [] outBuffer , int outOffset , int length ) Reads exactly length from stream Exceptions : ReadHelperException Return : outOffset + length function TryRead static inline bool TryRead ( Stream stream , byte [] outBuffer , int outOffset , int length ) Reads and returns results. This should never throw an exception function SafeReadTillMatch static inline int SafeReadTillMatch ( Stream stream , byte [] outBuffer , int outOffset , int maxLength , byte [] endOfHeader ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::ReadHelper"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReadHelper/#mirrorsimplewebreadhelper","text":"","title":"Mirror::SimpleWeb::ReadHelper"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReadHelper/#public-functions","text":"Name int Read (Stream stream, byte [] outBuffer, int outOffset, int length) Reads exactly length from stream bool TryRead (Stream stream, byte [] outBuffer, int outOffset, int length) Reads and returns results. This should never throw an exception int SafeReadTillMatch (Stream stream, byte [] outBuffer, int outOffset, int maxLength, byte [] endOfHeader)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReadHelper/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReadHelper/#function-read","text":"static inline int Read ( Stream stream , byte [] outBuffer , int outOffset , int length ) Reads exactly length from stream Exceptions : ReadHelperException Return : outOffset + length","title":"function Read"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReadHelper/#function-tryread","text":"static inline bool TryRead ( Stream stream , byte [] outBuffer , int outOffset , int length ) Reads and returns results. This should never throw an exception","title":"function TryRead"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReadHelper/#function-safereadtillmatch","text":"static inline int SafeReadTillMatch ( Stream stream , byte [] outBuffer , int outOffset , int maxLength , byte [] endOfHeader ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function SafeReadTillMatch"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReadHelperException/","text":"Mirror::SimpleWeb::ReadHelperException Inherits from Exception Public Functions Name ReadHelperException (string message) Protected Functions Name ReadHelperException (SerializationInfo info, StreamingContext context) Public Functions Documentation function ReadHelperException inline ReadHelperException ( string message ) Protected Functions Documentation function ReadHelperException inline ReadHelperException ( SerializationInfo info , StreamingContext context ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::ReadHelperException"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReadHelperException/#mirrorsimplewebreadhelperexception","text":"Inherits from Exception","title":"Mirror::SimpleWeb::ReadHelperException"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReadHelperException/#public-functions","text":"Name ReadHelperException (string message)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReadHelperException/#protected-functions","text":"Name ReadHelperException (SerializationInfo info, StreamingContext context)","title":"Protected Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReadHelperException/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReadHelperException/#function-readhelperexception","text":"inline ReadHelperException ( string message )","title":"function ReadHelperException"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReadHelperException/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReadHelperException/#function-readhelperexception_1","text":"inline ReadHelperException ( SerializationInfo info , StreamingContext context ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function ReadHelperException"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReceiveLoop/","text":"Mirror::SimpleWeb::ReceiveLoop Public Classes Name struct Config Public Functions Name void Loop ( Config config) Public Functions Documentation function Loop static inline void Loop ( Config config ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::ReceiveLoop"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReceiveLoop/#mirrorsimplewebreceiveloop","text":"","title":"Mirror::SimpleWeb::ReceiveLoop"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReceiveLoop/#public-classes","text":"Name struct Config","title":"Public Classes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReceiveLoop/#public-functions","text":"Name void Loop ( Config config)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReceiveLoop/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ReceiveLoop/#function-loop","text":"static inline void Loop ( Config config ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function Loop"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SendLoop/","text":"Mirror::SimpleWeb::SendLoop Public Classes Name struct Config Public Functions Name void Loop ( Config config) Public Functions Documentation function Loop static inline void Loop ( Config config ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::SendLoop"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SendLoop/#mirrorsimplewebsendloop","text":"","title":"Mirror::SimpleWeb::SendLoop"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SendLoop/#public-classes","text":"Name struct Config","title":"Public Classes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SendLoop/#public-functions","text":"Name void Loop ( Config config)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SendLoop/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SendLoop/#function-loop","text":"static inline void Loop ( Config config ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function Loop"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SendLoopConfig/","text":"Mirror::SimpleWeb::SendLoopConfig Public Attributes Name bool batchSend bool sleepBeforeSend Public Attributes Documentation variable batchSend static bool batchSend = false ; variable sleepBeforeSend static bool sleepBeforeSend = false ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::SendLoopConfig"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SendLoopConfig/#mirrorsimplewebsendloopconfig","text":"","title":"Mirror::SimpleWeb::SendLoopConfig"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SendLoopConfig/#public-attributes","text":"Name bool batchSend bool sleepBeforeSend","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SendLoopConfig/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SendLoopConfig/#variable-batchsend","text":"static bool batchSend = false ;","title":"variable batchSend"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SendLoopConfig/#variable-sleepbeforesend","text":"static bool sleepBeforeSend = false ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable sleepBeforeSend"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SendLoop_1_1MaskHelper/","text":"Mirror::SimpleWeb::SendLoop::MaskHelper Inherits from IDisposable Public Functions Name MaskHelper () void Dispose () int WriteMask (byte [] buffer, int offset) Public Functions Documentation function MaskHelper inline MaskHelper () function Dispose inline void Dispose () function WriteMask inline int WriteMask ( byte [] buffer , int offset ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::SendLoop::MaskHelper"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SendLoop_1_1MaskHelper/#mirrorsimplewebsendloopmaskhelper","text":"Inherits from IDisposable","title":"Mirror::SimpleWeb::SendLoop::MaskHelper"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SendLoop_1_1MaskHelper/#public-functions","text":"Name MaskHelper () void Dispose () int WriteMask (byte [] buffer, int offset)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SendLoop_1_1MaskHelper/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SendLoop_1_1MaskHelper/#function-maskhelper","text":"inline MaskHelper ()","title":"function MaskHelper"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SendLoop_1_1MaskHelper/#function-dispose","text":"inline void Dispose ()","title":"function Dispose"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SendLoop_1_1MaskHelper/#function-writemask","text":"inline int WriteMask ( byte [] buffer , int offset ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function WriteMask"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ServerHandshake/","text":"Mirror::SimpleWeb::ServerHandshake Handles Handshakes from new clients on the server More... Public Functions Name ServerHandshake ( BufferPool bufferPool, int handshakeMaxSize) bool TryHandshake (Connection conn) Detailed Description class Mirror :: SimpleWeb :: ServerHandshake ; Handles Handshakes from new clients on the server The server handshake has buffers to reduce allocations when clients connect Public Functions Documentation function ServerHandshake inline ServerHandshake ( BufferPool bufferPool , int handshakeMaxSize ) function TryHandshake inline bool TryHandshake ( Connection conn ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::ServerHandshake"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ServerHandshake/#mirrorsimplewebserverhandshake","text":"Handles Handshakes from new clients on the server More...","title":"Mirror::SimpleWeb::ServerHandshake"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ServerHandshake/#public-functions","text":"Name ServerHandshake ( BufferPool bufferPool, int handshakeMaxSize) bool TryHandshake (Connection conn)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ServerHandshake/#detailed-description","text":"class Mirror :: SimpleWeb :: ServerHandshake ; Handles Handshakes from new clients on the server The server handshake has buffers to reduce allocations when clients connect","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ServerHandshake/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ServerHandshake/#function-serverhandshake","text":"inline ServerHandshake ( BufferPool bufferPool , int handshakeMaxSize )","title":"function ServerHandshake"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ServerHandshake/#function-tryhandshake","text":"inline bool TryHandshake ( Connection conn ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function TryHandshake"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ServerSslHelper/","text":"Mirror::SimpleWeb::ServerSslHelper Public Functions Name ServerSslHelper ( SslConfig sslConfig) Public Functions Documentation function ServerSslHelper inline ServerSslHelper ( SslConfig sslConfig ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::ServerSslHelper"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ServerSslHelper/#mirrorsimplewebserversslhelper","text":"","title":"Mirror::SimpleWeb::ServerSslHelper"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ServerSslHelper/#public-functions","text":"Name ServerSslHelper ( SslConfig sslConfig)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ServerSslHelper/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1ServerSslHelper/#function-serversslhelper","text":"inline ServerSslHelper ( SslConfig sslConfig ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function ServerSslHelper"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/","text":"Mirror::SimpleWeb::SimpleWebClient Client used to control websockets More... Inherited by WebSocketClientStandAlone , WebSocketClientWebGl Public Events Name Action onConnect () Action onDisconnect () Action< ArraySegment< byte > > onData () Action< Exception > onError () Public Functions Name SimpleWebClient Create (int maxMessageSize, int maxMessagesPerTick, TcpConfig tcpConfig) void ProcessMessageQueue (MonoBehaviour behaviour) virtual abstract void Connect (Uri serverAddress) =0 virtual abstract void Disconnect () =0 virtual abstract void Send (ArraySegment< byte > segment) =0 Protected Functions Name SimpleWebClient (int maxMessageSize, int maxMessagesPerTick) Public Attributes Name ClientState ConnectionState Protected Attributes Name readonly int maxMessageSize readonly ConcurrentQueue< Message > receiveQueue readonly BufferPool bufferPool ClientState state Detailed Description class Mirror :: SimpleWeb :: SimpleWebClient ; Client used to control websockets Base class used by WebSocketClientWebGl and WebSocketClientStandAlone Public Events Documentation event onConnect Action onConnect () event onDisconnect Action onDisconnect () event onData Action < ArraySegment < byte > > onData () event onError Action < Exception > onError () Public Functions Documentation function Create static inline SimpleWebClient Create ( int maxMessageSize , int maxMessagesPerTick , TcpConfig tcpConfig ) function ProcessMessageQueue inline void ProcessMessageQueue ( MonoBehaviour behaviour ) function Connect virtual abstract void Connect ( Uri serverAddress ) = 0 Reimplemented by : Mirror::SimpleWeb::WebSocketClientWebGl::Connect , Mirror::SimpleWeb::WebSocketClientStandAlone::Connect function Disconnect virtual abstract void Disconnect () = 0 Reimplemented by : Mirror::SimpleWeb::WebSocketClientWebGl::Disconnect , Mirror::SimpleWeb::WebSocketClientStandAlone::Disconnect function Send virtual abstract void Send ( ArraySegment < byte > segment ) = 0 Reimplemented by : Mirror::SimpleWeb::WebSocketClientWebGl::Send , Mirror::SimpleWeb::WebSocketClientStandAlone::Send Protected Functions Documentation function SimpleWebClient inline SimpleWebClient ( int maxMessageSize , int maxMessagesPerTick ) Public Attributes Documentation variable ConnectionState ClientState ConnectionState => state ; Protected Attributes Documentation variable maxMessageSize readonly int maxMessageSize ; variable receiveQueue readonly ConcurrentQueue < Message > receiveQueue = new ConcurrentQueue < [ Message ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structMirror_1_1SimpleWeb_1_1Message / ) > (); variable bufferPool readonly BufferPool bufferPool ; variable state ClientState state ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::SimpleWebClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#mirrorsimplewebsimplewebclient","text":"Client used to control websockets More... Inherited by WebSocketClientStandAlone , WebSocketClientWebGl","title":"Mirror::SimpleWeb::SimpleWebClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#public-events","text":"Name Action onConnect () Action onDisconnect () Action< ArraySegment< byte > > onData () Action< Exception > onError ()","title":"Public Events"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#public-functions","text":"Name SimpleWebClient Create (int maxMessageSize, int maxMessagesPerTick, TcpConfig tcpConfig) void ProcessMessageQueue (MonoBehaviour behaviour) virtual abstract void Connect (Uri serverAddress) =0 virtual abstract void Disconnect () =0 virtual abstract void Send (ArraySegment< byte > segment) =0","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#protected-functions","text":"Name SimpleWebClient (int maxMessageSize, int maxMessagesPerTick)","title":"Protected Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#public-attributes","text":"Name ClientState ConnectionState","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#protected-attributes","text":"Name readonly int maxMessageSize readonly ConcurrentQueue< Message > receiveQueue readonly BufferPool bufferPool ClientState state","title":"Protected Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#detailed-description","text":"class Mirror :: SimpleWeb :: SimpleWebClient ; Client used to control websockets Base class used by WebSocketClientWebGl and WebSocketClientStandAlone","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#public-events-documentation","text":"","title":"Public Events Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#event-onconnect","text":"Action onConnect ()","title":"event onConnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#event-ondisconnect","text":"Action onDisconnect ()","title":"event onDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#event-ondata","text":"Action < ArraySegment < byte > > onData ()","title":"event onData"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#event-onerror","text":"Action < Exception > onError ()","title":"event onError"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#function-create","text":"static inline SimpleWebClient Create ( int maxMessageSize , int maxMessagesPerTick , TcpConfig tcpConfig )","title":"function Create"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#function-processmessagequeue","text":"inline void ProcessMessageQueue ( MonoBehaviour behaviour )","title":"function ProcessMessageQueue"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#function-connect","text":"virtual abstract void Connect ( Uri serverAddress ) = 0 Reimplemented by : Mirror::SimpleWeb::WebSocketClientWebGl::Connect , Mirror::SimpleWeb::WebSocketClientStandAlone::Connect","title":"function Connect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#function-disconnect","text":"virtual abstract void Disconnect () = 0 Reimplemented by : Mirror::SimpleWeb::WebSocketClientWebGl::Disconnect , Mirror::SimpleWeb::WebSocketClientStandAlone::Disconnect","title":"function Disconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#function-send","text":"virtual abstract void Send ( ArraySegment < byte > segment ) = 0 Reimplemented by : Mirror::SimpleWeb::WebSocketClientWebGl::Send , Mirror::SimpleWeb::WebSocketClientStandAlone::Send","title":"function Send"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#function-simplewebclient","text":"inline SimpleWebClient ( int maxMessageSize , int maxMessagesPerTick )","title":"function SimpleWebClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#variable-connectionstate","text":"ClientState ConnectionState => state ;","title":"variable ConnectionState"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#variable-maxmessagesize","text":"readonly int maxMessageSize ;","title":"variable maxMessageSize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#variable-receivequeue","text":"readonly ConcurrentQueue < Message > receiveQueue = new ConcurrentQueue < [ Message ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structMirror_1_1SimpleWeb_1_1Message / ) > ();","title":"variable receiveQueue"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#variable-bufferpool","text":"readonly BufferPool bufferPool ;","title":"variable bufferPool"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebClient/#variable-state","text":"ClientState state ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable state"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebJSLib/","text":"Mirror::SimpleWeb::SimpleWebJSLib Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::SimpleWebJSLib"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebJSLib/#mirrorsimplewebsimplewebjslib","text":"Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::SimpleWebJSLib"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/","text":"Mirror::SimpleWeb::SimpleWebServer Public Events Name Action< int > onConnect () Action< int > onDisconnect () Action< int, ArraySegment< byte > > onData () Action< int, Exception > onError () Public Functions Name SimpleWebServer (int maxMessagesPerTick, TcpConfig tcpConfig, int maxMessageSize, int handshakeMaxSize, SslConfig sslConfig) void Start (ushort port) void Stop () void SendAll (List< int > connectionIds, ArraySegment< byte > source) void SendOne (int connectionId, ArraySegment< byte > source) bool KickClient (int connectionId) string GetClientAddress (int connectionId) void ProcessMessageQueue (MonoBehaviour behaviour) Public Properties Name bool Active Public Events Documentation event onConnect Action < int > onConnect () event onDisconnect Action < int > onDisconnect () event onData Action < int , ArraySegment < byte > > onData () event onError Action < int , Exception > onError () Public Functions Documentation function SimpleWebServer inline SimpleWebServer ( int maxMessagesPerTick , TcpConfig tcpConfig , int maxMessageSize , int handshakeMaxSize , SslConfig sslConfig ) function Start inline void Start ( ushort port ) function Stop inline void Stop () function SendAll inline void SendAll ( List < int > connectionIds , ArraySegment < byte > source ) function SendOne inline void SendOne ( int connectionId , ArraySegment < byte > source ) function KickClient inline bool KickClient ( int connectionId ) function GetClientAddress inline string GetClientAddress ( int connectionId ) function ProcessMessageQueue inline void ProcessMessageQueue ( MonoBehaviour behaviour ) Public Property Documentation property Active bool Active ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::SimpleWebServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/#mirrorsimplewebsimplewebserver","text":"","title":"Mirror::SimpleWeb::SimpleWebServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/#public-events","text":"Name Action< int > onConnect () Action< int > onDisconnect () Action< int, ArraySegment< byte > > onData () Action< int, Exception > onError ()","title":"Public Events"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/#public-functions","text":"Name SimpleWebServer (int maxMessagesPerTick, TcpConfig tcpConfig, int maxMessageSize, int handshakeMaxSize, SslConfig sslConfig) void Start (ushort port) void Stop () void SendAll (List< int > connectionIds, ArraySegment< byte > source) void SendOne (int connectionId, ArraySegment< byte > source) bool KickClient (int connectionId) string GetClientAddress (int connectionId) void ProcessMessageQueue (MonoBehaviour behaviour)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/#public-properties","text":"Name bool Active","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/#public-events-documentation","text":"","title":"Public Events Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/#event-onconnect","text":"Action < int > onConnect ()","title":"event onConnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/#event-ondisconnect","text":"Action < int > onDisconnect ()","title":"event onDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/#event-ondata","text":"Action < int , ArraySegment < byte > > onData ()","title":"event onData"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/#event-onerror","text":"Action < int , Exception > onError ()","title":"event onError"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/#function-simplewebserver","text":"inline SimpleWebServer ( int maxMessagesPerTick , TcpConfig tcpConfig , int maxMessageSize , int handshakeMaxSize , SslConfig sslConfig )","title":"function SimpleWebServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/#function-start","text":"inline void Start ( ushort port )","title":"function Start"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/#function-stop","text":"inline void Stop ()","title":"function Stop"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/#function-sendall","text":"inline void SendAll ( List < int > connectionIds , ArraySegment < byte > source )","title":"function SendAll"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/#function-sendone","text":"inline void SendOne ( int connectionId , ArraySegment < byte > source )","title":"function SendOne"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/#function-kickclient","text":"inline bool KickClient ( int connectionId )","title":"function KickClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/#function-getclientaddress","text":"inline string GetClientAddress ( int connectionId )","title":"function GetClientAddress"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/#function-processmessagequeue","text":"inline void ProcessMessageQueue ( MonoBehaviour behaviour )","title":"function ProcessMessageQueue"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebServer/#property-active","text":"bool Active ; Updated on 29 January 2021 at 18:34:49 UTC","title":"property Active"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/","text":"Mirror::SimpleWeb::SimpleWebTransport Inherits from Transport , MonoBehaviour Public Functions Name virtual override bool Available () Is this transport available in the current platform? virtual override int GetMaxPacketSize (int channelId =0) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. virtual override void Shutdown () Shut down the transport, both as client and server void ProcessMessages () Processes message in server and client queues virtual override bool ClientConnected () Determines if we are currently connected to the server virtual override void ClientConnect (string address) Establish a connection to a server virtual override void ClientDisconnect () Disconnect this client from the server virtual override void ClientSend (int channelId, ArraySegment< byte > segment) Send data to the server virtual override bool ServerActive () Determines if the server is up and running virtual override void ServerStart () Start listening for clients virtual override void ServerStop () Stop listening for clients and disconnect all existing clients virtual override bool ServerDisconnect (int connectionId) Disconnect a client from this server. Useful to kick people out. virtual override void ServerSend (int connectionId, int channelId, ArraySegment< byte > segment) Send data to a client. virtual override string ServerGetClientAddress (int connectionId) Get the client address virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery Public Properties Name Log.Levels LogLevels Public Attributes Name const string NormalScheme const string SecureScheme ushort port int maxMessageSize int handshakeMaxSize bool noDelay int sendTimeout int receiveTimeout int serverMaxMessagesPerTick int clientMaxMessagesPerTick bool batchSend bool waitBeforeSend bool clientUseWss bool sslEnabled string sslCertJson SslProtocols sslProtocols Additional inherited members Public Functions inherited from Transport Name void Update () virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor Public Attributes inherited from Transport Name Transport activeTransport The current transport used by Mirror . Action OnClientConnected Notify subscribers when when this client establish a successful connection to the server Action< ArraySegment< byte >, int > OnClientDataReceived Notify subscribers when this client receive data from the server Action< Exception > OnClientError Notify subscribers when this client encounters an error communicating with the server Action OnClientDisconnected Notify subscribers when this client disconnects from the server Action< int > OnServerConnected Notify subscribers when a client connects to this server Action< int, ArraySegment< byte >, int > OnServerDataReceived Notify subscribers when this server receives data from the client Action< int, Exception > OnServerError Notify subscribers when this server has some problem communicating with the client Action< int > OnServerDisconnected Notify subscribers when a client disconnects from this server Public Functions Documentation function Available inline virtual override bool Available () Is this transport available in the current platform? Return : True if this transport works in the current platform Reimplements : Mirror::Transport::Available Some transports might only be available in mobile Many will not work in webgl Example usage: return Application.platform == RuntimePlatform.WebGLPlayer function GetMaxPacketSize inline virtual override int GetMaxPacketSize ( int channelId = 0 ) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. Parameters : channelId channel id Return : the size in bytes that can be sent via the provided channel Reimplements : Mirror::Transport::GetMaxPacketSize GetMaxPacketSize needs to return a value at all times. Even if the Transport isn't running, or isn't Available() . This is because Fallback and Multiplex transports need to find the smallest possible packet size at runtime. function Shutdown inline virtual override void Shutdown () Shut down the transport, both as client and server Reimplements : Mirror::Transport::Shutdown function ProcessMessages inline void ProcessMessages () Processes message in server and client queues Invokes OnData events allowing mirror to handle messages (Cmd/SyncVar/etc) Called within LateUpdate, Can be called by user to process message before important logic function ClientConnected inline virtual override bool ClientConnected () Determines if we are currently connected to the server Return : True if a connection has been established to the server Reimplements : Mirror::Transport::ClientConnected function ClientConnect inline virtual override void ClientConnect ( string address ) Establish a connection to a server Parameters : address The IP address or FQDN of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect function ClientDisconnect inline virtual override void ClientDisconnect () Disconnect this client from the server Reimplements : Mirror::Transport::ClientDisconnect function ClientSend inline virtual override void ClientSend ( int channelId , ArraySegment < byte > segment ) Send data to the server Parameters : channelId The channel to use. 0 is the default channel, but some transports might want to provide unreliable, encrypted, compressed, or any other feature as new channels segment The data to send to the server. Will be recycled after returning, so either use it directly or copy it internally. This allows for allocation-free sends! Reimplements : Mirror::Transport::ClientSend function ServerActive inline virtual override bool ServerActive () Determines if the server is up and running Return : true if the transport is ready for connections from clients Reimplements : Mirror::Transport::ServerActive function ServerStart inline virtual override void ServerStart () Start listening for clients Reimplements : Mirror::Transport::ServerStart function ServerStop inline virtual override void ServerStop () Stop listening for clients and disconnect all existing clients Reimplements : Mirror::Transport::ServerStop function ServerDisconnect inline virtual override bool ServerDisconnect ( int connectionId ) Disconnect a client from this server. Useful to kick people out. Parameters : connectionId the id of the client to disconnect Return : true if the client was kicked Reimplements : Mirror::Transport::ServerDisconnect function ServerSend inline virtual override void ServerSend ( int connectionId , int channelId , ArraySegment < byte > segment ) Send data to a client. Parameters : connectionId The client connection id to send the data to channelId The channel to be used. Transports can use channels to implement other features such as unreliable, encryption, compression, etc... data Reimplements : Mirror::Transport::ServerSend function ServerGetClientAddress inline virtual override string ServerGetClientAddress ( int connectionId ) Get the client address Parameters : connectionId id of the client Return : address of the client Reimplements : Mirror::Transport::ServerGetClientAddress function ServerUri inline virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery Return : the url at which this server can be reached Reimplements : Mirror::Transport::ServerUri Public Property Documentation property LogLevels Log . Levels LogLevels ; Gets _logLevels field Sets _logLevels and Log.level fields Public Attributes Documentation variable NormalScheme const string NormalScheme = \"ws\" ; variable SecureScheme const string SecureScheme = \"wss\" ; variable port ushort port = 7778 ; variable maxMessageSize int maxMessageSize = 16 * 1024 ; variable handshakeMaxSize int handshakeMaxSize = 3000 ; variable noDelay bool noDelay = true ; variable sendTimeout int sendTimeout = 5000 ; variable receiveTimeout int receiveTimeout = 20000 ; variable serverMaxMessagesPerTick int serverMaxMessagesPerTick = 10000 ; variable clientMaxMessagesPerTick int clientMaxMessagesPerTick = 1000 ; variable batchSend bool batchSend = true ; variable waitBeforeSend bool waitBeforeSend = false ; variable clientUseWss bool clientUseWss ; variable sslEnabled bool sslEnabled ; variable sslCertJson string sslCertJson = \"./cert.json\" ; variable sslProtocols SslProtocols sslProtocols = SslProtocols . Tls12 ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::SimpleWebTransport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#mirrorsimplewebsimplewebtransport","text":"Inherits from Transport , MonoBehaviour","title":"Mirror::SimpleWeb::SimpleWebTransport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#public-functions","text":"Name virtual override bool Available () Is this transport available in the current platform? virtual override int GetMaxPacketSize (int channelId =0) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. virtual override void Shutdown () Shut down the transport, both as client and server void ProcessMessages () Processes message in server and client queues virtual override bool ClientConnected () Determines if we are currently connected to the server virtual override void ClientConnect (string address) Establish a connection to a server virtual override void ClientDisconnect () Disconnect this client from the server virtual override void ClientSend (int channelId, ArraySegment< byte > segment) Send data to the server virtual override bool ServerActive () Determines if the server is up and running virtual override void ServerStart () Start listening for clients virtual override void ServerStop () Stop listening for clients and disconnect all existing clients virtual override bool ServerDisconnect (int connectionId) Disconnect a client from this server. Useful to kick people out. virtual override void ServerSend (int connectionId, int channelId, ArraySegment< byte > segment) Send data to a client. virtual override string ServerGetClientAddress (int connectionId) Get the client address virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#public-properties","text":"Name Log.Levels LogLevels","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#public-attributes","text":"Name const string NormalScheme const string SecureScheme ushort port int maxMessageSize int handshakeMaxSize bool noDelay int sendTimeout int receiveTimeout int serverMaxMessagesPerTick int clientMaxMessagesPerTick bool batchSend bool waitBeforeSend bool clientUseWss bool sslEnabled string sslCertJson SslProtocols sslProtocols","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#additional-inherited-members","text":"Public Functions inherited from Transport Name void Update () virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor Public Attributes inherited from Transport Name Transport activeTransport The current transport used by Mirror . Action OnClientConnected Notify subscribers when when this client establish a successful connection to the server Action< ArraySegment< byte >, int > OnClientDataReceived Notify subscribers when this client receive data from the server Action< Exception > OnClientError Notify subscribers when this client encounters an error communicating with the server Action OnClientDisconnected Notify subscribers when this client disconnects from the server Action< int > OnServerConnected Notify subscribers when a client connects to this server Action< int, ArraySegment< byte >, int > OnServerDataReceived Notify subscribers when this server receives data from the client Action< int, Exception > OnServerError Notify subscribers when this server has some problem communicating with the client Action< int > OnServerDisconnected Notify subscribers when a client disconnects from this server","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#function-available","text":"inline virtual override bool Available () Is this transport available in the current platform? Return : True if this transport works in the current platform Reimplements : Mirror::Transport::Available Some transports might only be available in mobile Many will not work in webgl Example usage: return Application.platform == RuntimePlatform.WebGLPlayer","title":"function Available"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#function-getmaxpacketsize","text":"inline virtual override int GetMaxPacketSize ( int channelId = 0 ) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. Parameters : channelId channel id Return : the size in bytes that can be sent via the provided channel Reimplements : Mirror::Transport::GetMaxPacketSize GetMaxPacketSize needs to return a value at all times. Even if the Transport isn't running, or isn't Available() . This is because Fallback and Multiplex transports need to find the smallest possible packet size at runtime.","title":"function GetMaxPacketSize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#function-shutdown","text":"inline virtual override void Shutdown () Shut down the transport, both as client and server Reimplements : Mirror::Transport::Shutdown","title":"function Shutdown"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#function-processmessages","text":"inline void ProcessMessages () Processes message in server and client queues Invokes OnData events allowing mirror to handle messages (Cmd/SyncVar/etc) Called within LateUpdate, Can be called by user to process message before important logic","title":"function ProcessMessages"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#function-clientconnected","text":"inline virtual override bool ClientConnected () Determines if we are currently connected to the server Return : True if a connection has been established to the server Reimplements : Mirror::Transport::ClientConnected","title":"function ClientConnected"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#function-clientconnect","text":"inline virtual override void ClientConnect ( string address ) Establish a connection to a server Parameters : address The IP address or FQDN of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect","title":"function ClientConnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#function-clientdisconnect","text":"inline virtual override void ClientDisconnect () Disconnect this client from the server Reimplements : Mirror::Transport::ClientDisconnect","title":"function ClientDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#function-clientsend","text":"inline virtual override void ClientSend ( int channelId , ArraySegment < byte > segment ) Send data to the server Parameters : channelId The channel to use. 0 is the default channel, but some transports might want to provide unreliable, encrypted, compressed, or any other feature as new channels segment The data to send to the server. Will be recycled after returning, so either use it directly or copy it internally. This allows for allocation-free sends! Reimplements : Mirror::Transport::ClientSend","title":"function ClientSend"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#function-serveractive","text":"inline virtual override bool ServerActive () Determines if the server is up and running Return : true if the transport is ready for connections from clients Reimplements : Mirror::Transport::ServerActive","title":"function ServerActive"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#function-serverstart","text":"inline virtual override void ServerStart () Start listening for clients Reimplements : Mirror::Transport::ServerStart","title":"function ServerStart"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#function-serverstop","text":"inline virtual override void ServerStop () Stop listening for clients and disconnect all existing clients Reimplements : Mirror::Transport::ServerStop","title":"function ServerStop"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#function-serverdisconnect","text":"inline virtual override bool ServerDisconnect ( int connectionId ) Disconnect a client from this server. Useful to kick people out. Parameters : connectionId the id of the client to disconnect Return : true if the client was kicked Reimplements : Mirror::Transport::ServerDisconnect","title":"function ServerDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#function-serversend","text":"inline virtual override void ServerSend ( int connectionId , int channelId , ArraySegment < byte > segment ) Send data to a client. Parameters : connectionId The client connection id to send the data to channelId The channel to be used. Transports can use channels to implement other features such as unreliable, encryption, compression, etc... data Reimplements : Mirror::Transport::ServerSend","title":"function ServerSend"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#function-servergetclientaddress","text":"inline virtual override string ServerGetClientAddress ( int connectionId ) Get the client address Parameters : connectionId id of the client Return : address of the client Reimplements : Mirror::Transport::ServerGetClientAddress","title":"function ServerGetClientAddress"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#function-serveruri","text":"inline virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery Return : the url at which this server can be reached Reimplements : Mirror::Transport::ServerUri","title":"function ServerUri"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#property-loglevels","text":"Log . Levels LogLevels ; Gets _logLevels field Sets _logLevels and Log.level fields","title":"property LogLevels"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#variable-normalscheme","text":"const string NormalScheme = \"ws\" ;","title":"variable NormalScheme"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#variable-securescheme","text":"const string SecureScheme = \"wss\" ;","title":"variable SecureScheme"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#variable-port","text":"ushort port = 7778 ;","title":"variable port"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#variable-maxmessagesize","text":"int maxMessageSize = 16 * 1024 ;","title":"variable maxMessageSize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#variable-handshakemaxsize","text":"int handshakeMaxSize = 3000 ;","title":"variable handshakeMaxSize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#variable-nodelay","text":"bool noDelay = true ;","title":"variable noDelay"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#variable-sendtimeout","text":"int sendTimeout = 5000 ;","title":"variable sendTimeout"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#variable-receivetimeout","text":"int receiveTimeout = 20000 ;","title":"variable receiveTimeout"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#variable-servermaxmessagespertick","text":"int serverMaxMessagesPerTick = 10000 ;","title":"variable serverMaxMessagesPerTick"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#variable-clientmaxmessagespertick","text":"int clientMaxMessagesPerTick = 1000 ;","title":"variable clientMaxMessagesPerTick"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#variable-batchsend","text":"bool batchSend = true ;","title":"variable batchSend"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#variable-waitbeforesend","text":"bool waitBeforeSend = false ;","title":"variable waitBeforeSend"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#variable-clientusewss","text":"bool clientUseWss ;","title":"variable clientUseWss"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#variable-sslenabled","text":"bool sslEnabled ;","title":"variable sslEnabled"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#variable-sslcertjson","text":"string sslCertJson = \"./cert.json\" ;","title":"variable sslCertJson"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SimpleWebTransport/#variable-sslprotocols","text":"SslProtocols sslProtocols = SslProtocols . Tls12 ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable sslProtocols"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SslConfigLoader/","text":"Mirror::SimpleWeb::SslConfigLoader Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::SslConfigLoader"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1SslConfigLoader/#mirrorsimplewebsslconfigloader","text":"Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::SslConfigLoader"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Utils/","text":"Mirror::SimpleWeb::Utils Public Functions Name void CheckForInterupt () Public Functions Documentation function CheckForInterupt static inline void CheckForInterupt () Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::Utils"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Utils/#mirrorsimplewebutils","text":"","title":"Mirror::SimpleWeb::Utils"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Utils/#public-functions","text":"Name void CheckForInterupt ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Utils/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1Utils/#function-checkforinterupt","text":"static inline void CheckForInterupt () Updated on 29 January 2021 at 18:34:49 UTC","title":"function CheckForInterupt"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketClientStandAlone/","text":"Mirror::SimpleWeb::WebSocketClientStandAlone Inherits from SimpleWebClient Public Functions Name virtual override void Connect (Uri serverAddress) virtual override void Disconnect () virtual override void Send (ArraySegment< byte > segment) Additional inherited members Public Events inherited from SimpleWebClient Name Action onConnect () Action onDisconnect () Action< ArraySegment< byte > > onData () Action< Exception > onError () Public Functions inherited from SimpleWebClient Name SimpleWebClient Create (int maxMessageSize, int maxMessagesPerTick, TcpConfig tcpConfig) void ProcessMessageQueue (MonoBehaviour behaviour) Protected Functions inherited from SimpleWebClient Name SimpleWebClient (int maxMessageSize, int maxMessagesPerTick) Public Attributes inherited from SimpleWebClient Name ClientState ConnectionState Protected Attributes inherited from SimpleWebClient Name readonly int maxMessageSize readonly ConcurrentQueue< Message > receiveQueue readonly BufferPool bufferPool ClientState state Public Functions Documentation function Connect inline virtual override void Connect ( Uri serverAddress ) Reimplements : Mirror::SimpleWeb::SimpleWebClient::Connect function Disconnect inline virtual override void Disconnect () Reimplements : Mirror::SimpleWeb::SimpleWebClient::Disconnect function Send inline virtual override void Send ( ArraySegment < byte > segment ) Reimplements : Mirror::SimpleWeb::SimpleWebClient::Send Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::WebSocketClientStandAlone"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketClientStandAlone/#mirrorsimplewebwebsocketclientstandalone","text":"Inherits from SimpleWebClient","title":"Mirror::SimpleWeb::WebSocketClientStandAlone"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketClientStandAlone/#public-functions","text":"Name virtual override void Connect (Uri serverAddress) virtual override void Disconnect () virtual override void Send (ArraySegment< byte > segment)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketClientStandAlone/#additional-inherited-members","text":"Public Events inherited from SimpleWebClient Name Action onConnect () Action onDisconnect () Action< ArraySegment< byte > > onData () Action< Exception > onError () Public Functions inherited from SimpleWebClient Name SimpleWebClient Create (int maxMessageSize, int maxMessagesPerTick, TcpConfig tcpConfig) void ProcessMessageQueue (MonoBehaviour behaviour) Protected Functions inherited from SimpleWebClient Name SimpleWebClient (int maxMessageSize, int maxMessagesPerTick) Public Attributes inherited from SimpleWebClient Name ClientState ConnectionState Protected Attributes inherited from SimpleWebClient Name readonly int maxMessageSize readonly ConcurrentQueue< Message > receiveQueue readonly BufferPool bufferPool ClientState state","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketClientStandAlone/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketClientStandAlone/#function-connect","text":"inline virtual override void Connect ( Uri serverAddress ) Reimplements : Mirror::SimpleWeb::SimpleWebClient::Connect","title":"function Connect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketClientStandAlone/#function-disconnect","text":"inline virtual override void Disconnect () Reimplements : Mirror::SimpleWeb::SimpleWebClient::Disconnect","title":"function Disconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketClientStandAlone/#function-send","text":"inline virtual override void Send ( ArraySegment < byte > segment ) Reimplements : Mirror::SimpleWeb::SimpleWebClient::Send Updated on 29 January 2021 at 18:34:49 UTC","title":"function Send"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketClientWebGl/","text":"Mirror::SimpleWeb::WebSocketClientWebGl Inherits from SimpleWebClient Public Functions Name bool CheckJsConnected () virtual override void Connect (Uri serverAddress) virtual override void Disconnect () virtual override void Send (ArraySegment< byte > segment) Additional inherited members Public Events inherited from SimpleWebClient Name Action onConnect () Action onDisconnect () Action< ArraySegment< byte > > onData () Action< Exception > onError () Public Functions inherited from SimpleWebClient Name SimpleWebClient Create (int maxMessageSize, int maxMessagesPerTick, TcpConfig tcpConfig) void ProcessMessageQueue (MonoBehaviour behaviour) Protected Functions inherited from SimpleWebClient Name SimpleWebClient (int maxMessageSize, int maxMessagesPerTick) Public Attributes inherited from SimpleWebClient Name ClientState ConnectionState Protected Attributes inherited from SimpleWebClient Name readonly int maxMessageSize readonly ConcurrentQueue< Message > receiveQueue readonly BufferPool bufferPool ClientState state Public Functions Documentation function CheckJsConnected bool CheckJsConnected () function Connect inline virtual override void Connect ( Uri serverAddress ) Reimplements : Mirror::SimpleWeb::SimpleWebClient::Connect function Disconnect inline virtual override void Disconnect () Reimplements : Mirror::SimpleWeb::SimpleWebClient::Disconnect function Send inline virtual override void Send ( ArraySegment < byte > segment ) Reimplements : Mirror::SimpleWeb::SimpleWebClient::Send Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::WebSocketClientWebGl"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketClientWebGl/#mirrorsimplewebwebsocketclientwebgl","text":"Inherits from SimpleWebClient","title":"Mirror::SimpleWeb::WebSocketClientWebGl"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketClientWebGl/#public-functions","text":"Name bool CheckJsConnected () virtual override void Connect (Uri serverAddress) virtual override void Disconnect () virtual override void Send (ArraySegment< byte > segment)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketClientWebGl/#additional-inherited-members","text":"Public Events inherited from SimpleWebClient Name Action onConnect () Action onDisconnect () Action< ArraySegment< byte > > onData () Action< Exception > onError () Public Functions inherited from SimpleWebClient Name SimpleWebClient Create (int maxMessageSize, int maxMessagesPerTick, TcpConfig tcpConfig) void ProcessMessageQueue (MonoBehaviour behaviour) Protected Functions inherited from SimpleWebClient Name SimpleWebClient (int maxMessageSize, int maxMessagesPerTick) Public Attributes inherited from SimpleWebClient Name ClientState ConnectionState Protected Attributes inherited from SimpleWebClient Name readonly int maxMessageSize readonly ConcurrentQueue< Message > receiveQueue readonly BufferPool bufferPool ClientState state","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketClientWebGl/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketClientWebGl/#function-checkjsconnected","text":"bool CheckJsConnected ()","title":"function CheckJsConnected"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketClientWebGl/#function-connect","text":"inline virtual override void Connect ( Uri serverAddress ) Reimplements : Mirror::SimpleWeb::SimpleWebClient::Connect","title":"function Connect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketClientWebGl/#function-disconnect","text":"inline virtual override void Disconnect () Reimplements : Mirror::SimpleWeb::SimpleWebClient::Disconnect","title":"function Disconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketClientWebGl/#function-send","text":"inline virtual override void Send ( ArraySegment < byte > segment ) Reimplements : Mirror::SimpleWeb::SimpleWebClient::Send Updated on 29 January 2021 at 18:34:49 UTC","title":"function Send"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketServer/","text":"Mirror::SimpleWeb::WebSocketServer Public Functions Name WebSocketServer ( TcpConfig tcpConfig, int maxMessageSize, int handshakeMaxSize, SslConfig sslConfig, BufferPool bufferPool) void Listen (int port) void Stop () void Send (int id, ArrayBuffer buffer) bool CloseConnection (int id) string GetClientAddress (int id) Public Attributes Name readonly ConcurrentQueue< Message > receiveQueue Public Functions Documentation function WebSocketServer inline WebSocketServer ( TcpConfig tcpConfig , int maxMessageSize , int handshakeMaxSize , SslConfig sslConfig , BufferPool bufferPool ) function Listen inline void Listen ( int port ) function Stop inline void Stop () function Send inline void Send ( int id , ArrayBuffer buffer ) function CloseConnection inline bool CloseConnection ( int id ) function GetClientAddress inline string GetClientAddress ( int id ) Public Attributes Documentation variable receiveQueue readonly ConcurrentQueue < Message > receiveQueue = new ConcurrentQueue < [ Message ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structMirror_1_1SimpleWeb_1_1Message / ) > (); Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::WebSocketServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketServer/#mirrorsimplewebwebsocketserver","text":"","title":"Mirror::SimpleWeb::WebSocketServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketServer/#public-functions","text":"Name WebSocketServer ( TcpConfig tcpConfig, int maxMessageSize, int handshakeMaxSize, SslConfig sslConfig, BufferPool bufferPool) void Listen (int port) void Stop () void Send (int id, ArrayBuffer buffer) bool CloseConnection (int id) string GetClientAddress (int id)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketServer/#public-attributes","text":"Name readonly ConcurrentQueue< Message > receiveQueue","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketServer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketServer/#function-websocketserver","text":"inline WebSocketServer ( TcpConfig tcpConfig , int maxMessageSize , int handshakeMaxSize , SslConfig sslConfig , BufferPool bufferPool )","title":"function WebSocketServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketServer/#function-listen","text":"inline void Listen ( int port )","title":"function Listen"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketServer/#function-stop","text":"inline void Stop ()","title":"function Stop"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketServer/#function-send","text":"inline void Send ( int id , ArrayBuffer buffer )","title":"function Send"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketServer/#function-closeconnection","text":"inline bool CloseConnection ( int id )","title":"function CloseConnection"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketServer/#function-getclientaddress","text":"inline string GetClientAddress ( int id )","title":"function GetClientAddress"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketServer/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SimpleWeb_1_1WebSocketServer/#variable-receivequeue","text":"readonly ConcurrentQueue < Message > receiveQueue = new ConcurrentQueue < [ Message ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structMirror_1_1SimpleWeb_1_1Message / ) > (); Updated on 29 January 2021 at 18:34:49 UTC","title":"variable receiveQueue"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1StringHash/","text":"Mirror::StringHash Public Functions Name int GetStableHashCode (this string text) Public Functions Documentation function GetStableHashCode static inline int GetStableHashCode ( this string text ) Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::StringHash"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1StringHash/#mirrorstringhash","text":"","title":"Mirror::StringHash"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1StringHash/#public-functions","text":"Name int GetStableHashCode (this string text)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1StringHash/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1StringHash/#function-getstablehashcode","text":"static inline int GetStableHashCode ( this string text ) Updated on 29 January 2021 at 18:34:48 UTC","title":"function GetStableHashCode"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncDictionary/","text":"Mirror::SyncDictionary More... Inherits from Mirror::SyncIDictionary< TKey, TValue > , IDictionary< TKey, TValue >, SyncObject Public Functions Name SyncDictionary () SyncDictionary (IEqualityComparer< TKey > eq) new Dictionary< TKey, TValue >.Enumerator GetEnumerator () Public Attributes Name new Dictionary< TKey, TValue >.ValueCollection Values new Dictionary< TKey, TValue >.KeyCollection Keys Additional inherited members Public Events inherited from Mirror::SyncIDictionary< TKey, TValue > Name SyncDictionaryChanged Callback () Public Functions inherited from Mirror::SyncIDictionary< TKey, TValue > Name delegate void SyncDictionaryChanged (Operation op, TKey key, TValue item) void Reset () Resets the SyncObject so that it can be re-used void Flush () Discard all the queued changes SyncIDictionary (IDictionary< TKey, TValue > objects) void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Clear () bool ContainsKey (TKey key) bool Remove (TKey key) bool TryGetValue (TKey key, out TValue value) void Add (TKey key, TValue value) void Add (KeyValuePair< TKey, TValue > item) bool Contains (KeyValuePair< TKey, TValue > item) void CopyTo (KeyValuePair< TKey, TValue > [] array, int arrayIndex) bool Remove (KeyValuePair< TKey, TValue > item) Public Properties inherited from Mirror::SyncIDictionary< TKey, TValue > Name bool IsReadOnly TValue this[TKey i] Public Attributes inherited from Mirror::SyncIDictionary< TKey, TValue > Name int Count bool IsDirty Protected Attributes inherited from Mirror::SyncIDictionary< TKey, TValue > Name readonly IDictionary< TKey, TValue > objects Public Functions inherited from SyncObject Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties inherited from SyncObject Name bool IsDirty true if there are changes since the last flush Detailed Description template < TKey , TValue > class Mirror :: SyncDictionary ; Public Functions Documentation function SyncDictionary inline SyncDictionary () function SyncDictionary inline SyncDictionary ( IEqualityComparer < TKey > eq ) function GetEnumerator new Dictionary < TKey , TValue > . Enumerator GetEnumerator () Public Attributes Documentation variable Values new Dictionary < TKey , TValue > . ValueCollection Values => (( Dictionary < TKey , TValue > ) objects ). Values ; variable Keys new Dictionary < TKey , TValue > . KeyCollection Keys => (( Dictionary < TKey , TValue > ) objects ). Keys ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncDictionary"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncDictionary/#mirrorsyncdictionary","text":"More... Inherits from Mirror::SyncIDictionary< TKey, TValue > , IDictionary< TKey, TValue >, SyncObject","title":"Mirror::SyncDictionary"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncDictionary/#public-functions","text":"Name SyncDictionary () SyncDictionary (IEqualityComparer< TKey > eq) new Dictionary< TKey, TValue >.Enumerator GetEnumerator ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncDictionary/#public-attributes","text":"Name new Dictionary< TKey, TValue >.ValueCollection Values new Dictionary< TKey, TValue >.KeyCollection Keys","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncDictionary/#additional-inherited-members","text":"Public Events inherited from Mirror::SyncIDictionary< TKey, TValue > Name SyncDictionaryChanged Callback () Public Functions inherited from Mirror::SyncIDictionary< TKey, TValue > Name delegate void SyncDictionaryChanged (Operation op, TKey key, TValue item) void Reset () Resets the SyncObject so that it can be re-used void Flush () Discard all the queued changes SyncIDictionary (IDictionary< TKey, TValue > objects) void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Clear () bool ContainsKey (TKey key) bool Remove (TKey key) bool TryGetValue (TKey key, out TValue value) void Add (TKey key, TValue value) void Add (KeyValuePair< TKey, TValue > item) bool Contains (KeyValuePair< TKey, TValue > item) void CopyTo (KeyValuePair< TKey, TValue > [] array, int arrayIndex) bool Remove (KeyValuePair< TKey, TValue > item) Public Properties inherited from Mirror::SyncIDictionary< TKey, TValue > Name bool IsReadOnly TValue this[TKey i] Public Attributes inherited from Mirror::SyncIDictionary< TKey, TValue > Name int Count bool IsDirty Protected Attributes inherited from Mirror::SyncIDictionary< TKey, TValue > Name readonly IDictionary< TKey, TValue > objects Public Functions inherited from SyncObject Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties inherited from SyncObject Name bool IsDirty true if there are changes since the last flush","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncDictionary/#detailed-description","text":"template < TKey , TValue > class Mirror :: SyncDictionary ;","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncDictionary/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncDictionary/#function-syncdictionary","text":"inline SyncDictionary ()","title":"function SyncDictionary"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncDictionary/#function-syncdictionary_1","text":"inline SyncDictionary ( IEqualityComparer < TKey > eq )","title":"function SyncDictionary"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncDictionary/#function-getenumerator","text":"new Dictionary < TKey , TValue > . Enumerator GetEnumerator ()","title":"function GetEnumerator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncDictionary/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncDictionary/#variable-values","text":"new Dictionary < TKey , TValue > . ValueCollection Values => (( Dictionary < TKey , TValue > ) objects ). Values ;","title":"variable Values"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncDictionary/#variable-keys","text":"new Dictionary < TKey , TValue > . KeyCollection Keys => (( Dictionary < TKey , TValue > ) objects ). Keys ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable Keys"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncHashSet/","text":"Mirror::SyncHashSet More... Inherits from Mirror::SyncSet< T > , ISet< T >, SyncObject Public Functions Name SyncHashSet () SyncHashSet (IEqualityComparer< T > comparer) new HashSet< T >.Enumerator GetEnumerator () Additional inherited members Public Events inherited from Mirror::SyncSet< T > Name SyncSetChanged Callback () Public Functions inherited from Mirror::SyncSet< T > Name delegate void SyncSetChanged (Operation op, T item) SyncSet (ISet< T > objects) void Reset () Resets the SyncObject so that it can be re-used void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync bool Add (T item) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) bool Remove (T item) void ExceptWith (IEnumerable< T > other) void IntersectWith (IEnumerable< T > other) bool IsProperSubsetOf (IEnumerable< T > other) bool IsProperSupersetOf (IEnumerable< T > other) bool IsSubsetOf (IEnumerable< T > other) bool IsSupersetOf (IEnumerable< T > other) bool Overlaps (IEnumerable< T > other) bool SetEquals (IEnumerable< T > other) void SymmetricExceptWith (IEnumerable< T > other) void UnionWith (IEnumerable< T > other) Public Properties inherited from Mirror::SyncSet< T > Name bool IsReadOnly Public Attributes inherited from Mirror::SyncSet< T > Name int Count bool IsDirty Protected Attributes inherited from Mirror::SyncSet< T > Name readonly ISet< T > objects Public Functions inherited from SyncObject Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties inherited from SyncObject Name bool IsDirty true if there are changes since the last flush Detailed Description template < T > class Mirror :: SyncHashSet ; Public Functions Documentation function SyncHashSet inline SyncHashSet () function SyncHashSet inline SyncHashSet ( IEqualityComparer < T > comparer ) function GetEnumerator new HashSet < T > . Enumerator GetEnumerator () Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncHashSet"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncHashSet/#mirrorsynchashset","text":"More... Inherits from Mirror::SyncSet< T > , ISet< T >, SyncObject","title":"Mirror::SyncHashSet"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncHashSet/#public-functions","text":"Name SyncHashSet () SyncHashSet (IEqualityComparer< T > comparer) new HashSet< T >.Enumerator GetEnumerator ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncHashSet/#additional-inherited-members","text":"Public Events inherited from Mirror::SyncSet< T > Name SyncSetChanged Callback () Public Functions inherited from Mirror::SyncSet< T > Name delegate void SyncSetChanged (Operation op, T item) SyncSet (ISet< T > objects) void Reset () Resets the SyncObject so that it can be re-used void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync bool Add (T item) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) bool Remove (T item) void ExceptWith (IEnumerable< T > other) void IntersectWith (IEnumerable< T > other) bool IsProperSubsetOf (IEnumerable< T > other) bool IsProperSupersetOf (IEnumerable< T > other) bool IsSubsetOf (IEnumerable< T > other) bool IsSupersetOf (IEnumerable< T > other) bool Overlaps (IEnumerable< T > other) bool SetEquals (IEnumerable< T > other) void SymmetricExceptWith (IEnumerable< T > other) void UnionWith (IEnumerable< T > other) Public Properties inherited from Mirror::SyncSet< T > Name bool IsReadOnly Public Attributes inherited from Mirror::SyncSet< T > Name int Count bool IsDirty Protected Attributes inherited from Mirror::SyncSet< T > Name readonly ISet< T > objects Public Functions inherited from SyncObject Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties inherited from SyncObject Name bool IsDirty true if there are changes since the last flush","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncHashSet/#detailed-description","text":"template < T > class Mirror :: SyncHashSet ;","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncHashSet/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncHashSet/#function-synchashset","text":"inline SyncHashSet ()","title":"function SyncHashSet"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncHashSet/#function-synchashset_1","text":"inline SyncHashSet ( IEqualityComparer < T > comparer )","title":"function SyncHashSet"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncHashSet/#function-getenumerator","text":"new HashSet < T > . Enumerator GetEnumerator () Updated on 29 January 2021 at 18:34:48 UTC","title":"function GetEnumerator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/","text":"Mirror::SyncIDictionary More... Inherits from IDictionary< TKey, TValue >, SyncObject , IReadOnlyDictionary< TKey, TValue > Inherited by SyncDictionary< TKey, TValue > Public Events Name SyncDictionaryChanged Callback () Public Functions Name delegate void SyncDictionaryChanged (Operation op, TKey key, TValue item) void Reset () Resets the SyncObject so that it can be re-used void Flush () Discard all the queued changes SyncIDictionary (IDictionary< TKey, TValue > objects) void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Clear () bool ContainsKey (TKey key) bool Remove (TKey key) bool TryGetValue (TKey key, out TValue value) void Add (TKey key, TValue value) void Add (KeyValuePair< TKey, TValue > item) bool Contains (KeyValuePair< TKey, TValue > item) void CopyTo (KeyValuePair< TKey, TValue > [] array, int arrayIndex) bool Remove (KeyValuePair< TKey, TValue > item) IEnumerator< KeyValuePair< TKey, TValue > > GetEnumerator () Public Properties Name bool IsReadOnly TValue this[TKey i] Public Attributes Name int Count bool IsDirty ICollection< TKey > Keys ICollection< TValue > Values Protected Attributes Name readonly IDictionary< TKey, TValue > objects Detailed Description template < TKey , TValue > class Mirror :: SyncIDictionary ; Public Events Documentation event Callback SyncDictionaryChanged Callback () Public Functions Documentation function SyncDictionaryChanged delegate void SyncDictionaryChanged ( Operation op , TKey key , TValue item ) function Reset inline void Reset () Resets the SyncObject so that it can be re-used Reimplements : Mirror::SyncObject::Reset function Flush void Flush () Discard all the queued changes Reimplements : Mirror::SyncObject::Flush Consider the object fully synchronized with clients function SyncIDictionary inline SyncIDictionary ( IDictionary < TKey , TValue > objects ) function OnSerializeAll inline void OnSerializeAll ( NetworkWriter writer ) Write a full copy of the object Parameters : writer Reimplements : Mirror::SyncObject::OnSerializeAll function OnSerializeDelta inline void OnSerializeDelta ( NetworkWriter writer ) Write the changes made to the object since last sync Parameters : writer Reimplements : Mirror::SyncObject::OnSerializeDelta function OnDeserializeAll inline void OnDeserializeAll ( NetworkReader reader ) Reads a full copy of the object Parameters : reader Reimplements : Mirror::SyncObject::OnDeserializeAll function OnDeserializeDelta inline void OnDeserializeDelta ( NetworkReader reader ) Reads the changes made to the object since last sync Parameters : reader Reimplements : Mirror::SyncObject::OnDeserializeDelta function Clear inline void Clear () function ContainsKey bool ContainsKey ( TKey key ) function Remove inline bool Remove ( TKey key ) function TryGetValue bool TryGetValue ( TKey key , out TValue value ) function Add inline void Add ( TKey key , TValue value ) function Add void Add ( KeyValuePair < TKey , TValue > item ) function Contains inline bool Contains ( KeyValuePair < TKey , TValue > item ) function CopyTo inline void CopyTo ( KeyValuePair < TKey , TValue > [] array , int arrayIndex ) function Remove inline bool Remove ( KeyValuePair < TKey , TValue > item ) function GetEnumerator IEnumerator < KeyValuePair < TKey , TValue > > GetEnumerator () Public Property Documentation property IsReadOnly bool IsReadOnly ; property this[TKey i] TValue this [ TKey i ]; Public Attributes Documentation variable Count int Count => objects . Count ; variable IsDirty bool IsDirty => changes . Count > 0 ; variable Keys ICollection < TKey > Keys => objects . Keys ; variable Values ICollection < TValue > Values => objects . Values ; Protected Attributes Documentation variable objects readonly IDictionary < TKey , TValue > objects ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncIDictionary"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#mirrorsyncidictionary","text":"More... Inherits from IDictionary< TKey, TValue >, SyncObject , IReadOnlyDictionary< TKey, TValue > Inherited by SyncDictionary< TKey, TValue >","title":"Mirror::SyncIDictionary"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#public-events","text":"Name SyncDictionaryChanged Callback ()","title":"Public Events"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#public-functions","text":"Name delegate void SyncDictionaryChanged (Operation op, TKey key, TValue item) void Reset () Resets the SyncObject so that it can be re-used void Flush () Discard all the queued changes SyncIDictionary (IDictionary< TKey, TValue > objects) void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Clear () bool ContainsKey (TKey key) bool Remove (TKey key) bool TryGetValue (TKey key, out TValue value) void Add (TKey key, TValue value) void Add (KeyValuePair< TKey, TValue > item) bool Contains (KeyValuePair< TKey, TValue > item) void CopyTo (KeyValuePair< TKey, TValue > [] array, int arrayIndex) bool Remove (KeyValuePair< TKey, TValue > item) IEnumerator< KeyValuePair< TKey, TValue > > GetEnumerator ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#public-properties","text":"Name bool IsReadOnly TValue this[TKey i]","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#public-attributes","text":"Name int Count bool IsDirty ICollection< TKey > Keys ICollection< TValue > Values","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#protected-attributes","text":"Name readonly IDictionary< TKey, TValue > objects","title":"Protected Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#detailed-description","text":"template < TKey , TValue > class Mirror :: SyncIDictionary ;","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#public-events-documentation","text":"","title":"Public Events Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#event-callback","text":"SyncDictionaryChanged Callback ()","title":"event Callback"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#function-syncdictionarychanged","text":"delegate void SyncDictionaryChanged ( Operation op , TKey key , TValue item )","title":"function SyncDictionaryChanged"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#function-reset","text":"inline void Reset () Resets the SyncObject so that it can be re-used Reimplements : Mirror::SyncObject::Reset","title":"function Reset"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#function-flush","text":"void Flush () Discard all the queued changes Reimplements : Mirror::SyncObject::Flush Consider the object fully synchronized with clients","title":"function Flush"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#function-syncidictionary","text":"inline SyncIDictionary ( IDictionary < TKey , TValue > objects )","title":"function SyncIDictionary"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#function-onserializeall","text":"inline void OnSerializeAll ( NetworkWriter writer ) Write a full copy of the object Parameters : writer Reimplements : Mirror::SyncObject::OnSerializeAll","title":"function OnSerializeAll"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#function-onserializedelta","text":"inline void OnSerializeDelta ( NetworkWriter writer ) Write the changes made to the object since last sync Parameters : writer Reimplements : Mirror::SyncObject::OnSerializeDelta","title":"function OnSerializeDelta"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#function-ondeserializeall","text":"inline void OnDeserializeAll ( NetworkReader reader ) Reads a full copy of the object Parameters : reader Reimplements : Mirror::SyncObject::OnDeserializeAll","title":"function OnDeserializeAll"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#function-ondeserializedelta","text":"inline void OnDeserializeDelta ( NetworkReader reader ) Reads the changes made to the object since last sync Parameters : reader Reimplements : Mirror::SyncObject::OnDeserializeDelta","title":"function OnDeserializeDelta"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#function-clear","text":"inline void Clear ()","title":"function Clear"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#function-containskey","text":"bool ContainsKey ( TKey key )","title":"function ContainsKey"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#function-remove","text":"inline bool Remove ( TKey key )","title":"function Remove"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#function-trygetvalue","text":"bool TryGetValue ( TKey key , out TValue value )","title":"function TryGetValue"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#function-add","text":"inline void Add ( TKey key , TValue value )","title":"function Add"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#function-add_1","text":"void Add ( KeyValuePair < TKey , TValue > item )","title":"function Add"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#function-contains","text":"inline bool Contains ( KeyValuePair < TKey , TValue > item )","title":"function Contains"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#function-copyto","text":"inline void CopyTo ( KeyValuePair < TKey , TValue > [] array , int arrayIndex )","title":"function CopyTo"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#function-remove_1","text":"inline bool Remove ( KeyValuePair < TKey , TValue > item )","title":"function Remove"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#function-getenumerator","text":"IEnumerator < KeyValuePair < TKey , TValue > > GetEnumerator ()","title":"function GetEnumerator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#property-isreadonly","text":"bool IsReadOnly ;","title":"property IsReadOnly"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#property-thistkey-i","text":"TValue this [ TKey i ];","title":"property this[TKey i]"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#variable-count","text":"int Count => objects . Count ;","title":"variable Count"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#variable-isdirty","text":"bool IsDirty => changes . Count > 0 ;","title":"variable IsDirty"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#variable-keys","text":"ICollection < TKey > Keys => objects . Keys ;","title":"variable Keys"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#variable-values","text":"ICollection < TValue > Values => objects . Values ;","title":"variable Values"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncIDictionary/#variable-objects","text":"readonly IDictionary < TKey , TValue > objects ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable objects"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/","text":"Mirror::SyncList More... Inherits from IList< T >, IReadOnlyList< T >, SyncObject Public Classes Name struct Enumerator Public Events Name SyncListChanged Callback () Public Functions Name delegate void SyncListChanged (Operation op, int itemIndex, T oldItem, T newItem) SyncList () SyncList (IEqualityComparer< T > comparer) SyncList (IList< T > objects, IEqualityComparer< T > comparer =null) void Flush () Discard all the queued changes void Reset () Resets the SyncObject so that it can be re-used void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Add (T item) void AddRange (IEnumerable< T > range) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) int IndexOf (T item) int FindIndex (Predicate< T > match) T Find (Predicate< T > match) List< T > FindAll (Predicate< T > match) void Insert (int index, T item) void InsertRange (int index, IEnumerable< T > range) bool Remove (T item) void RemoveAt (int index) int RemoveAll (Predicate< T > match) Enumerator GetEnumerator () Public Properties Name bool IsReadOnly T this[int i] Public Attributes Name int Count bool IsDirty Detailed Description template < T > class Mirror :: SyncList ; Public Events Documentation event Callback SyncListChanged Callback () Public Functions Documentation function SyncListChanged delegate void SyncListChanged ( Operation op , int itemIndex , T oldItem , T newItem ) function SyncList inline SyncList () function SyncList inline SyncList ( IEqualityComparer < T > comparer ) function SyncList inline SyncList ( IList < T > objects , IEqualityComparer < T > comparer = null ) function Flush void Flush () Discard all the queued changes Reimplements : Mirror::SyncObject::Flush Consider the object fully synchronized with clients function Reset inline void Reset () Resets the SyncObject so that it can be re-used Reimplements : Mirror::SyncObject::Reset function OnSerializeAll inline void OnSerializeAll ( NetworkWriter writer ) Write a full copy of the object Parameters : writer Reimplements : Mirror::SyncObject::OnSerializeAll function OnSerializeDelta inline void OnSerializeDelta ( NetworkWriter writer ) Write the changes made to the object since last sync Parameters : writer Reimplements : Mirror::SyncObject::OnSerializeDelta function OnDeserializeAll inline void OnDeserializeAll ( NetworkReader reader ) Reads a full copy of the object Parameters : reader Reimplements : Mirror::SyncObject::OnDeserializeAll function OnDeserializeDelta inline void OnDeserializeDelta ( NetworkReader reader ) Reads the changes made to the object since last sync Parameters : reader Reimplements : Mirror::SyncObject::OnDeserializeDelta function Add inline void Add ( T item ) function AddRange inline void AddRange ( IEnumerable < T > range ) function Clear inline void Clear () function Contains bool Contains ( T item ) function CopyTo void CopyTo ( T [] array , int index ) function IndexOf inline int IndexOf ( T item ) function FindIndex inline int FindIndex ( Predicate < T > match ) function Find inline T Find ( Predicate < T > match ) function FindAll inline List < T > FindAll ( Predicate < T > match ) function Insert inline void Insert ( int index , T item ) function InsertRange inline void InsertRange ( int index , IEnumerable < T > range ) function Remove inline bool Remove ( T item ) function RemoveAt inline void RemoveAt ( int index ) function RemoveAll inline int RemoveAll ( Predicate < T > match ) function GetEnumerator Enumerator GetEnumerator () Public Property Documentation property IsReadOnly bool IsReadOnly ; property this[int i] T this [ int i ]; Public Attributes Documentation variable Count int Count => objects . Count ; variable IsDirty bool IsDirty => changes . Count > 0 ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncList"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#mirrorsynclist","text":"More... Inherits from IList< T >, IReadOnlyList< T >, SyncObject","title":"Mirror::SyncList"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#public-classes","text":"Name struct Enumerator","title":"Public Classes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#public-events","text":"Name SyncListChanged Callback ()","title":"Public Events"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#public-functions","text":"Name delegate void SyncListChanged (Operation op, int itemIndex, T oldItem, T newItem) SyncList () SyncList (IEqualityComparer< T > comparer) SyncList (IList< T > objects, IEqualityComparer< T > comparer =null) void Flush () Discard all the queued changes void Reset () Resets the SyncObject so that it can be re-used void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Add (T item) void AddRange (IEnumerable< T > range) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) int IndexOf (T item) int FindIndex (Predicate< T > match) T Find (Predicate< T > match) List< T > FindAll (Predicate< T > match) void Insert (int index, T item) void InsertRange (int index, IEnumerable< T > range) bool Remove (T item) void RemoveAt (int index) int RemoveAll (Predicate< T > match) Enumerator GetEnumerator ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#public-properties","text":"Name bool IsReadOnly T this[int i]","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#public-attributes","text":"Name int Count bool IsDirty","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#detailed-description","text":"template < T > class Mirror :: SyncList ;","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#public-events-documentation","text":"","title":"Public Events Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#event-callback","text":"SyncListChanged Callback ()","title":"event Callback"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-synclistchanged","text":"delegate void SyncListChanged ( Operation op , int itemIndex , T oldItem , T newItem )","title":"function SyncListChanged"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-synclist","text":"inline SyncList ()","title":"function SyncList"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-synclist_1","text":"inline SyncList ( IEqualityComparer < T > comparer )","title":"function SyncList"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-synclist_2","text":"inline SyncList ( IList < T > objects , IEqualityComparer < T > comparer = null )","title":"function SyncList"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-flush","text":"void Flush () Discard all the queued changes Reimplements : Mirror::SyncObject::Flush Consider the object fully synchronized with clients","title":"function Flush"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-reset","text":"inline void Reset () Resets the SyncObject so that it can be re-used Reimplements : Mirror::SyncObject::Reset","title":"function Reset"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-onserializeall","text":"inline void OnSerializeAll ( NetworkWriter writer ) Write a full copy of the object Parameters : writer Reimplements : Mirror::SyncObject::OnSerializeAll","title":"function OnSerializeAll"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-onserializedelta","text":"inline void OnSerializeDelta ( NetworkWriter writer ) Write the changes made to the object since last sync Parameters : writer Reimplements : Mirror::SyncObject::OnSerializeDelta","title":"function OnSerializeDelta"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-ondeserializeall","text":"inline void OnDeserializeAll ( NetworkReader reader ) Reads a full copy of the object Parameters : reader Reimplements : Mirror::SyncObject::OnDeserializeAll","title":"function OnDeserializeAll"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-ondeserializedelta","text":"inline void OnDeserializeDelta ( NetworkReader reader ) Reads the changes made to the object since last sync Parameters : reader Reimplements : Mirror::SyncObject::OnDeserializeDelta","title":"function OnDeserializeDelta"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-add","text":"inline void Add ( T item )","title":"function Add"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-addrange","text":"inline void AddRange ( IEnumerable < T > range )","title":"function AddRange"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-clear","text":"inline void Clear ()","title":"function Clear"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-contains","text":"bool Contains ( T item )","title":"function Contains"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-copyto","text":"void CopyTo ( T [] array , int index )","title":"function CopyTo"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-indexof","text":"inline int IndexOf ( T item )","title":"function IndexOf"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-findindex","text":"inline int FindIndex ( Predicate < T > match )","title":"function FindIndex"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-find","text":"inline T Find ( Predicate < T > match )","title":"function Find"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-findall","text":"inline List < T > FindAll ( Predicate < T > match )","title":"function FindAll"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-insert","text":"inline void Insert ( int index , T item )","title":"function Insert"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-insertrange","text":"inline void InsertRange ( int index , IEnumerable < T > range )","title":"function InsertRange"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-remove","text":"inline bool Remove ( T item )","title":"function Remove"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-removeat","text":"inline void RemoveAt ( int index )","title":"function RemoveAt"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-removeall","text":"inline int RemoveAll ( Predicate < T > match )","title":"function RemoveAll"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#function-getenumerator","text":"Enumerator GetEnumerator ()","title":"function GetEnumerator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#property-isreadonly","text":"bool IsReadOnly ;","title":"property IsReadOnly"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#property-thisint-i","text":"T this [ int i ];","title":"property this[int i]"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#variable-count","text":"int Count => objects . Count ;","title":"variable Count"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncList/#variable-isdirty","text":"bool IsDirty => changes . Count > 0 ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable IsDirty"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListBool/","text":"Mirror::SyncListBool Inherits from SyncList< bool > , IList< T >, SyncObject Additional inherited members Public Classes inherited from SyncList< bool > Name struct Enumerator Public Events inherited from SyncList< bool > Name SyncListChanged Callback () Public Functions inherited from SyncList< bool > Name delegate void SyncListChanged (Operation op, int itemIndex, T oldItem, T newItem) SyncList () SyncList (IEqualityComparer< T > comparer) SyncList (IList< T > objects, IEqualityComparer< T > comparer =null) void Flush () Discard all the queued changes void Reset () Resets the SyncObject so that it can be re-used void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Add (T item) void AddRange (IEnumerable< T > range) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) int IndexOf (T item) int FindIndex (Predicate< T > match) T Find (Predicate< T > match) List< T > FindAll (Predicate< T > match) void Insert (int index, T item) void InsertRange (int index, IEnumerable< T > range) bool Remove (T item) void RemoveAt (int index) int RemoveAll (Predicate< T > match) Enumerator GetEnumerator () Public Properties inherited from SyncList< bool > Name bool IsReadOnly T this[int i] Public Attributes inherited from SyncList< bool > Name int Count bool IsDirty Public Functions inherited from SyncObject Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties inherited from SyncObject Name bool IsDirty true if there are changes since the last flush Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncListBool"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListBool/#mirrorsynclistbool","text":"Inherits from SyncList< bool > , IList< T >, SyncObject","title":"Mirror::SyncListBool"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListBool/#additional-inherited-members","text":"Public Classes inherited from SyncList< bool > Name struct Enumerator Public Events inherited from SyncList< bool > Name SyncListChanged Callback () Public Functions inherited from SyncList< bool > Name delegate void SyncListChanged (Operation op, int itemIndex, T oldItem, T newItem) SyncList () SyncList (IEqualityComparer< T > comparer) SyncList (IList< T > objects, IEqualityComparer< T > comparer =null) void Flush () Discard all the queued changes void Reset () Resets the SyncObject so that it can be re-used void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Add (T item) void AddRange (IEnumerable< T > range) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) int IndexOf (T item) int FindIndex (Predicate< T > match) T Find (Predicate< T > match) List< T > FindAll (Predicate< T > match) void Insert (int index, T item) void InsertRange (int index, IEnumerable< T > range) bool Remove (T item) void RemoveAt (int index) int RemoveAll (Predicate< T > match) Enumerator GetEnumerator () Public Properties inherited from SyncList< bool > Name bool IsReadOnly T this[int i] Public Attributes inherited from SyncList< bool > Name int Count bool IsDirty Public Functions inherited from SyncObject Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties inherited from SyncObject Name bool IsDirty true if there are changes since the last flush Updated on 29 January 2021 at 18:34:48 UTC","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListDrawer/","text":"Mirror::SyncListDrawer Public Functions Name SyncListDrawer (UnityEngine.Object targetObject) void Draw () Public Functions Documentation function SyncListDrawer inline SyncListDrawer ( UnityEngine . Object targetObject ) function Draw inline void Draw () Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncListDrawer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListDrawer/#mirrorsynclistdrawer","text":"","title":"Mirror::SyncListDrawer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListDrawer/#public-functions","text":"Name SyncListDrawer (UnityEngine.Object targetObject) void Draw ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListDrawer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListDrawer/#function-synclistdrawer","text":"inline SyncListDrawer ( UnityEngine . Object targetObject )","title":"function SyncListDrawer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListDrawer/#function-draw","text":"inline void Draw () Updated on 29 January 2021 at 18:34:48 UTC","title":"function Draw"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListDrawer_1_1SyncListField/","text":"Mirror::SyncListDrawer::SyncListField Public Functions Name SyncListField (FieldInfo field) Public Attributes Name bool visible readonly FieldInfo field readonly string label Public Functions Documentation function SyncListField inline SyncListField ( FieldInfo field ) Public Attributes Documentation variable visible bool visible ; variable field readonly FieldInfo field ; variable label readonly string label ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncListDrawer::SyncListField"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListDrawer_1_1SyncListField/#mirrorsynclistdrawersynclistfield","text":"","title":"Mirror::SyncListDrawer::SyncListField"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListDrawer_1_1SyncListField/#public-functions","text":"Name SyncListField (FieldInfo field)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListDrawer_1_1SyncListField/#public-attributes","text":"Name bool visible readonly FieldInfo field readonly string label","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListDrawer_1_1SyncListField/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListDrawer_1_1SyncListField/#function-synclistfield","text":"inline SyncListField ( FieldInfo field )","title":"function SyncListField"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListDrawer_1_1SyncListField/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListDrawer_1_1SyncListField/#variable-visible","text":"bool visible ;","title":"variable visible"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListDrawer_1_1SyncListField/#variable-field","text":"readonly FieldInfo field ;","title":"variable field"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListDrawer_1_1SyncListField/#variable-label","text":"readonly string label ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable label"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListFloat/","text":"Mirror::SyncListFloat Inherits from SyncList< float > , IList< T >, SyncObject Additional inherited members Public Classes inherited from SyncList< float > Name struct Enumerator Public Events inherited from SyncList< float > Name SyncListChanged Callback () Public Functions inherited from SyncList< float > Name delegate void SyncListChanged (Operation op, int itemIndex, T oldItem, T newItem) SyncList () SyncList (IEqualityComparer< T > comparer) SyncList (IList< T > objects, IEqualityComparer< T > comparer =null) void Flush () Discard all the queued changes void Reset () Resets the SyncObject so that it can be re-used void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Add (T item) void AddRange (IEnumerable< T > range) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) int IndexOf (T item) int FindIndex (Predicate< T > match) T Find (Predicate< T > match) List< T > FindAll (Predicate< T > match) void Insert (int index, T item) void InsertRange (int index, IEnumerable< T > range) bool Remove (T item) void RemoveAt (int index) int RemoveAll (Predicate< T > match) Enumerator GetEnumerator () Public Properties inherited from SyncList< float > Name bool IsReadOnly T this[int i] Public Attributes inherited from SyncList< float > Name int Count bool IsDirty Public Functions inherited from SyncObject Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties inherited from SyncObject Name bool IsDirty true if there are changes since the last flush Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncListFloat"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListFloat/#mirrorsynclistfloat","text":"Inherits from SyncList< float > , IList< T >, SyncObject","title":"Mirror::SyncListFloat"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListFloat/#additional-inherited-members","text":"Public Classes inherited from SyncList< float > Name struct Enumerator Public Events inherited from SyncList< float > Name SyncListChanged Callback () Public Functions inherited from SyncList< float > Name delegate void SyncListChanged (Operation op, int itemIndex, T oldItem, T newItem) SyncList () SyncList (IEqualityComparer< T > comparer) SyncList (IList< T > objects, IEqualityComparer< T > comparer =null) void Flush () Discard all the queued changes void Reset () Resets the SyncObject so that it can be re-used void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Add (T item) void AddRange (IEnumerable< T > range) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) int IndexOf (T item) int FindIndex (Predicate< T > match) T Find (Predicate< T > match) List< T > FindAll (Predicate< T > match) void Insert (int index, T item) void InsertRange (int index, IEnumerable< T > range) bool Remove (T item) void RemoveAt (int index) int RemoveAll (Predicate< T > match) Enumerator GetEnumerator () Public Properties inherited from SyncList< float > Name bool IsReadOnly T this[int i] Public Attributes inherited from SyncList< float > Name int Count bool IsDirty Public Functions inherited from SyncObject Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties inherited from SyncObject Name bool IsDirty true if there are changes since the last flush Updated on 29 January 2021 at 18:34:48 UTC","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListInt/","text":"Mirror::SyncListInt Inherits from SyncList< int > , IList< T >, SyncObject Additional inherited members Public Classes inherited from SyncList< int > Name struct Enumerator Public Events inherited from SyncList< int > Name SyncListChanged Callback () Public Functions inherited from SyncList< int > Name delegate void SyncListChanged (Operation op, int itemIndex, T oldItem, T newItem) SyncList () SyncList (IEqualityComparer< T > comparer) SyncList (IList< T > objects, IEqualityComparer< T > comparer =null) void Flush () Discard all the queued changes void Reset () Resets the SyncObject so that it can be re-used void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Add (T item) void AddRange (IEnumerable< T > range) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) int IndexOf (T item) int FindIndex (Predicate< T > match) T Find (Predicate< T > match) List< T > FindAll (Predicate< T > match) void Insert (int index, T item) void InsertRange (int index, IEnumerable< T > range) bool Remove (T item) void RemoveAt (int index) int RemoveAll (Predicate< T > match) Enumerator GetEnumerator () Public Properties inherited from SyncList< int > Name bool IsReadOnly T this[int i] Public Attributes inherited from SyncList< int > Name int Count bool IsDirty Public Functions inherited from SyncObject Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties inherited from SyncObject Name bool IsDirty true if there are changes since the last flush Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncListInt"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListInt/#mirrorsynclistint","text":"Inherits from SyncList< int > , IList< T >, SyncObject","title":"Mirror::SyncListInt"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListInt/#additional-inherited-members","text":"Public Classes inherited from SyncList< int > Name struct Enumerator Public Events inherited from SyncList< int > Name SyncListChanged Callback () Public Functions inherited from SyncList< int > Name delegate void SyncListChanged (Operation op, int itemIndex, T oldItem, T newItem) SyncList () SyncList (IEqualityComparer< T > comparer) SyncList (IList< T > objects, IEqualityComparer< T > comparer =null) void Flush () Discard all the queued changes void Reset () Resets the SyncObject so that it can be re-used void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Add (T item) void AddRange (IEnumerable< T > range) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) int IndexOf (T item) int FindIndex (Predicate< T > match) T Find (Predicate< T > match) List< T > FindAll (Predicate< T > match) void Insert (int index, T item) void InsertRange (int index, IEnumerable< T > range) bool Remove (T item) void RemoveAt (int index) int RemoveAll (Predicate< T > match) Enumerator GetEnumerator () Public Properties inherited from SyncList< int > Name bool IsReadOnly T this[int i] Public Attributes inherited from SyncList< int > Name int Count bool IsDirty Public Functions inherited from SyncObject Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties inherited from SyncObject Name bool IsDirty true if there are changes since the last flush Updated on 29 January 2021 at 18:34:48 UTC","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListString/","text":"Mirror::SyncListString Inherits from SyncList< string > , IList< T >, SyncObject Additional inherited members Public Classes inherited from SyncList< string > Name struct Enumerator Public Events inherited from SyncList< string > Name SyncListChanged Callback () Public Functions inherited from SyncList< string > Name delegate void SyncListChanged (Operation op, int itemIndex, T oldItem, T newItem) SyncList () SyncList (IEqualityComparer< T > comparer) SyncList (IList< T > objects, IEqualityComparer< T > comparer =null) void Flush () Discard all the queued changes void Reset () Resets the SyncObject so that it can be re-used void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Add (T item) void AddRange (IEnumerable< T > range) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) int IndexOf (T item) int FindIndex (Predicate< T > match) T Find (Predicate< T > match) List< T > FindAll (Predicate< T > match) void Insert (int index, T item) void InsertRange (int index, IEnumerable< T > range) bool Remove (T item) void RemoveAt (int index) int RemoveAll (Predicate< T > match) Enumerator GetEnumerator () Public Properties inherited from SyncList< string > Name bool IsReadOnly T this[int i] Public Attributes inherited from SyncList< string > Name int Count bool IsDirty Public Functions inherited from SyncObject Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties inherited from SyncObject Name bool IsDirty true if there are changes since the last flush Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncListString"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListString/#mirrorsyncliststring","text":"Inherits from SyncList< string > , IList< T >, SyncObject","title":"Mirror::SyncListString"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListString/#additional-inherited-members","text":"Public Classes inherited from SyncList< string > Name struct Enumerator Public Events inherited from SyncList< string > Name SyncListChanged Callback () Public Functions inherited from SyncList< string > Name delegate void SyncListChanged (Operation op, int itemIndex, T oldItem, T newItem) SyncList () SyncList (IEqualityComparer< T > comparer) SyncList (IList< T > objects, IEqualityComparer< T > comparer =null) void Flush () Discard all the queued changes void Reset () Resets the SyncObject so that it can be re-used void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Add (T item) void AddRange (IEnumerable< T > range) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) int IndexOf (T item) int FindIndex (Predicate< T > match) T Find (Predicate< T > match) List< T > FindAll (Predicate< T > match) void Insert (int index, T item) void InsertRange (int index, IEnumerable< T > range) bool Remove (T item) void RemoveAt (int index) int RemoveAll (Predicate< T > match) Enumerator GetEnumerator () Public Properties inherited from SyncList< string > Name bool IsReadOnly T this[int i] Public Attributes inherited from SyncList< string > Name int Count bool IsDirty Public Functions inherited from SyncObject Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties inherited from SyncObject Name bool IsDirty true if there are changes since the last flush Updated on 29 January 2021 at 18:34:48 UTC","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListUInt/","text":"Mirror::SyncListUInt Inherits from SyncList< uint > , IList< T >, SyncObject Additional inherited members Public Classes inherited from SyncList< uint > Name struct Enumerator Public Events inherited from SyncList< uint > Name SyncListChanged Callback () Public Functions inherited from SyncList< uint > Name delegate void SyncListChanged (Operation op, int itemIndex, T oldItem, T newItem) SyncList () SyncList (IEqualityComparer< T > comparer) SyncList (IList< T > objects, IEqualityComparer< T > comparer =null) void Flush () Discard all the queued changes void Reset () Resets the SyncObject so that it can be re-used void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Add (T item) void AddRange (IEnumerable< T > range) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) int IndexOf (T item) int FindIndex (Predicate< T > match) T Find (Predicate< T > match) List< T > FindAll (Predicate< T > match) void Insert (int index, T item) void InsertRange (int index, IEnumerable< T > range) bool Remove (T item) void RemoveAt (int index) int RemoveAll (Predicate< T > match) Enumerator GetEnumerator () Public Properties inherited from SyncList< uint > Name bool IsReadOnly T this[int i] Public Attributes inherited from SyncList< uint > Name int Count bool IsDirty Public Functions inherited from SyncObject Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties inherited from SyncObject Name bool IsDirty true if there are changes since the last flush Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncListUInt"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListUInt/#mirrorsynclistuint","text":"Inherits from SyncList< uint > , IList< T >, SyncObject","title":"Mirror::SyncListUInt"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncListUInt/#additional-inherited-members","text":"Public Classes inherited from SyncList< uint > Name struct Enumerator Public Events inherited from SyncList< uint > Name SyncListChanged Callback () Public Functions inherited from SyncList< uint > Name delegate void SyncListChanged (Operation op, int itemIndex, T oldItem, T newItem) SyncList () SyncList (IEqualityComparer< T > comparer) SyncList (IList< T > objects, IEqualityComparer< T > comparer =null) void Flush () Discard all the queued changes void Reset () Resets the SyncObject so that it can be re-used void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Add (T item) void AddRange (IEnumerable< T > range) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) int IndexOf (T item) int FindIndex (Predicate< T > match) T Find (Predicate< T > match) List< T > FindAll (Predicate< T > match) void Insert (int index, T item) void InsertRange (int index, IEnumerable< T > range) bool Remove (T item) void RemoveAt (int index) int RemoveAll (Predicate< T > match) Enumerator GetEnumerator () Public Properties inherited from SyncList< uint > Name bool IsReadOnly T this[int i] Public Attributes inherited from SyncList< uint > Name int Count bool IsDirty Public Functions inherited from SyncObject Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties inherited from SyncObject Name bool IsDirty true if there are changes since the last flush Updated on 29 January 2021 at 18:34:48 UTC","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/","text":"Mirror::SyncSet More... Inherits from ISet< T >, SyncObject Inherited by SyncHashSet< T > , SyncSortedSet< T > Public Events Name SyncSetChanged Callback () Public Functions Name delegate void SyncSetChanged (Operation op, T item) SyncSet (ISet< T > objects) void Reset () Resets the SyncObject so that it can be re-used void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync bool Add (T item) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) bool Remove (T item) IEnumerator< T > GetEnumerator () void ExceptWith (IEnumerable< T > other) void IntersectWith (IEnumerable< T > other) bool IsProperSubsetOf (IEnumerable< T > other) bool IsProperSupersetOf (IEnumerable< T > other) bool IsSubsetOf (IEnumerable< T > other) bool IsSupersetOf (IEnumerable< T > other) bool Overlaps (IEnumerable< T > other) bool SetEquals (IEnumerable< T > other) void SymmetricExceptWith (IEnumerable< T > other) void UnionWith (IEnumerable< T > other) Public Properties Name bool IsReadOnly Public Attributes Name int Count bool IsDirty Protected Attributes Name readonly ISet< T > objects Detailed Description template < T > class Mirror :: SyncSet ; Public Events Documentation event Callback SyncSetChanged Callback () Public Functions Documentation function SyncSetChanged delegate void SyncSetChanged ( Operation op , T item ) function SyncSet inline SyncSet ( ISet < T > objects ) function Reset inline void Reset () Resets the SyncObject so that it can be re-used Reimplements : Mirror::SyncObject::Reset function Flush void Flush () Discard all the queued changes Reimplements : Mirror::SyncObject::Flush Consider the object fully synchronized with clients function OnSerializeAll inline void OnSerializeAll ( NetworkWriter writer ) Write a full copy of the object Parameters : writer Reimplements : Mirror::SyncObject::OnSerializeAll function OnSerializeDelta inline void OnSerializeDelta ( NetworkWriter writer ) Write the changes made to the object since last sync Parameters : writer Reimplements : Mirror::SyncObject::OnSerializeDelta function OnDeserializeAll inline void OnDeserializeAll ( NetworkReader reader ) Reads a full copy of the object Parameters : reader Reimplements : Mirror::SyncObject::OnDeserializeAll function OnDeserializeDelta inline void OnDeserializeDelta ( NetworkReader reader ) Reads the changes made to the object since last sync Parameters : reader Reimplements : Mirror::SyncObject::OnDeserializeDelta function Add inline bool Add ( T item ) function Clear inline void Clear () function Contains bool Contains ( T item ) function CopyTo void CopyTo ( T [] array , int index ) function Remove inline bool Remove ( T item ) function GetEnumerator IEnumerator < T > GetEnumerator () function ExceptWith inline void ExceptWith ( IEnumerable < T > other ) function IntersectWith inline void IntersectWith ( IEnumerable < T > other ) function IsProperSubsetOf bool IsProperSubsetOf ( IEnumerable < T > other ) function IsProperSupersetOf bool IsProperSupersetOf ( IEnumerable < T > other ) function IsSubsetOf bool IsSubsetOf ( IEnumerable < T > other ) function IsSupersetOf bool IsSupersetOf ( IEnumerable < T > other ) function Overlaps bool Overlaps ( IEnumerable < T > other ) function SetEquals bool SetEquals ( IEnumerable < T > other ) function SymmetricExceptWith inline void SymmetricExceptWith ( IEnumerable < T > other ) function UnionWith inline void UnionWith ( IEnumerable < T > other ) Public Property Documentation property IsReadOnly bool IsReadOnly ; Public Attributes Documentation variable Count int Count => objects . Count ; variable IsDirty bool IsDirty => changes . Count > 0 ; Protected Attributes Documentation variable objects readonly ISet < T > objects ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncSet"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#mirrorsyncset","text":"More... Inherits from ISet< T >, SyncObject Inherited by SyncHashSet< T > , SyncSortedSet< T >","title":"Mirror::SyncSet"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#public-events","text":"Name SyncSetChanged Callback ()","title":"Public Events"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#public-functions","text":"Name delegate void SyncSetChanged (Operation op, T item) SyncSet (ISet< T > objects) void Reset () Resets the SyncObject so that it can be re-used void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync bool Add (T item) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) bool Remove (T item) IEnumerator< T > GetEnumerator () void ExceptWith (IEnumerable< T > other) void IntersectWith (IEnumerable< T > other) bool IsProperSubsetOf (IEnumerable< T > other) bool IsProperSupersetOf (IEnumerable< T > other) bool IsSubsetOf (IEnumerable< T > other) bool IsSupersetOf (IEnumerable< T > other) bool Overlaps (IEnumerable< T > other) bool SetEquals (IEnumerable< T > other) void SymmetricExceptWith (IEnumerable< T > other) void UnionWith (IEnumerable< T > other)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#public-properties","text":"Name bool IsReadOnly","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#public-attributes","text":"Name int Count bool IsDirty","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#protected-attributes","text":"Name readonly ISet< T > objects","title":"Protected Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#detailed-description","text":"template < T > class Mirror :: SyncSet ;","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#public-events-documentation","text":"","title":"Public Events Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#event-callback","text":"SyncSetChanged Callback ()","title":"event Callback"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-syncsetchanged","text":"delegate void SyncSetChanged ( Operation op , T item )","title":"function SyncSetChanged"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-syncset","text":"inline SyncSet ( ISet < T > objects )","title":"function SyncSet"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-reset","text":"inline void Reset () Resets the SyncObject so that it can be re-used Reimplements : Mirror::SyncObject::Reset","title":"function Reset"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-flush","text":"void Flush () Discard all the queued changes Reimplements : Mirror::SyncObject::Flush Consider the object fully synchronized with clients","title":"function Flush"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-onserializeall","text":"inline void OnSerializeAll ( NetworkWriter writer ) Write a full copy of the object Parameters : writer Reimplements : Mirror::SyncObject::OnSerializeAll","title":"function OnSerializeAll"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-onserializedelta","text":"inline void OnSerializeDelta ( NetworkWriter writer ) Write the changes made to the object since last sync Parameters : writer Reimplements : Mirror::SyncObject::OnSerializeDelta","title":"function OnSerializeDelta"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-ondeserializeall","text":"inline void OnDeserializeAll ( NetworkReader reader ) Reads a full copy of the object Parameters : reader Reimplements : Mirror::SyncObject::OnDeserializeAll","title":"function OnDeserializeAll"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-ondeserializedelta","text":"inline void OnDeserializeDelta ( NetworkReader reader ) Reads the changes made to the object since last sync Parameters : reader Reimplements : Mirror::SyncObject::OnDeserializeDelta","title":"function OnDeserializeDelta"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-add","text":"inline bool Add ( T item )","title":"function Add"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-clear","text":"inline void Clear ()","title":"function Clear"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-contains","text":"bool Contains ( T item )","title":"function Contains"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-copyto","text":"void CopyTo ( T [] array , int index )","title":"function CopyTo"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-remove","text":"inline bool Remove ( T item )","title":"function Remove"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-getenumerator","text":"IEnumerator < T > GetEnumerator ()","title":"function GetEnumerator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-exceptwith","text":"inline void ExceptWith ( IEnumerable < T > other )","title":"function ExceptWith"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-intersectwith","text":"inline void IntersectWith ( IEnumerable < T > other )","title":"function IntersectWith"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-ispropersubsetof","text":"bool IsProperSubsetOf ( IEnumerable < T > other )","title":"function IsProperSubsetOf"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-ispropersupersetof","text":"bool IsProperSupersetOf ( IEnumerable < T > other )","title":"function IsProperSupersetOf"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-issubsetof","text":"bool IsSubsetOf ( IEnumerable < T > other )","title":"function IsSubsetOf"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-issupersetof","text":"bool IsSupersetOf ( IEnumerable < T > other )","title":"function IsSupersetOf"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-overlaps","text":"bool Overlaps ( IEnumerable < T > other )","title":"function Overlaps"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-setequals","text":"bool SetEquals ( IEnumerable < T > other )","title":"function SetEquals"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-symmetricexceptwith","text":"inline void SymmetricExceptWith ( IEnumerable < T > other )","title":"function SymmetricExceptWith"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#function-unionwith","text":"inline void UnionWith ( IEnumerable < T > other )","title":"function UnionWith"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#property-isreadonly","text":"bool IsReadOnly ;","title":"property IsReadOnly"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#variable-count","text":"int Count => objects . Count ;","title":"variable Count"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#variable-isdirty","text":"bool IsDirty => changes . Count > 0 ;","title":"variable IsDirty"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSet/#variable-objects","text":"readonly ISet < T > objects ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable objects"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSortedSet/","text":"Mirror::SyncSortedSet More... Inherits from Mirror::SyncSet< T > , ISet< T >, SyncObject Public Functions Name SyncSortedSet () SyncSortedSet (IComparer< T > comparer) new SortedSet< T >.Enumerator GetEnumerator () Additional inherited members Public Events inherited from Mirror::SyncSet< T > Name SyncSetChanged Callback () Public Functions inherited from Mirror::SyncSet< T > Name delegate void SyncSetChanged (Operation op, T item) SyncSet (ISet< T > objects) void Reset () Resets the SyncObject so that it can be re-used void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync bool Add (T item) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) bool Remove (T item) void ExceptWith (IEnumerable< T > other) void IntersectWith (IEnumerable< T > other) bool IsProperSubsetOf (IEnumerable< T > other) bool IsProperSupersetOf (IEnumerable< T > other) bool IsSubsetOf (IEnumerable< T > other) bool IsSupersetOf (IEnumerable< T > other) bool Overlaps (IEnumerable< T > other) bool SetEquals (IEnumerable< T > other) void SymmetricExceptWith (IEnumerable< T > other) void UnionWith (IEnumerable< T > other) Public Properties inherited from Mirror::SyncSet< T > Name bool IsReadOnly Public Attributes inherited from Mirror::SyncSet< T > Name int Count bool IsDirty Protected Attributes inherited from Mirror::SyncSet< T > Name readonly ISet< T > objects Public Functions inherited from SyncObject Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties inherited from SyncObject Name bool IsDirty true if there are changes since the last flush Detailed Description template < T > class Mirror :: SyncSortedSet ; Public Functions Documentation function SyncSortedSet inline SyncSortedSet () function SyncSortedSet inline SyncSortedSet ( IComparer < T > comparer ) function GetEnumerator new SortedSet < T > . Enumerator GetEnumerator () Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncSortedSet"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSortedSet/#mirrorsyncsortedset","text":"More... Inherits from Mirror::SyncSet< T > , ISet< T >, SyncObject","title":"Mirror::SyncSortedSet"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSortedSet/#public-functions","text":"Name SyncSortedSet () SyncSortedSet (IComparer< T > comparer) new SortedSet< T >.Enumerator GetEnumerator ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSortedSet/#additional-inherited-members","text":"Public Events inherited from Mirror::SyncSet< T > Name SyncSetChanged Callback () Public Functions inherited from Mirror::SyncSet< T > Name delegate void SyncSetChanged (Operation op, T item) SyncSet (ISet< T > objects) void Reset () Resets the SyncObject so that it can be re-used void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync bool Add (T item) void Clear () bool Contains (T item) void CopyTo (T [] array, int index) bool Remove (T item) void ExceptWith (IEnumerable< T > other) void IntersectWith (IEnumerable< T > other) bool IsProperSubsetOf (IEnumerable< T > other) bool IsProperSupersetOf (IEnumerable< T > other) bool IsSubsetOf (IEnumerable< T > other) bool IsSupersetOf (IEnumerable< T > other) bool Overlaps (IEnumerable< T > other) bool SetEquals (IEnumerable< T > other) void SymmetricExceptWith (IEnumerable< T > other) void UnionWith (IEnumerable< T > other) Public Properties inherited from Mirror::SyncSet< T > Name bool IsReadOnly Public Attributes inherited from Mirror::SyncSet< T > Name int Count bool IsDirty Protected Attributes inherited from Mirror::SyncSet< T > Name readonly ISet< T > objects Public Functions inherited from SyncObject Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties inherited from SyncObject Name bool IsDirty true if there are changes since the last flush","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSortedSet/#detailed-description","text":"template < T > class Mirror :: SyncSortedSet ;","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSortedSet/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSortedSet/#function-syncsortedset","text":"inline SyncSortedSet ()","title":"function SyncSortedSet"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSortedSet/#function-syncsortedset_1","text":"inline SyncSortedSet ( IComparer < T > comparer )","title":"function SyncSortedSet"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncSortedSet/#function-getenumerator","text":"new SortedSet < T > . Enumerator GetEnumerator () Updated on 29 January 2021 at 18:34:48 UTC","title":"function GetEnumerator"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncVarAttribute/","text":"Mirror::SyncVarAttribute SyncVars are used to synchronize a variable from the server to all clients automatically. More... Inherits from PropertyAttribute Public Attributes Name string hook Detailed Description class Mirror :: SyncVarAttribute ; SyncVars are used to synchronize a variable from the server to all clients automatically. Value must be changed on server, not directly by clients. Hook parameter allows you to define a client-side method to be invoked when the client gets an update from the server. Public Attributes Documentation variable hook string hook ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncVarAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncVarAttribute/#mirrorsyncvarattribute","text":"SyncVars are used to synchronize a variable from the server to all clients automatically. More... Inherits from PropertyAttribute","title":"Mirror::SyncVarAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncVarAttribute/#public-attributes","text":"Name string hook","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncVarAttribute/#detailed-description","text":"class Mirror :: SyncVarAttribute ; SyncVars are used to synchronize a variable from the server to all clients automatically. Value must be changed on server, not directly by clients. Hook parameter allows you to define a client-side method to be invoked when the client gets an update from the server.","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncVarAttribute/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncVarAttribute/#variable-hook","text":"string hook ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable hook"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncVarAttributeDrawer/","text":"Mirror::SyncVarAttributeDrawer Inherits from PropertyDrawer Public Functions Name override void OnGUI (Rect position, SerializedProperty property, GUIContent label) override float GetPropertyHeight (SerializedProperty property, GUIContent label) Public Functions Documentation function OnGUI inline override void OnGUI ( Rect position , SerializedProperty property , GUIContent label ) function GetPropertyHeight inline override float GetPropertyHeight ( SerializedProperty property , GUIContent label ) Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncVarAttributeDrawer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncVarAttributeDrawer/#mirrorsyncvarattributedrawer","text":"Inherits from PropertyDrawer","title":"Mirror::SyncVarAttributeDrawer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncVarAttributeDrawer/#public-functions","text":"Name override void OnGUI (Rect position, SerializedProperty property, GUIContent label) override float GetPropertyHeight (SerializedProperty property, GUIContent label)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncVarAttributeDrawer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncVarAttributeDrawer/#function-ongui","text":"inline override void OnGUI ( Rect position , SerializedProperty property , GUIContent label )","title":"function OnGUI"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1SyncVarAttributeDrawer/#function-getpropertyheight","text":"inline override float GetPropertyHeight ( SerializedProperty property , GUIContent label ) Updated on 29 January 2021 at 18:34:48 UTC","title":"function GetPropertyHeight"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TargetRpcAttribute/","text":"Mirror::TargetRpcAttribute The server uses a Remote Procedure Call (RPC) to run this function on a specific client. Inherits from Attribute Public Attributes Name int channel Public Attributes Documentation variable channel int channel = Channels . DefaultReliable ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::TargetRpcAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TargetRpcAttribute/#mirrortargetrpcattribute","text":"The server uses a Remote Procedure Call (RPC) to run this function on a specific client. Inherits from Attribute","title":"Mirror::TargetRpcAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TargetRpcAttribute/#public-attributes","text":"Name int channel","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TargetRpcAttribute/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TargetRpcAttribute/#variable-channel","text":"int channel = Channels . DefaultReliable ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable channel"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/","text":"Mirror::TelepathyTransport Inherits from Transport , MonoBehaviour Public Functions Name virtual override bool Available () Is this transport available in the current platform? virtual override bool ClientConnected () Determines if we are currently connected to the server virtual override void ClientConnect (string address) Establish a connection to a server virtual override void ClientConnect (Uri uri) Establish a connection to a server virtual override void ClientSend (int channelId, ArraySegment< byte > segment) Send data to the server virtual override void ClientDisconnect () Disconnect this client from the server void LateUpdate () virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery virtual override bool ServerActive () Determines if the server is up and running virtual override void ServerStart () Start listening for clients virtual override void ServerSend (int connectionId, int channelId, ArraySegment< byte > segment) Send data to a client. bool ProcessServerMessage () virtual override bool ServerDisconnect (int connectionId) Disconnect a client from this server. Useful to kick people out. virtual override string ServerGetClientAddress (int connectionId) Get the client address virtual override void ServerStop () Stop listening for clients and disconnect all existing clients virtual override void Shutdown () Shut down the transport, both as client and server virtual override int GetMaxPacketSize (int channelId) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. override string ToString () Public Attributes Name const string Scheme ushort port bool NoDelay int serverMaxMessageSize int serverMaxReceivesPerTick int clientMaxMessageSize int clientMaxReceivesPerTick Protected Attributes Name Telepathy.Client client Telepathy.Server server Additional inherited members Public Functions inherited from Transport Name void Update () virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor Public Attributes inherited from Transport Name Transport activeTransport The current transport used by Mirror . Action OnClientConnected Notify subscribers when when this client establish a successful connection to the server Action< ArraySegment< byte >, int > OnClientDataReceived Notify subscribers when this client receive data from the server Action< Exception > OnClientError Notify subscribers when this client encounters an error communicating with the server Action OnClientDisconnected Notify subscribers when this client disconnects from the server Action< int > OnServerConnected Notify subscribers when a client connects to this server Action< int, ArraySegment< byte >, int > OnServerDataReceived Notify subscribers when this server receives data from the client Action< int, Exception > OnServerError Notify subscribers when this server has some problem communicating with the client Action< int > OnServerDisconnected Notify subscribers when a client disconnects from this server Public Functions Documentation function Available inline virtual override bool Available () Is this transport available in the current platform? Return : True if this transport works in the current platform Reimplements : Mirror::Transport::Available Some transports might only be available in mobile Many will not work in webgl Example usage: return Application.platform == RuntimePlatform.WebGLPlayer function ClientConnected virtual override bool ClientConnected () Determines if we are currently connected to the server Return : True if a connection has been established to the server Reimplements : Mirror::Transport::ClientConnected function ClientConnect virtual override void ClientConnect ( string address ) Establish a connection to a server Parameters : address The IP address or FQDN of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect function ClientConnect inline virtual override void ClientConnect ( Uri uri ) Establish a connection to a server Parameters : uri The address of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect function ClientSend inline virtual override void ClientSend ( int channelId , ArraySegment < byte > segment ) Send data to the server Parameters : channelId The channel to use. 0 is the default channel, but some transports might want to provide unreliable, encrypted, compressed, or any other feature as new channels segment The data to send to the server. Will be recycled after returning, so either use it directly or copy it internally. This allows for allocation-free sends! Reimplements : Mirror::Transport::ClientSend function ClientDisconnect virtual override void ClientDisconnect () Disconnect this client from the server Reimplements : Mirror::Transport::ClientDisconnect function LateUpdate inline void LateUpdate () function ServerUri inline virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery Return : the url at which this server can be reached Reimplements : Mirror::Transport::ServerUri function ServerActive virtual override bool ServerActive () Determines if the server is up and running Return : true if the transport is ready for connections from clients Reimplements : Mirror::Transport::ServerActive function ServerStart virtual override void ServerStart () Start listening for clients Reimplements : Mirror::Transport::ServerStart function ServerSend inline virtual override void ServerSend ( int connectionId , int channelId , ArraySegment < byte > segment ) Send data to a client. Parameters : connectionId The client connection id to send the data to channelId The channel to be used. Transports can use channels to implement other features such as unreliable, encryption, compression, etc... data Reimplements : Mirror::Transport::ServerSend function ProcessServerMessage inline bool ProcessServerMessage () function ServerDisconnect virtual override bool ServerDisconnect ( int connectionId ) Disconnect a client from this server. Useful to kick people out. Parameters : connectionId the id of the client to disconnect Return : true if the client was kicked Reimplements : Mirror::Transport::ServerDisconnect function ServerGetClientAddress inline virtual override string ServerGetClientAddress ( int connectionId ) Get the client address Parameters : connectionId id of the client Return : address of the client Reimplements : Mirror::Transport::ServerGetClientAddress function ServerStop virtual override void ServerStop () Stop listening for clients and disconnect all existing clients Reimplements : Mirror::Transport::ServerStop function Shutdown inline virtual override void Shutdown () Shut down the transport, both as client and server Reimplements : Mirror::Transport::Shutdown function GetMaxPacketSize inline virtual override int GetMaxPacketSize ( int channelId ) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. Parameters : channelId channel id Return : the size in bytes that can be sent via the provided channel Reimplements : Mirror::Transport::GetMaxPacketSize GetMaxPacketSize needs to return a value at all times. Even if the Transport isn't running, or isn't Available() . This is because Fallback and Multiplex transports need to find the smallest possible packet size at runtime. function ToString inline override string ToString () Public Attributes Documentation variable Scheme const string Scheme = \"tcp4\" ; variable port ushort port = 7777 ; variable NoDelay bool NoDelay = true ; variable serverMaxMessageSize int serverMaxMessageSize = 16 * 1024 ; variable serverMaxReceivesPerTick int serverMaxReceivesPerTick = 10000 ; variable clientMaxMessageSize int clientMaxMessageSize = 16 * 1024 ; variable clientMaxReceivesPerTick int clientMaxReceivesPerTick = 1000 ; Protected Attributes Documentation variable client Telepathy . Client client = new [ Telepathy . Client ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classTelepathy_1_1Client / )(); variable server Telepathy . Server server = new [ Telepathy . Server ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classTelepathy_1_1Server / )(); Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::TelepathyTransport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#mirrortelepathytransport","text":"Inherits from Transport , MonoBehaviour","title":"Mirror::TelepathyTransport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#public-functions","text":"Name virtual override bool Available () Is this transport available in the current platform? virtual override bool ClientConnected () Determines if we are currently connected to the server virtual override void ClientConnect (string address) Establish a connection to a server virtual override void ClientConnect (Uri uri) Establish a connection to a server virtual override void ClientSend (int channelId, ArraySegment< byte > segment) Send data to the server virtual override void ClientDisconnect () Disconnect this client from the server void LateUpdate () virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery virtual override bool ServerActive () Determines if the server is up and running virtual override void ServerStart () Start listening for clients virtual override void ServerSend (int connectionId, int channelId, ArraySegment< byte > segment) Send data to a client. bool ProcessServerMessage () virtual override bool ServerDisconnect (int connectionId) Disconnect a client from this server. Useful to kick people out. virtual override string ServerGetClientAddress (int connectionId) Get the client address virtual override void ServerStop () Stop listening for clients and disconnect all existing clients virtual override void Shutdown () Shut down the transport, both as client and server virtual override int GetMaxPacketSize (int channelId) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. override string ToString ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#public-attributes","text":"Name const string Scheme ushort port bool NoDelay int serverMaxMessageSize int serverMaxReceivesPerTick int clientMaxMessageSize int clientMaxReceivesPerTick","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#protected-attributes","text":"Name Telepathy.Client client Telepathy.Server server","title":"Protected Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#additional-inherited-members","text":"Public Functions inherited from Transport Name void Update () virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor Public Attributes inherited from Transport Name Transport activeTransport The current transport used by Mirror . Action OnClientConnected Notify subscribers when when this client establish a successful connection to the server Action< ArraySegment< byte >, int > OnClientDataReceived Notify subscribers when this client receive data from the server Action< Exception > OnClientError Notify subscribers when this client encounters an error communicating with the server Action OnClientDisconnected Notify subscribers when this client disconnects from the server Action< int > OnServerConnected Notify subscribers when a client connects to this server Action< int, ArraySegment< byte >, int > OnServerDataReceived Notify subscribers when this server receives data from the client Action< int, Exception > OnServerError Notify subscribers when this server has some problem communicating with the client Action< int > OnServerDisconnected Notify subscribers when a client disconnects from this server","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#function-available","text":"inline virtual override bool Available () Is this transport available in the current platform? Return : True if this transport works in the current platform Reimplements : Mirror::Transport::Available Some transports might only be available in mobile Many will not work in webgl Example usage: return Application.platform == RuntimePlatform.WebGLPlayer","title":"function Available"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#function-clientconnected","text":"virtual override bool ClientConnected () Determines if we are currently connected to the server Return : True if a connection has been established to the server Reimplements : Mirror::Transport::ClientConnected","title":"function ClientConnected"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#function-clientconnect","text":"virtual override void ClientConnect ( string address ) Establish a connection to a server Parameters : address The IP address or FQDN of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect","title":"function ClientConnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#function-clientconnect_1","text":"inline virtual override void ClientConnect ( Uri uri ) Establish a connection to a server Parameters : uri The address of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect","title":"function ClientConnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#function-clientsend","text":"inline virtual override void ClientSend ( int channelId , ArraySegment < byte > segment ) Send data to the server Parameters : channelId The channel to use. 0 is the default channel, but some transports might want to provide unreliable, encrypted, compressed, or any other feature as new channels segment The data to send to the server. Will be recycled after returning, so either use it directly or copy it internally. This allows for allocation-free sends! Reimplements : Mirror::Transport::ClientSend","title":"function ClientSend"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#function-clientdisconnect","text":"virtual override void ClientDisconnect () Disconnect this client from the server Reimplements : Mirror::Transport::ClientDisconnect","title":"function ClientDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#function-lateupdate","text":"inline void LateUpdate ()","title":"function LateUpdate"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#function-serveruri","text":"inline virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery Return : the url at which this server can be reached Reimplements : Mirror::Transport::ServerUri","title":"function ServerUri"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#function-serveractive","text":"virtual override bool ServerActive () Determines if the server is up and running Return : true if the transport is ready for connections from clients Reimplements : Mirror::Transport::ServerActive","title":"function ServerActive"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#function-serverstart","text":"virtual override void ServerStart () Start listening for clients Reimplements : Mirror::Transport::ServerStart","title":"function ServerStart"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#function-serversend","text":"inline virtual override void ServerSend ( int connectionId , int channelId , ArraySegment < byte > segment ) Send data to a client. Parameters : connectionId The client connection id to send the data to channelId The channel to be used. Transports can use channels to implement other features such as unreliable, encryption, compression, etc... data Reimplements : Mirror::Transport::ServerSend","title":"function ServerSend"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#function-processservermessage","text":"inline bool ProcessServerMessage ()","title":"function ProcessServerMessage"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#function-serverdisconnect","text":"virtual override bool ServerDisconnect ( int connectionId ) Disconnect a client from this server. Useful to kick people out. Parameters : connectionId the id of the client to disconnect Return : true if the client was kicked Reimplements : Mirror::Transport::ServerDisconnect","title":"function ServerDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#function-servergetclientaddress","text":"inline virtual override string ServerGetClientAddress ( int connectionId ) Get the client address Parameters : connectionId id of the client Return : address of the client Reimplements : Mirror::Transport::ServerGetClientAddress","title":"function ServerGetClientAddress"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#function-serverstop","text":"virtual override void ServerStop () Stop listening for clients and disconnect all existing clients Reimplements : Mirror::Transport::ServerStop","title":"function ServerStop"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#function-shutdown","text":"inline virtual override void Shutdown () Shut down the transport, both as client and server Reimplements : Mirror::Transport::Shutdown","title":"function Shutdown"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#function-getmaxpacketsize","text":"inline virtual override int GetMaxPacketSize ( int channelId ) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. Parameters : channelId channel id Return : the size in bytes that can be sent via the provided channel Reimplements : Mirror::Transport::GetMaxPacketSize GetMaxPacketSize needs to return a value at all times. Even if the Transport isn't running, or isn't Available() . This is because Fallback and Multiplex transports need to find the smallest possible packet size at runtime.","title":"function GetMaxPacketSize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#function-tostring","text":"inline override string ToString ()","title":"function ToString"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#variable-scheme","text":"const string Scheme = \"tcp4\" ;","title":"variable Scheme"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#variable-port","text":"ushort port = 7777 ;","title":"variable port"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#variable-nodelay","text":"bool NoDelay = true ;","title":"variable NoDelay"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#variable-servermaxmessagesize","text":"int serverMaxMessageSize = 16 * 1024 ;","title":"variable serverMaxMessageSize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#variable-servermaxreceivespertick","text":"int serverMaxReceivesPerTick = 10000 ;","title":"variable serverMaxReceivesPerTick"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#variable-clientmaxmessagesize","text":"int clientMaxMessageSize = 16 * 1024 ;","title":"variable clientMaxMessageSize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#variable-clientmaxreceivespertick","text":"int clientMaxReceivesPerTick = 1000 ;","title":"variable clientMaxReceivesPerTick"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#variable-client","text":"Telepathy . Client client = new [ Telepathy . Client ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classTelepathy_1_1Client / )();","title":"variable client"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1TelepathyTransport/#variable-server","text":"Telepathy . Server server = new [ Telepathy . Server ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classTelepathy_1_1Server / )(); Updated on 29 January 2021 at 18:34:48 UTC","title":"variable server"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/","text":"Mirror::Transport Abstract transport layer component More... Inherits from MonoBehaviour Inherited by KcpTransport , FallbackTransport , LLAPITransport , MiddlewareTransport , MultiplexTransport , SimpleWebTransport , TelepathyTransport Public Functions Name virtual abstract bool Available () =0 Is this transport available in the current platform? virtual abstract bool ClientConnected () =0 Determines if we are currently connected to the server virtual abstract void ClientConnect (string address) =0 Establish a connection to a server virtual void ClientConnect (Uri uri) Establish a connection to a server virtual abstract void ClientSend (int channelId, ArraySegment< byte > segment) =0 Send data to the server virtual abstract void ClientDisconnect () =0 Disconnect this client from the server virtual abstract Uri ServerUri () =0 Retrieves the address of this server. Useful for network discovery virtual abstract bool ServerActive () =0 Determines if the server is up and running virtual abstract void ServerStart () =0 Start listening for clients virtual abstract void ServerSend (int connectionId, int channelId, ArraySegment< byte > segment) =0 Send data to a client. virtual abstract bool ServerDisconnect (int connectionId) =0 Disconnect a client from this server. Useful to kick people out. virtual abstract string ServerGetClientAddress (int connectionId) =0 Get the client address virtual abstract void ServerStop () =0 Stop listening for clients and disconnect all existing clients virtual abstract int GetMaxPacketSize (int channelId =Channels.DefaultReliable) =0 The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. virtual abstract void Shutdown () =0 Shut down the transport, both as client and server void Update () virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor Public Attributes Name Transport activeTransport The current transport used by Mirror . Action OnClientConnected Notify subscribers when when this client establish a successful connection to the server Action< ArraySegment< byte >, int > OnClientDataReceived Notify subscribers when this client receive data from the server Action< Exception > OnClientError Notify subscribers when this client encounters an error communicating with the server Action OnClientDisconnected Notify subscribers when this client disconnects from the server Action< int > OnServerConnected Notify subscribers when a client connects to this server Action< int, ArraySegment< byte >, int > OnServerDataReceived Notify subscribers when this server receives data from the client Action< int, Exception > OnServerError Notify subscribers when this server has some problem communicating with the client Action< int > OnServerDisconnected Notify subscribers when a client disconnects from this server Detailed Description class Mirror :: Transport ; Abstract transport layer component Transport Rules All transports should follow these rules so that they work correctly with mirror When Monobehaviour is disabled the Transport should not invoke callbacks Callbacks should be invoked on main thread. It is best to do this from LateUpdate Callbacks can be invoked after ServerStop or ClientDisconnect as been called ServerStop or ClientDisconnect can be called by mirror multiple times Available should check the platform and 32 vs 64 bit if the transport only works on some of them GetMaxPacketSize should return size even if transport is not running Default channel should be reliable Channels.DefaultReliable Public Functions Documentation function Available virtual abstract bool Available () = 0 Is this transport available in the current platform? Return : True if this transport works in the current platform Reimplemented by : Mirror::MiddlewareTransport::Available , Mirror::MultiplexTransport::Available , Mirror::FallbackTransport::Available , Mirror::TelepathyTransport::Available , kcp2k::KcpTransport::Available , Mirror::SimpleWeb::SimpleWebTransport::Available , Mirror::LLAPITransport::Available Some transports might only be available in mobile Many will not work in webgl Example usage: return Application.platform == RuntimePlatform.WebGLPlayer function ClientConnected virtual abstract bool ClientConnected () = 0 Determines if we are currently connected to the server Return : True if a connection has been established to the server Reimplemented by : Mirror::MiddlewareTransport::ClientConnected , Mirror::TelepathyTransport::ClientConnected , Mirror::FallbackTransport::ClientConnected , kcp2k::KcpTransport::ClientConnected , Mirror::MultiplexTransport::ClientConnected , Mirror::LLAPITransport::ClientConnected , Mirror::SimpleWeb::SimpleWebTransport::ClientConnected function ClientConnect virtual abstract void ClientConnect ( string address ) = 0 Establish a connection to a server Parameters : address The IP address or FQDN of the server we are trying to connect to Reimplemented by : Mirror::MiddlewareTransport::ClientConnect , Mirror::MultiplexTransport::ClientConnect , Mirror::FallbackTransport::ClientConnect , Mirror::TelepathyTransport::ClientConnect , kcp2k::KcpTransport::ClientConnect , Mirror::LLAPITransport::ClientConnect , Mirror::SimpleWeb::SimpleWebTransport::ClientConnect function ClientConnect inline virtual void ClientConnect ( Uri uri ) Establish a connection to a server Parameters : uri The address of the server we are trying to connect to Reimplemented by : Mirror::FallbackTransport::ClientConnect , Mirror::TelepathyTransport::ClientConnect , Mirror::MultiplexTransport::ClientConnect , Mirror::LLAPITransport::ClientConnect function ClientSend virtual abstract void ClientSend ( int channelId , ArraySegment < byte > segment ) = 0 Send data to the server Parameters : channelId The channel to use. 0 is the default channel, but some transports might want to provide unreliable, encrypted, compressed, or any other feature as new channels segment The data to send to the server. Will be recycled after returning, so either use it directly or copy it internally. This allows for allocation-free sends! Reimplemented by : Mirror::MiddlewareTransport::ClientSend , Mirror::TelepathyTransport::ClientSend , kcp2k::KcpTransport::ClientSend , Mirror::FallbackTransport::ClientSend , Mirror::MultiplexTransport::ClientSend , Mirror::LLAPITransport::ClientSend , Mirror::SimpleWeb::SimpleWebTransport::ClientSend function ClientDisconnect virtual abstract void ClientDisconnect () = 0 Disconnect this client from the server Reimplemented by : Mirror::MiddlewareTransport::ClientDisconnect , Mirror::FallbackTransport::ClientDisconnect , Mirror::MultiplexTransport::ClientDisconnect , kcp2k::KcpTransport::ClientDisconnect , Mirror::TelepathyTransport::ClientDisconnect , Mirror::SimpleWeb::SimpleWebTransport::ClientDisconnect , Mirror::LLAPITransport::ClientDisconnect function ServerUri virtual abstract Uri ServerUri () = 0 Retrieves the address of this server. Useful for network discovery Return : the url at which this server can be reached Reimplemented by : Mirror::MiddlewareTransport::ServerUri , Mirror::FallbackTransport::ServerUri , kcp2k::KcpTransport::ServerUri , Mirror::TelepathyTransport::ServerUri , Mirror::MultiplexTransport::ServerUri , Mirror::LLAPITransport::ServerUri , Mirror::SimpleWeb::SimpleWebTransport::ServerUri function ServerActive virtual abstract bool ServerActive () = 0 Determines if the server is up and running Return : true if the transport is ready for connections from clients Reimplemented by : Mirror::MiddlewareTransport::ServerActive , Mirror::FallbackTransport::ServerActive , kcp2k::KcpTransport::ServerActive , Mirror::TelepathyTransport::ServerActive , Mirror::MultiplexTransport::ServerActive , Mirror::SimpleWeb::SimpleWebTransport::ServerActive , Mirror::LLAPITransport::ServerActive function ServerStart virtual abstract void ServerStart () = 0 Start listening for clients Reimplemented by : Mirror::MiddlewareTransport::ServerStart , Mirror::FallbackTransport::ServerStart , kcp2k::KcpTransport::ServerStart , Mirror::TelepathyTransport::ServerStart , Mirror::SimpleWeb::SimpleWebTransport::ServerStart , Mirror::MultiplexTransport::ServerStart , Mirror::LLAPITransport::ServerStart function ServerSend virtual abstract void ServerSend ( int connectionId , int channelId , ArraySegment < byte > segment ) = 0 Send data to a client. Parameters : connectionId The client connection id to send the data to channelId The channel to be used. Transports can use channels to implement other features such as unreliable, encryption, compression, etc... data Reimplemented by : Mirror::MiddlewareTransport::ServerSend , Mirror::FallbackTransport::ServerSend , kcp2k::KcpTransport::ServerSend , Mirror::TelepathyTransport::ServerSend , Mirror::MultiplexTransport::ServerSend , Mirror::LLAPITransport::ServerSend , Mirror::SimpleWeb::SimpleWebTransport::ServerSend function ServerDisconnect virtual abstract bool ServerDisconnect ( int connectionId ) = 0 Disconnect a client from this server. Useful to kick people out. Parameters : connectionId the id of the client to disconnect Return : true if the client was kicked Reimplemented by : Mirror::MiddlewareTransport::ServerDisconnect , Mirror::FallbackTransport::ServerDisconnect , kcp2k::KcpTransport::ServerDisconnect , Mirror::MultiplexTransport::ServerDisconnect , Mirror::TelepathyTransport::ServerDisconnect , Mirror::SimpleWeb::SimpleWebTransport::ServerDisconnect , Mirror::LLAPITransport::ServerDisconnect function ServerGetClientAddress virtual abstract string ServerGetClientAddress ( int connectionId ) = 0 Get the client address Parameters : connectionId id of the client Return : address of the client Reimplemented by : Mirror::MiddlewareTransport::ServerGetClientAddress , Mirror::FallbackTransport::ServerGetClientAddress , kcp2k::KcpTransport::ServerGetClientAddress , Mirror::MultiplexTransport::ServerGetClientAddress , Mirror::TelepathyTransport::ServerGetClientAddress , Mirror::SimpleWeb::SimpleWebTransport::ServerGetClientAddress , Mirror::LLAPITransport::ServerGetClientAddress function ServerStop virtual abstract void ServerStop () = 0 Stop listening for clients and disconnect all existing clients Reimplemented by : Mirror::MiddlewareTransport::ServerStop , Mirror::FallbackTransport::ServerStop , kcp2k::KcpTransport::ServerStop , Mirror::TelepathyTransport::ServerStop , Mirror::MultiplexTransport::ServerStop , Mirror::SimpleWeb::SimpleWebTransport::ServerStop , Mirror::LLAPITransport::ServerStop function GetMaxPacketSize virtual abstract int GetMaxPacketSize ( int channelId = Channels . DefaultReliable ) = 0 The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. Parameters : channelId channel id Return : the size in bytes that can be sent via the provided channel Reimplemented by : Mirror::MiddlewareTransport::GetMaxPacketSize , Mirror::SimpleWeb::SimpleWebTransport::GetMaxPacketSize , Mirror::FallbackTransport::GetMaxPacketSize , kcp2k::KcpTransport::GetMaxPacketSize , Mirror::MultiplexTransport::GetMaxPacketSize , Mirror::TelepathyTransport::GetMaxPacketSize , Mirror::LLAPITransport::GetMaxPacketSize GetMaxPacketSize needs to return a value at all times. Even if the Transport isn't running, or isn't Available() . This is because Fallback and Multiplex transports need to find the smallest possible packet size at runtime. function Shutdown virtual abstract void Shutdown () = 0 Shut down the transport, both as client and server Reimplemented by : Mirror::MiddlewareTransport::Shutdown , Mirror::SimpleWeb::SimpleWebTransport::Shutdown , Mirror::FallbackTransport::Shutdown , kcp2k::KcpTransport::Shutdown , Mirror::TelepathyTransport::Shutdown , Mirror::MultiplexTransport::Shutdown , Mirror::LLAPITransport::Shutdown function Update inline void Update () function OnApplicationQuit inline virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor virtual so that inheriting classes' OnApplicationQuit() can call base.OnApplicationQuit() too Public Attributes Documentation variable activeTransport static Transport activeTransport ; The current transport used by Mirror . variable OnClientConnected Action OnClientConnected = () => Debug . LogWarning ( \"OnClientConnected called with no handler\" ); Notify subscribers when when this client establish a successful connection to the server callback() variable OnClientDataReceived Action < ArraySegment < byte > , int > OnClientDataReceived = ( data , channel ) => Debug . LogWarning ( \"OnClientDataReceived called with no handler\" ); Notify subscribers when this client receive data from the server callback(ArraySegment data, int channel) variable OnClientError Action < Exception > OnClientError = ( error ) => Debug . LogWarning ( \"OnClientError called with no handler\" ); Notify subscribers when this client encounters an error communicating with the server callback(Exception e) variable OnClientDisconnected Action OnClientDisconnected = () => Debug . LogWarning ( \"OnClientDisconnected called with no handler\" ); Notify subscribers when this client disconnects from the server callback() variable OnServerConnected Action < int > OnServerConnected = ( connId ) => Debug . LogWarning ( \"OnServerConnected called with no handler\" ); Notify subscribers when a client connects to this server callback(int connId) variable OnServerDataReceived Action < int , ArraySegment < byte > , int > OnServerDataReceived = ( connId , data , channel ) => Debug . LogWarning ( \"OnServerDataReceived called with no handler\" ); Notify subscribers when this server receives data from the client callback(int connId, ArraySegment data, int channel) variable OnServerError Action < int , Exception > OnServerError = ( connId , error ) => Debug . LogWarning ( \"OnServerError called with no handler\" ); Notify subscribers when this server has some problem communicating with the client callback(int connId, Exception e) variable OnServerDisconnected Action < int > OnServerDisconnected = ( connId ) => Debug . LogWarning ( \"OnServerDisconnected called with no handler\" ); Notify subscribers when a client disconnects from this server callback(int connId) Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Transport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#mirrortransport","text":"Abstract transport layer component More... Inherits from MonoBehaviour Inherited by KcpTransport , FallbackTransport , LLAPITransport , MiddlewareTransport , MultiplexTransport , SimpleWebTransport , TelepathyTransport","title":"Mirror::Transport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#public-functions","text":"Name virtual abstract bool Available () =0 Is this transport available in the current platform? virtual abstract bool ClientConnected () =0 Determines if we are currently connected to the server virtual abstract void ClientConnect (string address) =0 Establish a connection to a server virtual void ClientConnect (Uri uri) Establish a connection to a server virtual abstract void ClientSend (int channelId, ArraySegment< byte > segment) =0 Send data to the server virtual abstract void ClientDisconnect () =0 Disconnect this client from the server virtual abstract Uri ServerUri () =0 Retrieves the address of this server. Useful for network discovery virtual abstract bool ServerActive () =0 Determines if the server is up and running virtual abstract void ServerStart () =0 Start listening for clients virtual abstract void ServerSend (int connectionId, int channelId, ArraySegment< byte > segment) =0 Send data to a client. virtual abstract bool ServerDisconnect (int connectionId) =0 Disconnect a client from this server. Useful to kick people out. virtual abstract string ServerGetClientAddress (int connectionId) =0 Get the client address virtual abstract void ServerStop () =0 Stop listening for clients and disconnect all existing clients virtual abstract int GetMaxPacketSize (int channelId =Channels.DefaultReliable) =0 The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. virtual abstract void Shutdown () =0 Shut down the transport, both as client and server void Update () virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#public-attributes","text":"Name Transport activeTransport The current transport used by Mirror . Action OnClientConnected Notify subscribers when when this client establish a successful connection to the server Action< ArraySegment< byte >, int > OnClientDataReceived Notify subscribers when this client receive data from the server Action< Exception > OnClientError Notify subscribers when this client encounters an error communicating with the server Action OnClientDisconnected Notify subscribers when this client disconnects from the server Action< int > OnServerConnected Notify subscribers when a client connects to this server Action< int, ArraySegment< byte >, int > OnServerDataReceived Notify subscribers when this server receives data from the client Action< int, Exception > OnServerError Notify subscribers when this server has some problem communicating with the client Action< int > OnServerDisconnected Notify subscribers when a client disconnects from this server","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#detailed-description","text":"class Mirror :: Transport ; Abstract transport layer component","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#transport-rules","text":"All transports should follow these rules so that they work correctly with mirror When Monobehaviour is disabled the Transport should not invoke callbacks Callbacks should be invoked on main thread. It is best to do this from LateUpdate Callbacks can be invoked after ServerStop or ClientDisconnect as been called ServerStop or ClientDisconnect can be called by mirror multiple times Available should check the platform and 32 vs 64 bit if the transport only works on some of them GetMaxPacketSize should return size even if transport is not running Default channel should be reliable Channels.DefaultReliable","title":"Transport Rules"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#function-available","text":"virtual abstract bool Available () = 0 Is this transport available in the current platform? Return : True if this transport works in the current platform Reimplemented by : Mirror::MiddlewareTransport::Available , Mirror::MultiplexTransport::Available , Mirror::FallbackTransport::Available , Mirror::TelepathyTransport::Available , kcp2k::KcpTransport::Available , Mirror::SimpleWeb::SimpleWebTransport::Available , Mirror::LLAPITransport::Available Some transports might only be available in mobile Many will not work in webgl Example usage: return Application.platform == RuntimePlatform.WebGLPlayer","title":"function Available"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#function-clientconnected","text":"virtual abstract bool ClientConnected () = 0 Determines if we are currently connected to the server Return : True if a connection has been established to the server Reimplemented by : Mirror::MiddlewareTransport::ClientConnected , Mirror::TelepathyTransport::ClientConnected , Mirror::FallbackTransport::ClientConnected , kcp2k::KcpTransport::ClientConnected , Mirror::MultiplexTransport::ClientConnected , Mirror::LLAPITransport::ClientConnected , Mirror::SimpleWeb::SimpleWebTransport::ClientConnected","title":"function ClientConnected"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#function-clientconnect","text":"virtual abstract void ClientConnect ( string address ) = 0 Establish a connection to a server Parameters : address The IP address or FQDN of the server we are trying to connect to Reimplemented by : Mirror::MiddlewareTransport::ClientConnect , Mirror::MultiplexTransport::ClientConnect , Mirror::FallbackTransport::ClientConnect , Mirror::TelepathyTransport::ClientConnect , kcp2k::KcpTransport::ClientConnect , Mirror::LLAPITransport::ClientConnect , Mirror::SimpleWeb::SimpleWebTransport::ClientConnect","title":"function ClientConnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#function-clientconnect_1","text":"inline virtual void ClientConnect ( Uri uri ) Establish a connection to a server Parameters : uri The address of the server we are trying to connect to Reimplemented by : Mirror::FallbackTransport::ClientConnect , Mirror::TelepathyTransport::ClientConnect , Mirror::MultiplexTransport::ClientConnect , Mirror::LLAPITransport::ClientConnect","title":"function ClientConnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#function-clientsend","text":"virtual abstract void ClientSend ( int channelId , ArraySegment < byte > segment ) = 0 Send data to the server Parameters : channelId The channel to use. 0 is the default channel, but some transports might want to provide unreliable, encrypted, compressed, or any other feature as new channels segment The data to send to the server. Will be recycled after returning, so either use it directly or copy it internally. This allows for allocation-free sends! Reimplemented by : Mirror::MiddlewareTransport::ClientSend , Mirror::TelepathyTransport::ClientSend , kcp2k::KcpTransport::ClientSend , Mirror::FallbackTransport::ClientSend , Mirror::MultiplexTransport::ClientSend , Mirror::LLAPITransport::ClientSend , Mirror::SimpleWeb::SimpleWebTransport::ClientSend","title":"function ClientSend"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#function-clientdisconnect","text":"virtual abstract void ClientDisconnect () = 0 Disconnect this client from the server Reimplemented by : Mirror::MiddlewareTransport::ClientDisconnect , Mirror::FallbackTransport::ClientDisconnect , Mirror::MultiplexTransport::ClientDisconnect , kcp2k::KcpTransport::ClientDisconnect , Mirror::TelepathyTransport::ClientDisconnect , Mirror::SimpleWeb::SimpleWebTransport::ClientDisconnect , Mirror::LLAPITransport::ClientDisconnect","title":"function ClientDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#function-serveruri","text":"virtual abstract Uri ServerUri () = 0 Retrieves the address of this server. Useful for network discovery Return : the url at which this server can be reached Reimplemented by : Mirror::MiddlewareTransport::ServerUri , Mirror::FallbackTransport::ServerUri , kcp2k::KcpTransport::ServerUri , Mirror::TelepathyTransport::ServerUri , Mirror::MultiplexTransport::ServerUri , Mirror::LLAPITransport::ServerUri , Mirror::SimpleWeb::SimpleWebTransport::ServerUri","title":"function ServerUri"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#function-serveractive","text":"virtual abstract bool ServerActive () = 0 Determines if the server is up and running Return : true if the transport is ready for connections from clients Reimplemented by : Mirror::MiddlewareTransport::ServerActive , Mirror::FallbackTransport::ServerActive , kcp2k::KcpTransport::ServerActive , Mirror::TelepathyTransport::ServerActive , Mirror::MultiplexTransport::ServerActive , Mirror::SimpleWeb::SimpleWebTransport::ServerActive , Mirror::LLAPITransport::ServerActive","title":"function ServerActive"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#function-serverstart","text":"virtual abstract void ServerStart () = 0 Start listening for clients Reimplemented by : Mirror::MiddlewareTransport::ServerStart , Mirror::FallbackTransport::ServerStart , kcp2k::KcpTransport::ServerStart , Mirror::TelepathyTransport::ServerStart , Mirror::SimpleWeb::SimpleWebTransport::ServerStart , Mirror::MultiplexTransport::ServerStart , Mirror::LLAPITransport::ServerStart","title":"function ServerStart"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#function-serversend","text":"virtual abstract void ServerSend ( int connectionId , int channelId , ArraySegment < byte > segment ) = 0 Send data to a client. Parameters : connectionId The client connection id to send the data to channelId The channel to be used. Transports can use channels to implement other features such as unreliable, encryption, compression, etc... data Reimplemented by : Mirror::MiddlewareTransport::ServerSend , Mirror::FallbackTransport::ServerSend , kcp2k::KcpTransport::ServerSend , Mirror::TelepathyTransport::ServerSend , Mirror::MultiplexTransport::ServerSend , Mirror::LLAPITransport::ServerSend , Mirror::SimpleWeb::SimpleWebTransport::ServerSend","title":"function ServerSend"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#function-serverdisconnect","text":"virtual abstract bool ServerDisconnect ( int connectionId ) = 0 Disconnect a client from this server. Useful to kick people out. Parameters : connectionId the id of the client to disconnect Return : true if the client was kicked Reimplemented by : Mirror::MiddlewareTransport::ServerDisconnect , Mirror::FallbackTransport::ServerDisconnect , kcp2k::KcpTransport::ServerDisconnect , Mirror::MultiplexTransport::ServerDisconnect , Mirror::TelepathyTransport::ServerDisconnect , Mirror::SimpleWeb::SimpleWebTransport::ServerDisconnect , Mirror::LLAPITransport::ServerDisconnect","title":"function ServerDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#function-servergetclientaddress","text":"virtual abstract string ServerGetClientAddress ( int connectionId ) = 0 Get the client address Parameters : connectionId id of the client Return : address of the client Reimplemented by : Mirror::MiddlewareTransport::ServerGetClientAddress , Mirror::FallbackTransport::ServerGetClientAddress , kcp2k::KcpTransport::ServerGetClientAddress , Mirror::MultiplexTransport::ServerGetClientAddress , Mirror::TelepathyTransport::ServerGetClientAddress , Mirror::SimpleWeb::SimpleWebTransport::ServerGetClientAddress , Mirror::LLAPITransport::ServerGetClientAddress","title":"function ServerGetClientAddress"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#function-serverstop","text":"virtual abstract void ServerStop () = 0 Stop listening for clients and disconnect all existing clients Reimplemented by : Mirror::MiddlewareTransport::ServerStop , Mirror::FallbackTransport::ServerStop , kcp2k::KcpTransport::ServerStop , Mirror::TelepathyTransport::ServerStop , Mirror::MultiplexTransport::ServerStop , Mirror::SimpleWeb::SimpleWebTransport::ServerStop , Mirror::LLAPITransport::ServerStop","title":"function ServerStop"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#function-getmaxpacketsize","text":"virtual abstract int GetMaxPacketSize ( int channelId = Channels . DefaultReliable ) = 0 The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. Parameters : channelId channel id Return : the size in bytes that can be sent via the provided channel Reimplemented by : Mirror::MiddlewareTransport::GetMaxPacketSize , Mirror::SimpleWeb::SimpleWebTransport::GetMaxPacketSize , Mirror::FallbackTransport::GetMaxPacketSize , kcp2k::KcpTransport::GetMaxPacketSize , Mirror::MultiplexTransport::GetMaxPacketSize , Mirror::TelepathyTransport::GetMaxPacketSize , Mirror::LLAPITransport::GetMaxPacketSize GetMaxPacketSize needs to return a value at all times. Even if the Transport isn't running, or isn't Available() . This is because Fallback and Multiplex transports need to find the smallest possible packet size at runtime.","title":"function GetMaxPacketSize"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#function-shutdown","text":"virtual abstract void Shutdown () = 0 Shut down the transport, both as client and server Reimplemented by : Mirror::MiddlewareTransport::Shutdown , Mirror::SimpleWeb::SimpleWebTransport::Shutdown , Mirror::FallbackTransport::Shutdown , kcp2k::KcpTransport::Shutdown , Mirror::TelepathyTransport::Shutdown , Mirror::MultiplexTransport::Shutdown , Mirror::LLAPITransport::Shutdown","title":"function Shutdown"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#function-update","text":"inline void Update ()","title":"function Update"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#function-onapplicationquit","text":"inline virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor virtual so that inheriting classes' OnApplicationQuit() can call base.OnApplicationQuit() too","title":"function OnApplicationQuit"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#variable-activetransport","text":"static Transport activeTransport ; The current transport used by Mirror .","title":"variable activeTransport"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#variable-onclientconnected","text":"Action OnClientConnected = () => Debug . LogWarning ( \"OnClientConnected called with no handler\" ); Notify subscribers when when this client establish a successful connection to the server callback()","title":"variable OnClientConnected"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#variable-onclientdatareceived","text":"Action < ArraySegment < byte > , int > OnClientDataReceived = ( data , channel ) => Debug . LogWarning ( \"OnClientDataReceived called with no handler\" ); Notify subscribers when this client receive data from the server callback(ArraySegment data, int channel)","title":"variable OnClientDataReceived"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#variable-onclienterror","text":"Action < Exception > OnClientError = ( error ) => Debug . LogWarning ( \"OnClientError called with no handler\" ); Notify subscribers when this client encounters an error communicating with the server callback(Exception e)","title":"variable OnClientError"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#variable-onclientdisconnected","text":"Action OnClientDisconnected = () => Debug . LogWarning ( \"OnClientDisconnected called with no handler\" ); Notify subscribers when this client disconnects from the server callback()","title":"variable OnClientDisconnected"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#variable-onserverconnected","text":"Action < int > OnServerConnected = ( connId ) => Debug . LogWarning ( \"OnServerConnected called with no handler\" ); Notify subscribers when a client connects to this server callback(int connId)","title":"variable OnServerConnected"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#variable-onserverdatareceived","text":"Action < int , ArraySegment < byte > , int > OnServerDataReceived = ( connId , data , channel ) => Debug . LogWarning ( \"OnServerDataReceived called with no handler\" ); Notify subscribers when this server receives data from the client callback(int connId, ArraySegment data, int channel)","title":"variable OnServerDataReceived"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#variable-onservererror","text":"Action < int , Exception > OnServerError = ( connId , error ) => Debug . LogWarning ( \"OnServerError called with no handler\" ); Notify subscribers when this server has some problem communicating with the client callback(int connId, Exception e)","title":"variable OnServerError"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Transport/#variable-onserverdisconnected","text":"Action < int > OnServerDisconnected = ( connId ) => Debug . LogWarning ( \"OnServerDisconnected called with no handler\" ); Notify subscribers when a client disconnects from this server callback(int connId) Updated on 29 January 2021 at 18:34:48 UTC","title":"variable OnServerDisconnected"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ULocalConnectionToClient/","text":"Mirror::ULocalConnectionToClient Inherits from NetworkConnectionToClient , NetworkConnection Public Functions Name ULocalConnectionToClient () virtual override void Disconnect () Disconnects this connection. Public Attributes Name override string address Additional inherited members Public Functions inherited from NetworkConnectionToClient Name NetworkConnectionToClient (int networkConnectionId) Public Functions inherited from NetworkConnection Name void Send< T > (T msg, int channelId =Channels.DefaultReliable) This sends a network message with a message ID on the connection. This message is sent on channel zero, which by default is the reliable channel. override string ToString () bool InvokeHandler< T > (T msg, int channelId) This function invokes the registered handler function for a message. Public Properties inherited from NetworkConnection Name NetworkIdentity identity The NetworkIdentity for this connection. Public Attributes inherited from NetworkConnection Name const int LocalConnectionId readonly int connectionId Unique identifier for this connection that is assigned by the transport layer. bool isAuthenticated Flag that indicates the client has been authenticated. object authenticationData General purpose object to hold authentication data, character selection, tokens, etc. associated with the connection for reference after Authentication completes. bool isReady Flag that tells if the connection has been marked as \"ready\" by a client calling ClientScene.Ready(). float lastMessageTime The last time that a message was received on this connection. readonly HashSet< NetworkIdentity > clientOwnedObjects A list of the NetworkIdentity objects owned by this connection. This list is read-only. Public Functions Documentation function ULocalConnectionToClient inline ULocalConnectionToClient () function Disconnect inline virtual override void Disconnect () Disconnects this connection. Reimplements : Mirror::NetworkConnection::Disconnect Public Attributes Documentation variable address override string address => \"localhost\" ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::ULocalConnectionToClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ULocalConnectionToClient/#mirrorulocalconnectiontoclient","text":"Inherits from NetworkConnectionToClient , NetworkConnection","title":"Mirror::ULocalConnectionToClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ULocalConnectionToClient/#public-functions","text":"Name ULocalConnectionToClient () virtual override void Disconnect () Disconnects this connection.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ULocalConnectionToClient/#public-attributes","text":"Name override string address","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ULocalConnectionToClient/#additional-inherited-members","text":"Public Functions inherited from NetworkConnectionToClient Name NetworkConnectionToClient (int networkConnectionId) Public Functions inherited from NetworkConnection Name void Send< T > (T msg, int channelId =Channels.DefaultReliable) This sends a network message with a message ID on the connection. This message is sent on channel zero, which by default is the reliable channel. override string ToString () bool InvokeHandler< T > (T msg, int channelId) This function invokes the registered handler function for a message. Public Properties inherited from NetworkConnection Name NetworkIdentity identity The NetworkIdentity for this connection. Public Attributes inherited from NetworkConnection Name const int LocalConnectionId readonly int connectionId Unique identifier for this connection that is assigned by the transport layer. bool isAuthenticated Flag that indicates the client has been authenticated. object authenticationData General purpose object to hold authentication data, character selection, tokens, etc. associated with the connection for reference after Authentication completes. bool isReady Flag that tells if the connection has been marked as \"ready\" by a client calling ClientScene.Ready(). float lastMessageTime The last time that a message was received on this connection. readonly HashSet< NetworkIdentity > clientOwnedObjects A list of the NetworkIdentity objects owned by this connection. This list is read-only.","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ULocalConnectionToClient/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ULocalConnectionToClient/#function-ulocalconnectiontoclient","text":"inline ULocalConnectionToClient ()","title":"function ULocalConnectionToClient"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ULocalConnectionToClient/#function-disconnect","text":"inline virtual override void Disconnect () Disconnects this connection. Reimplements : Mirror::NetworkConnection::Disconnect","title":"function Disconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ULocalConnectionToClient/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ULocalConnectionToClient/#variable-address","text":"override string address => \"localhost\" ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable address"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ULocalConnectionToServer/","text":"Mirror::ULocalConnectionToServer Inherits from NetworkConnectionToServer , NetworkConnection Public Functions Name override void Disconnect () Disconnects this connection. Public Attributes Name override string address Additional inherited members Public Functions inherited from NetworkConnection Name void Send< T > (T msg, int channelId =Channels.DefaultReliable) This sends a network message with a message ID on the connection. This message is sent on channel zero, which by default is the reliable channel. override string ToString () bool InvokeHandler< T > (T msg, int channelId) This function invokes the registered handler function for a message. Public Properties inherited from NetworkConnection Name NetworkIdentity identity The NetworkIdentity for this connection. Public Attributes inherited from NetworkConnection Name const int LocalConnectionId readonly int connectionId Unique identifier for this connection that is assigned by the transport layer. bool isAuthenticated Flag that indicates the client has been authenticated. object authenticationData General purpose object to hold authentication data, character selection, tokens, etc. associated with the connection for reference after Authentication completes. bool isReady Flag that tells if the connection has been marked as \"ready\" by a client calling ClientScene.Ready(). float lastMessageTime The last time that a message was received on this connection. readonly HashSet< NetworkIdentity > clientOwnedObjects A list of the NetworkIdentity objects owned by this connection. This list is read-only. Public Functions Documentation function Disconnect inline override void Disconnect () Disconnects this connection. Public Attributes Documentation variable address override string address => \"localhost\" ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::ULocalConnectionToServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ULocalConnectionToServer/#mirrorulocalconnectiontoserver","text":"Inherits from NetworkConnectionToServer , NetworkConnection","title":"Mirror::ULocalConnectionToServer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ULocalConnectionToServer/#public-functions","text":"Name override void Disconnect () Disconnects this connection.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ULocalConnectionToServer/#public-attributes","text":"Name override string address","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ULocalConnectionToServer/#additional-inherited-members","text":"Public Functions inherited from NetworkConnection Name void Send< T > (T msg, int channelId =Channels.DefaultReliable) This sends a network message with a message ID on the connection. This message is sent on channel zero, which by default is the reliable channel. override string ToString () bool InvokeHandler< T > (T msg, int channelId) This function invokes the registered handler function for a message. Public Properties inherited from NetworkConnection Name NetworkIdentity identity The NetworkIdentity for this connection. Public Attributes inherited from NetworkConnection Name const int LocalConnectionId readonly int connectionId Unique identifier for this connection that is assigned by the transport layer. bool isAuthenticated Flag that indicates the client has been authenticated. object authenticationData General purpose object to hold authentication data, character selection, tokens, etc. associated with the connection for reference after Authentication completes. bool isReady Flag that tells if the connection has been marked as \"ready\" by a client calling ClientScene.Ready(). float lastMessageTime The last time that a message was received on this connection. readonly HashSet< NetworkIdentity > clientOwnedObjects A list of the NetworkIdentity objects owned by this connection. This list is read-only.","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ULocalConnectionToServer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ULocalConnectionToServer/#function-disconnect","text":"inline override void Disconnect () Disconnects this connection.","title":"function Disconnect"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ULocalConnectionToServer/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1ULocalConnectionToServer/#variable-address","text":"override string address => \"localhost\" ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable address"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1UnityEventNetworkConnection/","text":"Mirror::UnityEventNetworkConnection Unity Event for the NetworkConnection Inherits from UnityEvent< NetworkConnection > Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::UnityEventNetworkConnection"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1UnityEventNetworkConnection/#mirrorunityeventnetworkconnection","text":"Unity Event for the NetworkConnection Inherits from UnityEvent< NetworkConnection > Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::UnityEventNetworkConnection"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CommandProcessor/","text":"Mirror::Weaver::CommandProcessor Processes [Command] methods in NetworkBehaviour Public Functions Name MethodDefinition ProcessCommandCall (TypeDefinition td, MethodDefinition md, CustomAttribute commandAttr) MethodDefinition ProcessCommandInvoke (TypeDefinition td, MethodDefinition method, MethodDefinition cmdCallFunc) Public Functions Documentation function ProcessCommandCall static inline MethodDefinition ProcessCommandCall ( TypeDefinition td , MethodDefinition md , CustomAttribute commandAttr ) function ProcessCommandInvoke static inline MethodDefinition ProcessCommandInvoke ( TypeDefinition td , MethodDefinition method , MethodDefinition cmdCallFunc ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::CommandProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CommandProcessor/#mirrorweavercommandprocessor","text":"Processes [Command] methods in NetworkBehaviour","title":"Mirror::Weaver::CommandProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CommandProcessor/#public-functions","text":"Name MethodDefinition ProcessCommandCall (TypeDefinition td, MethodDefinition md, CustomAttribute commandAttr) MethodDefinition ProcessCommandInvoke (TypeDefinition td, MethodDefinition method, MethodDefinition cmdCallFunc)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CommandProcessor/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CommandProcessor/#function-processcommandcall","text":"static inline MethodDefinition ProcessCommandCall ( TypeDefinition td , MethodDefinition md , CustomAttribute commandAttr )","title":"function ProcessCommandCall"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CommandProcessor/#function-processcommandinvoke","text":"static inline MethodDefinition ProcessCommandInvoke ( TypeDefinition td , MethodDefinition method , MethodDefinition cmdCallFunc ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function ProcessCommandInvoke"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CompilationFinishedHook/","text":"Mirror::Weaver::CompilationFinishedHook Public Functions Name void OnInitializeOnLoad () void WeaveExistingAssemblies () Public Properties Name bool WeaverEnabled Public Attributes Name Action< string > OnWeaverMessage Action< string > OnWeaverWarning Action< string > OnWeaverError bool UnityLogEnabled Public Functions Documentation function OnInitializeOnLoad static inline void OnInitializeOnLoad () function WeaveExistingAssemblies static inline void WeaveExistingAssemblies () Public Property Documentation property WeaverEnabled static bool WeaverEnabled ; Public Attributes Documentation variable OnWeaverMessage static Action < string > OnWeaverMessage ; variable OnWeaverWarning static Action < string > OnWeaverWarning ; variable OnWeaverError static Action < string > OnWeaverError ; variable UnityLogEnabled static bool UnityLogEnabled = true ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::CompilationFinishedHook"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CompilationFinishedHook/#mirrorweavercompilationfinishedhook","text":"","title":"Mirror::Weaver::CompilationFinishedHook"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CompilationFinishedHook/#public-functions","text":"Name void OnInitializeOnLoad () void WeaveExistingAssemblies ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CompilationFinishedHook/#public-properties","text":"Name bool WeaverEnabled","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CompilationFinishedHook/#public-attributes","text":"Name Action< string > OnWeaverMessage Action< string > OnWeaverWarning Action< string > OnWeaverError bool UnityLogEnabled","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CompilationFinishedHook/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CompilationFinishedHook/#function-oninitializeonload","text":"static inline void OnInitializeOnLoad ()","title":"function OnInitializeOnLoad"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CompilationFinishedHook/#function-weaveexistingassemblies","text":"static inline void WeaveExistingAssemblies ()","title":"function WeaveExistingAssemblies"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CompilationFinishedHook/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CompilationFinishedHook/#property-weaverenabled","text":"static bool WeaverEnabled ;","title":"property WeaverEnabled"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CompilationFinishedHook/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CompilationFinishedHook/#variable-onweavermessage","text":"static Action < string > OnWeaverMessage ;","title":"variable OnWeaverMessage"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CompilationFinishedHook/#variable-onweaverwarning","text":"static Action < string > OnWeaverWarning ;","title":"variable OnWeaverWarning"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CompilationFinishedHook/#variable-onweavererror","text":"static Action < string > OnWeaverError ;","title":"variable OnWeaverError"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1CompilationFinishedHook/#variable-unitylogenabled","text":"static bool UnityLogEnabled = true ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable UnityLogEnabled"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/","text":"Mirror::Weaver::Extensions Public Functions Name bool Is (this TypeReference td, Type t) bool Is< T > (this TypeReference td) bool IsDerivedFrom< T > (this TypeReference tr) bool IsDerivedFrom (this TypeReference tr, Type baseClass) TypeReference GetEnumUnderlyingType (this TypeDefinition td) bool ImplementsInterface< TInterface > (this TypeDefinition td) bool IsMultidimensionalArray (this TypeReference tr) bool IsNetworkIdentityField (this TypeReference tr) Does type use netId as backing field bool CanBeResolved (this TypeReference parent) MethodReference MakeGeneric (this MethodReference generic, TypeReference variableReference) Makes T => Variable and imports function MethodReference MakeHostInstanceGeneric (this MethodReference self, GenericInstanceType instanceType) Given a method of a generic class such as ArraySegment T.get_Count, and a generic instance such as ArraySegment int Creates a reference to the specialized method ArraySegment int .get_Count FieldReference SpecializeField (this FieldReference self, GenericInstanceType instanceType) Given a field of a generic class such as Writer .write, and a generic instance such as ArraySegment int Creates a reference to the specialized method ArraySegment int`.get_Count CustomAttribute GetCustomAttribute< TAttribute > (this ICustomAttributeProvider method) bool HasCustomAttribute< TAttribute > (this ICustomAttributeProvider attributeProvider) T GetField< T > (this CustomAttribute ca, string field, T defaultValue) MethodDefinition GetMethod (this TypeDefinition td, string methodName) List< MethodDefinition > GetMethods (this TypeDefinition td, string methodName) MethodDefinition GetMethodInBaseType (this TypeDefinition td, string methodName) IEnumerable< FieldDefinition > FindAllPublicFields (this TypeReference variable) Finds public fields in type and base type IEnumerable< FieldDefinition > FindAllPublicFields (this TypeDefinition typeDefinition) Finds public fields in type and base type Public Functions Documentation function Is static inline bool Is ( this TypeReference td , Type t ) function Is< T > static bool Is < T > ( this TypeReference td ) function IsDerivedFrom< T > static bool IsDerivedFrom < T > ( this TypeReference tr ) function IsDerivedFrom static inline bool IsDerivedFrom ( this TypeReference tr , Type baseClass ) function GetEnumUnderlyingType static inline TypeReference GetEnumUnderlyingType ( this TypeDefinition td ) function ImplementsInterface< TInterface > static inline bool ImplementsInterface < TInterface > ( this TypeDefinition td ) function IsMultidimensionalArray static inline bool IsMultidimensionalArray ( this TypeReference tr ) function IsNetworkIdentityField static inline bool IsNetworkIdentityField ( this TypeReference tr ) Does type use netId as backing field function CanBeResolved static inline bool CanBeResolved ( this TypeReference parent ) function MakeGeneric static inline MethodReference MakeGeneric ( this MethodReference generic , TypeReference variableReference ) Makes T => Variable and imports function Parameters : generic variableReference Return : function MakeHostInstanceGeneric static inline MethodReference MakeHostInstanceGeneric ( this MethodReference self , GenericInstanceType instanceType ) Given a method of a generic class such as ArraySegment T.get_Count, and a generic instance such as ArraySegment int Creates a reference to the specialized method ArraySegment int .get_Count Parameters : self instanceType Return : Note that calling ArraySegment`T.get_Count directly gives an invalid IL error function SpecializeField static inline FieldReference SpecializeField ( this FieldReference self , GenericInstanceType instanceType ) Given a field of a generic class such as Writer .write, and a generic instance such as ArraySegment int Creates a reference to the specialized method ArraySegment int`.get_Count Parameters : self instanceType Generic Instance eg Writer Return : Note that calling ArraySegment`T.get_Count directly gives an invalid IL error function GetCustomAttribute< TAttribute > static inline CustomAttribute GetCustomAttribute < TAttribute > ( this ICustomAttributeProvider method ) function HasCustomAttribute< TAttribute > static inline bool HasCustomAttribute < TAttribute > ( this ICustomAttributeProvider attributeProvider ) function GetField< T > static inline T GetField < T > ( this CustomAttribute ca , string field , T defaultValue ) function GetMethod static inline MethodDefinition GetMethod ( this TypeDefinition td , string methodName ) function GetMethods static inline List < MethodDefinition > GetMethods ( this TypeDefinition td , string methodName ) function GetMethodInBaseType static inline MethodDefinition GetMethodInBaseType ( this TypeDefinition td , string methodName ) function FindAllPublicFields static inline IEnumerable < FieldDefinition > FindAllPublicFields ( this TypeReference variable ) Finds public fields in type and base type Parameters : variable Return : function FindAllPublicFields static inline IEnumerable < FieldDefinition > FindAllPublicFields ( this TypeDefinition typeDefinition ) Finds public fields in type and base type Parameters : variable Return : Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::Extensions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#mirrorweaverextensions","text":"","title":"Mirror::Weaver::Extensions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#public-functions","text":"Name bool Is (this TypeReference td, Type t) bool Is< T > (this TypeReference td) bool IsDerivedFrom< T > (this TypeReference tr) bool IsDerivedFrom (this TypeReference tr, Type baseClass) TypeReference GetEnumUnderlyingType (this TypeDefinition td) bool ImplementsInterface< TInterface > (this TypeDefinition td) bool IsMultidimensionalArray (this TypeReference tr) bool IsNetworkIdentityField (this TypeReference tr) Does type use netId as backing field bool CanBeResolved (this TypeReference parent) MethodReference MakeGeneric (this MethodReference generic, TypeReference variableReference) Makes T => Variable and imports function MethodReference MakeHostInstanceGeneric (this MethodReference self, GenericInstanceType instanceType) Given a method of a generic class such as ArraySegment T.get_Count, and a generic instance such as ArraySegment int Creates a reference to the specialized method ArraySegment int .get_Count FieldReference SpecializeField (this FieldReference self, GenericInstanceType instanceType) Given a field of a generic class such as Writer .write, and a generic instance such as ArraySegment int Creates a reference to the specialized method ArraySegment int`.get_Count CustomAttribute GetCustomAttribute< TAttribute > (this ICustomAttributeProvider method) bool HasCustomAttribute< TAttribute > (this ICustomAttributeProvider attributeProvider) T GetField< T > (this CustomAttribute ca, string field, T defaultValue) MethodDefinition GetMethod (this TypeDefinition td, string methodName) List< MethodDefinition > GetMethods (this TypeDefinition td, string methodName) MethodDefinition GetMethodInBaseType (this TypeDefinition td, string methodName) IEnumerable< FieldDefinition > FindAllPublicFields (this TypeReference variable) Finds public fields in type and base type IEnumerable< FieldDefinition > FindAllPublicFields (this TypeDefinition typeDefinition) Finds public fields in type and base type","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#function-is","text":"static inline bool Is ( this TypeReference td , Type t )","title":"function Is"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#function-is-t","text":"static bool Is < T > ( this TypeReference td )","title":"function Is&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#function-isderivedfrom-t","text":"static bool IsDerivedFrom < T > ( this TypeReference tr )","title":"function IsDerivedFrom&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#function-isderivedfrom","text":"static inline bool IsDerivedFrom ( this TypeReference tr , Type baseClass )","title":"function IsDerivedFrom"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#function-getenumunderlyingtype","text":"static inline TypeReference GetEnumUnderlyingType ( this TypeDefinition td )","title":"function GetEnumUnderlyingType"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#function-implementsinterface-tinterface","text":"static inline bool ImplementsInterface < TInterface > ( this TypeDefinition td )","title":"function ImplementsInterface&lt; TInterface &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#function-ismultidimensionalarray","text":"static inline bool IsMultidimensionalArray ( this TypeReference tr )","title":"function IsMultidimensionalArray"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#function-isnetworkidentityfield","text":"static inline bool IsNetworkIdentityField ( this TypeReference tr ) Does type use netId as backing field","title":"function IsNetworkIdentityField"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#function-canberesolved","text":"static inline bool CanBeResolved ( this TypeReference parent )","title":"function CanBeResolved"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#function-makegeneric","text":"static inline MethodReference MakeGeneric ( this MethodReference generic , TypeReference variableReference ) Makes T => Variable and imports function Parameters : generic variableReference Return :","title":"function MakeGeneric"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#function-makehostinstancegeneric","text":"static inline MethodReference MakeHostInstanceGeneric ( this MethodReference self , GenericInstanceType instanceType ) Given a method of a generic class such as ArraySegment T.get_Count, and a generic instance such as ArraySegment int Creates a reference to the specialized method ArraySegment int .get_Count Parameters : self instanceType Return : Note that calling ArraySegment`T.get_Count directly gives an invalid IL error","title":"function MakeHostInstanceGeneric"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#function-specializefield","text":"static inline FieldReference SpecializeField ( this FieldReference self , GenericInstanceType instanceType ) Given a field of a generic class such as Writer .write, and a generic instance such as ArraySegment int Creates a reference to the specialized method ArraySegment int`.get_Count Parameters : self instanceType Generic Instance eg Writer Return : Note that calling ArraySegment`T.get_Count directly gives an invalid IL error","title":"function SpecializeField"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#function-getcustomattribute-tattribute","text":"static inline CustomAttribute GetCustomAttribute < TAttribute > ( this ICustomAttributeProvider method )","title":"function GetCustomAttribute&lt; TAttribute &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#function-hascustomattribute-tattribute","text":"static inline bool HasCustomAttribute < TAttribute > ( this ICustomAttributeProvider attributeProvider )","title":"function HasCustomAttribute&lt; TAttribute &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#function-getfield-t","text":"static inline T GetField < T > ( this CustomAttribute ca , string field , T defaultValue )","title":"function GetField&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#function-getmethod","text":"static inline MethodDefinition GetMethod ( this TypeDefinition td , string methodName )","title":"function GetMethod"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#function-getmethods","text":"static inline List < MethodDefinition > GetMethods ( this TypeDefinition td , string methodName )","title":"function GetMethods"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#function-getmethodinbasetype","text":"static inline MethodDefinition GetMethodInBaseType ( this TypeDefinition td , string methodName )","title":"function GetMethodInBaseType"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#function-findallpublicfields","text":"static inline IEnumerable < FieldDefinition > FindAllPublicFields ( this TypeReference variable ) Finds public fields in type and base type Parameters : variable Return :","title":"function FindAllPublicFields"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Extensions/#function-findallpublicfields_1","text":"static inline IEnumerable < FieldDefinition > FindAllPublicFields ( this TypeDefinition typeDefinition ) Finds public fields in type and base type Parameters : variable Return : Updated on 29 January 2021 at 18:34:49 UTC","title":"function FindAllPublicFields"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1GenerateWriterException/","text":"Mirror::Weaver::GenerateWriterException Inherits from WeaverException , Exception Public Functions Name GenerateWriterException (string message, MemberReference member) Protected Functions Name GenerateWriterException (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext) Additional inherited members Protected Functions inherited from WeaverException Name WeaverException (string message, MemberReference member) WeaverException (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext) Public Properties inherited from WeaverException Name MemberReference MemberReference Public Functions Documentation function GenerateWriterException inline GenerateWriterException ( string message , MemberReference member ) Protected Functions Documentation function GenerateWriterException inline GenerateWriterException ( System . Runtime . Serialization . SerializationInfo serializationInfo , System . Runtime . Serialization . StreamingContext streamingContext ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::GenerateWriterException"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1GenerateWriterException/#mirrorweavergeneratewriterexception","text":"Inherits from WeaverException , Exception","title":"Mirror::Weaver::GenerateWriterException"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1GenerateWriterException/#public-functions","text":"Name GenerateWriterException (string message, MemberReference member)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1GenerateWriterException/#protected-functions","text":"Name GenerateWriterException (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)","title":"Protected Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1GenerateWriterException/#additional-inherited-members","text":"Protected Functions inherited from WeaverException Name WeaverException (string message, MemberReference member) WeaverException (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext) Public Properties inherited from WeaverException Name MemberReference MemberReference","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1GenerateWriterException/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1GenerateWriterException/#function-generatewriterexception","text":"inline GenerateWriterException ( string message , MemberReference member )","title":"function GenerateWriterException"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1GenerateWriterException/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1GenerateWriterException/#function-generatewriterexception_1","text":"inline GenerateWriterException ( System . Runtime . Serialization . SerializationInfo serializationInfo , System . Runtime . Serialization . StreamingContext streamingContext ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function GenerateWriterException"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Helpers/","text":"Mirror::Weaver::Helpers Public Functions Name string DestinationFileFor (string outputDir, string assemblyPath) Public Functions Documentation function DestinationFileFor static inline string DestinationFileFor ( string outputDir , string assemblyPath ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::Helpers"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Helpers/#mirrorweaverhelpers","text":"","title":"Mirror::Weaver::Helpers"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Helpers/#public-functions","text":"Name string DestinationFileFor (string outputDir, string assemblyPath)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Helpers/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Helpers/#function-destinationfilefor","text":"static inline string DestinationFileFor ( string outputDir , string assemblyPath ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function DestinationFileFor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Log/","text":"Mirror::Weaver::Log Public Functions Name void Warning (string msg) void Error (string msg) Public Attributes Name Action< string > WarningMethod Action< string > ErrorMethod Public Functions Documentation function Warning static inline void Warning ( string msg ) function Error static inline void Error ( string msg ) Public Attributes Documentation variable WarningMethod static Action < string > WarningMethod ; variable ErrorMethod static Action < string > ErrorMethod ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::Log"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Log/#mirrorweaverlog","text":"","title":"Mirror::Weaver::Log"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Log/#public-functions","text":"Name void Warning (string msg) void Error (string msg)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Log/#public-attributes","text":"Name Action< string > WarningMethod Action< string > ErrorMethod","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Log/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Log/#function-warning","text":"static inline void Warning ( string msg )","title":"function Warning"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Log/#function-error","text":"static inline void Error ( string msg )","title":"function Error"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Log/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Log/#variable-warningmethod","text":"static Action < string > WarningMethod ;","title":"variable WarningMethod"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Log/#variable-errormethod","text":"static Action < string > ErrorMethod ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable ErrorMethod"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1MethodProcessor/","text":"Mirror::Weaver::MethodProcessor Public Functions Name MethodDefinition SubstituteMethod (TypeDefinition td, MethodDefinition md) void FixRemoteCallToBaseMethod (TypeDefinition type, MethodDefinition method) Finds and fixes call to base methods within remote calls Public Functions Documentation function SubstituteMethod static inline MethodDefinition SubstituteMethod ( TypeDefinition td , MethodDefinition md ) function FixRemoteCallToBaseMethod static inline void FixRemoteCallToBaseMethod ( TypeDefinition type , MethodDefinition method ) Finds and fixes call to base methods within remote calls Parameters : type method For example, changes base.CmdDoSomething to base.CallCmdDoSomething within this.CallCmdDoSomething Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::MethodProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1MethodProcessor/#mirrorweavermethodprocessor","text":"","title":"Mirror::Weaver::MethodProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1MethodProcessor/#public-functions","text":"Name MethodDefinition SubstituteMethod (TypeDefinition td, MethodDefinition md) void FixRemoteCallToBaseMethod (TypeDefinition type, MethodDefinition method) Finds and fixes call to base methods within remote calls","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1MethodProcessor/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1MethodProcessor/#function-substitutemethod","text":"static inline MethodDefinition SubstituteMethod ( TypeDefinition td , MethodDefinition md )","title":"function SubstituteMethod"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1MethodProcessor/#function-fixremotecalltobasemethod","text":"static inline void FixRemoteCallToBaseMethod ( TypeDefinition type , MethodDefinition method ) Finds and fixes call to base methods within remote calls Parameters : type method For example, changes base.CmdDoSomething to base.CallCmdDoSomething within this.CallCmdDoSomething Updated on 29 January 2021 at 18:34:49 UTC","title":"function FixRemoteCallToBaseMethod"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1MonoBehaviourProcessor/","text":"Mirror::Weaver::MonoBehaviourProcessor only shows warnings in case we use SyncVars etc. for MonoBehaviour. Public Functions Name void Process (TypeDefinition td) Public Functions Documentation function Process static inline void Process ( TypeDefinition td ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::MonoBehaviourProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1MonoBehaviourProcessor/#mirrorweavermonobehaviourprocessor","text":"only shows warnings in case we use SyncVars etc. for MonoBehaviour.","title":"Mirror::Weaver::MonoBehaviourProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1MonoBehaviourProcessor/#public-functions","text":"Name void Process (TypeDefinition td)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1MonoBehaviourProcessor/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1MonoBehaviourProcessor/#function-process","text":"static inline void Process ( TypeDefinition td ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function Process"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/","text":"Mirror::Weaver::NetworkBehaviourProcessor processes SyncVars, Cmds, Rpcs, etc. of NetworkBehaviours Public Classes Name struct ClientRpcResult struct CmdResult Public Functions Name NetworkBehaviourProcessor (TypeDefinition td) bool Process () void WriteClientActiveCheck (ILProcessor worker, string mdName, Instruction label, string errString) void WriteServerActiveCheck (ILProcessor worker, string mdName, Instruction label, string errString) void WriteSetupLocals (ILProcessor worker) void WriteCreateWriter (ILProcessor worker) void WriteRecycleWriter (ILProcessor worker) bool WriteArguments (ILProcessor worker, MethodDefinition method, RemoteCallType callType) bool WasProcessed (TypeDefinition td) void MarkAsProcessed (TypeDefinition td) bool ReadArguments (MethodDefinition method, ILProcessor worker, RemoteCallType callType) void AddInvokeParameters (ICollection< ParameterDefinition > collection) bool ValidateRemoteCallAndParameters (MethodDefinition method, RemoteCallType callType) bool IsSenderConnection (ParameterDefinition param, RemoteCallType callType) Public Attributes Name const string ProcessedFunctionName Public Functions Documentation function NetworkBehaviourProcessor inline NetworkBehaviourProcessor ( TypeDefinition td ) function Process inline bool Process () function WriteClientActiveCheck static inline void WriteClientActiveCheck ( ILProcessor worker , string mdName , Instruction label , string errString ) function WriteServerActiveCheck static inline void WriteServerActiveCheck ( ILProcessor worker , string mdName , Instruction label , string errString ) function WriteSetupLocals static inline void WriteSetupLocals ( ILProcessor worker ) function WriteCreateWriter static inline void WriteCreateWriter ( ILProcessor worker ) function WriteRecycleWriter static inline void WriteRecycleWriter ( ILProcessor worker ) function WriteArguments static inline bool WriteArguments ( ILProcessor worker , MethodDefinition method , RemoteCallType callType ) function WasProcessed static inline bool WasProcessed ( TypeDefinition td ) function MarkAsProcessed static inline void MarkAsProcessed ( TypeDefinition td ) function ReadArguments static inline bool ReadArguments ( MethodDefinition method , ILProcessor worker , RemoteCallType callType ) function AddInvokeParameters static inline void AddInvokeParameters ( ICollection < ParameterDefinition > collection ) function ValidateRemoteCallAndParameters static inline bool ValidateRemoteCallAndParameters ( MethodDefinition method , RemoteCallType callType ) function IsSenderConnection static inline bool IsSenderConnection ( ParameterDefinition param , RemoteCallType callType ) Public Attributes Documentation variable ProcessedFunctionName const string ProcessedFunctionName = \"MirrorProcessed\" ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::NetworkBehaviourProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#mirrorweavernetworkbehaviourprocessor","text":"processes SyncVars, Cmds, Rpcs, etc. of NetworkBehaviours","title":"Mirror::Weaver::NetworkBehaviourProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#public-classes","text":"Name struct ClientRpcResult struct CmdResult","title":"Public Classes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#public-functions","text":"Name NetworkBehaviourProcessor (TypeDefinition td) bool Process () void WriteClientActiveCheck (ILProcessor worker, string mdName, Instruction label, string errString) void WriteServerActiveCheck (ILProcessor worker, string mdName, Instruction label, string errString) void WriteSetupLocals (ILProcessor worker) void WriteCreateWriter (ILProcessor worker) void WriteRecycleWriter (ILProcessor worker) bool WriteArguments (ILProcessor worker, MethodDefinition method, RemoteCallType callType) bool WasProcessed (TypeDefinition td) void MarkAsProcessed (TypeDefinition td) bool ReadArguments (MethodDefinition method, ILProcessor worker, RemoteCallType callType) void AddInvokeParameters (ICollection< ParameterDefinition > collection) bool ValidateRemoteCallAndParameters (MethodDefinition method, RemoteCallType callType) bool IsSenderConnection (ParameterDefinition param, RemoteCallType callType)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#public-attributes","text":"Name const string ProcessedFunctionName","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#function-networkbehaviourprocessor","text":"inline NetworkBehaviourProcessor ( TypeDefinition td )","title":"function NetworkBehaviourProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#function-process","text":"inline bool Process ()","title":"function Process"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#function-writeclientactivecheck","text":"static inline void WriteClientActiveCheck ( ILProcessor worker , string mdName , Instruction label , string errString )","title":"function WriteClientActiveCheck"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#function-writeserveractivecheck","text":"static inline void WriteServerActiveCheck ( ILProcessor worker , string mdName , Instruction label , string errString )","title":"function WriteServerActiveCheck"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#function-writesetuplocals","text":"static inline void WriteSetupLocals ( ILProcessor worker )","title":"function WriteSetupLocals"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#function-writecreatewriter","text":"static inline void WriteCreateWriter ( ILProcessor worker )","title":"function WriteCreateWriter"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#function-writerecyclewriter","text":"static inline void WriteRecycleWriter ( ILProcessor worker )","title":"function WriteRecycleWriter"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#function-writearguments","text":"static inline bool WriteArguments ( ILProcessor worker , MethodDefinition method , RemoteCallType callType )","title":"function WriteArguments"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#function-wasprocessed","text":"static inline bool WasProcessed ( TypeDefinition td )","title":"function WasProcessed"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#function-markasprocessed","text":"static inline void MarkAsProcessed ( TypeDefinition td )","title":"function MarkAsProcessed"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#function-readarguments","text":"static inline bool ReadArguments ( MethodDefinition method , ILProcessor worker , RemoteCallType callType )","title":"function ReadArguments"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#function-addinvokeparameters","text":"static inline void AddInvokeParameters ( ICollection < ParameterDefinition > collection )","title":"function AddInvokeParameters"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#function-validateremotecallandparameters","text":"static inline bool ValidateRemoteCallAndParameters ( MethodDefinition method , RemoteCallType callType )","title":"function ValidateRemoteCallAndParameters"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#function-issenderconnection","text":"static inline bool IsSenderConnection ( ParameterDefinition param , RemoteCallType callType )","title":"function IsSenderConnection"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1NetworkBehaviourProcessor/#variable-processedfunctionname","text":"const string ProcessedFunctionName = \"MirrorProcessed\" ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable ProcessedFunctionName"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1PropertySiteProcessor/","text":"Mirror::Weaver::PropertySiteProcessor Public Functions Name void Process (ModuleDefinition moduleDef) Public Functions Documentation function Process static inline void Process ( ModuleDefinition moduleDef ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::PropertySiteProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1PropertySiteProcessor/#mirrorweaverpropertysiteprocessor","text":"","title":"Mirror::Weaver::PropertySiteProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1PropertySiteProcessor/#public-functions","text":"Name void Process (ModuleDefinition moduleDef)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1PropertySiteProcessor/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1PropertySiteProcessor/#function-process","text":"static inline void Process ( ModuleDefinition moduleDef ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function Process"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1ReaderWriterProcessor/","text":"Mirror::Weaver::ReaderWriterProcessor Public Functions Name bool Process (AssemblyDefinition CurrentAssembly) void InitializeReaderAndWriters (AssemblyDefinition currentAssembly) Creates a method that will store all the readers and writers into Writer .write and Reader .read Public Functions Documentation function Process static inline bool Process ( AssemblyDefinition CurrentAssembly ) function InitializeReaderAndWriters static inline void InitializeReaderAndWriters ( AssemblyDefinition currentAssembly ) Creates a method that will store all the readers and writers into Writer .write and Reader .read Parameters : currentAssembly The method will be marked InitializeOnLoadMethodAttribute so it gets executed before mirror runtime code Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::ReaderWriterProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1ReaderWriterProcessor/#mirrorweaverreaderwriterprocessor","text":"","title":"Mirror::Weaver::ReaderWriterProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1ReaderWriterProcessor/#public-functions","text":"Name bool Process (AssemblyDefinition CurrentAssembly) void InitializeReaderAndWriters (AssemblyDefinition currentAssembly) Creates a method that will store all the readers and writers into Writer .write and Reader .read","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1ReaderWriterProcessor/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1ReaderWriterProcessor/#function-process","text":"static inline bool Process ( AssemblyDefinition CurrentAssembly )","title":"function Process"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1ReaderWriterProcessor/#function-initializereaderandwriters","text":"static inline void InitializeReaderAndWriters ( AssemblyDefinition currentAssembly ) Creates a method that will store all the readers and writers into Writer .write and Reader .read Parameters : currentAssembly The method will be marked InitializeOnLoadMethodAttribute so it gets executed before mirror runtime code Updated on 29 January 2021 at 18:34:49 UTC","title":"function InitializeReaderAndWriters"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Readers/","text":"Mirror::Weaver::Readers Public Functions Name void Init () MethodReference GetReadFunc (TypeReference variable) Finds existing reader for type, if non exists trys to create one Public Functions Documentation function Init static inline void Init () function GetReadFunc static inline MethodReference GetReadFunc ( TypeReference variable ) Finds existing reader for type, if non exists trys to create one Parameters : variable Return : Returns MethodReference or null This method is recursive Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::Readers"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Readers/#mirrorweaverreaders","text":"","title":"Mirror::Weaver::Readers"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Readers/#public-functions","text":"Name void Init () MethodReference GetReadFunc (TypeReference variable) Finds existing reader for type, if non exists trys to create one","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Readers/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Readers/#function-init","text":"static inline void Init ()","title":"function Init"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Readers/#function-getreadfunc","text":"static inline MethodReference GetReadFunc ( TypeReference variable ) Finds existing reader for type, if non exists trys to create one Parameters : variable Return : Returns MethodReference or null This method is recursive Updated on 29 January 2021 at 18:34:49 UTC","title":"function GetReadFunc"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Resolvers/","text":"Mirror::Weaver::Resolvers Public Functions Name MethodReference ResolveMethod (TypeReference tr, AssemblyDefinition scriptDef, string name) MethodReference ResolveMethod (TypeReference t, AssemblyDefinition scriptDef, System.Func< MethodDefinition, bool > predicate) MethodReference TryResolveMethodInParents (TypeReference tr, AssemblyDefinition scriptDef, string name) MethodDefinition ResolveDefaultPublicCtor (TypeReference variable) MethodReference ResolveProperty (TypeReference tr, AssemblyDefinition scriptDef, string name) Public Functions Documentation function ResolveMethod static inline MethodReference ResolveMethod ( TypeReference tr , AssemblyDefinition scriptDef , string name ) function ResolveMethod static inline MethodReference ResolveMethod ( TypeReference t , AssemblyDefinition scriptDef , System . Func < MethodDefinition , bool > predicate ) function TryResolveMethodInParents static inline MethodReference TryResolveMethodInParents ( TypeReference tr , AssemblyDefinition scriptDef , string name ) function ResolveDefaultPublicCtor static inline MethodDefinition ResolveDefaultPublicCtor ( TypeReference variable ) function ResolveProperty static inline MethodReference ResolveProperty ( TypeReference tr , AssemblyDefinition scriptDef , string name ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::Resolvers"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Resolvers/#mirrorweaverresolvers","text":"","title":"Mirror::Weaver::Resolvers"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Resolvers/#public-functions","text":"Name MethodReference ResolveMethod (TypeReference tr, AssemblyDefinition scriptDef, string name) MethodReference ResolveMethod (TypeReference t, AssemblyDefinition scriptDef, System.Func< MethodDefinition, bool > predicate) MethodReference TryResolveMethodInParents (TypeReference tr, AssemblyDefinition scriptDef, string name) MethodDefinition ResolveDefaultPublicCtor (TypeReference variable) MethodReference ResolveProperty (TypeReference tr, AssemblyDefinition scriptDef, string name)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Resolvers/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Resolvers/#function-resolvemethod","text":"static inline MethodReference ResolveMethod ( TypeReference tr , AssemblyDefinition scriptDef , string name )","title":"function ResolveMethod"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Resolvers/#function-resolvemethod_1","text":"static inline MethodReference ResolveMethod ( TypeReference t , AssemblyDefinition scriptDef , System . Func < MethodDefinition , bool > predicate )","title":"function ResolveMethod"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Resolvers/#function-tryresolvemethodinparents","text":"static inline MethodReference TryResolveMethodInParents ( TypeReference tr , AssemblyDefinition scriptDef , string name )","title":"function TryResolveMethodInParents"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Resolvers/#function-resolvedefaultpublicctor","text":"static inline MethodDefinition ResolveDefaultPublicCtor ( TypeReference variable )","title":"function ResolveDefaultPublicCtor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Resolvers/#function-resolveproperty","text":"static inline MethodReference ResolveProperty ( TypeReference tr , AssemblyDefinition scriptDef , string name ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function ResolveProperty"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1RpcProcessor/","text":"Mirror::Weaver::RpcProcessor Processes [Rpc] methods in NetworkBehaviour Public Functions Name MethodDefinition ProcessRpcInvoke (TypeDefinition td, MethodDefinition md, MethodDefinition rpcCallFunc) MethodDefinition ProcessRpcCall (TypeDefinition td, MethodDefinition md, CustomAttribute clientRpcAttr) Public Functions Documentation function ProcessRpcInvoke static inline MethodDefinition ProcessRpcInvoke ( TypeDefinition td , MethodDefinition md , MethodDefinition rpcCallFunc ) function ProcessRpcCall static inline MethodDefinition ProcessRpcCall ( TypeDefinition td , MethodDefinition md , CustomAttribute clientRpcAttr ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::RpcProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1RpcProcessor/#mirrorweaverrpcprocessor","text":"Processes [Rpc] methods in NetworkBehaviour","title":"Mirror::Weaver::RpcProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1RpcProcessor/#public-functions","text":"Name MethodDefinition ProcessRpcInvoke (TypeDefinition td, MethodDefinition md, MethodDefinition rpcCallFunc) MethodDefinition ProcessRpcCall (TypeDefinition td, MethodDefinition md, CustomAttribute clientRpcAttr)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1RpcProcessor/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1RpcProcessor/#function-processrpcinvoke","text":"static inline MethodDefinition ProcessRpcInvoke ( TypeDefinition td , MethodDefinition md , MethodDefinition rpcCallFunc )","title":"function ProcessRpcInvoke"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1RpcProcessor/#function-processrpccall","text":"static inline MethodDefinition ProcessRpcCall ( TypeDefinition td , MethodDefinition md , CustomAttribute clientRpcAttr ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function ProcessRpcCall"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1ServerClientAttributeProcessor/","text":"Mirror::Weaver::ServerClientAttributeProcessor Public Functions Name bool Process (TypeDefinition td) bool HasServerClientAttribute (MethodDefinition md) bool ProcessMethodAttributes (MethodDefinition md) Public Functions Documentation function Process static inline bool Process ( TypeDefinition td ) function HasServerClientAttribute static inline bool HasServerClientAttribute ( MethodDefinition md ) function ProcessMethodAttributes static inline bool ProcessMethodAttributes ( MethodDefinition md ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::ServerClientAttributeProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1ServerClientAttributeProcessor/#mirrorweaverserverclientattributeprocessor","text":"","title":"Mirror::Weaver::ServerClientAttributeProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1ServerClientAttributeProcessor/#public-functions","text":"Name bool Process (TypeDefinition td) bool HasServerClientAttribute (MethodDefinition md) bool ProcessMethodAttributes (MethodDefinition md)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1ServerClientAttributeProcessor/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1ServerClientAttributeProcessor/#function-process","text":"static inline bool Process ( TypeDefinition td )","title":"function Process"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1ServerClientAttributeProcessor/#function-hasserverclientattribute","text":"static inline bool HasServerClientAttribute ( MethodDefinition md )","title":"function HasServerClientAttribute"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1ServerClientAttributeProcessor/#function-processmethodattributes","text":"static inline bool ProcessMethodAttributes ( MethodDefinition md ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function ProcessMethodAttributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncObjectInitializer/","text":"Mirror::Weaver::SyncObjectInitializer Public Functions Name void GenerateSyncObjectInitializer (ILProcessor worker, FieldDefinition fd) bool ImplementsSyncObject (TypeReference typeRef) Public Functions Documentation function GenerateSyncObjectInitializer static inline void GenerateSyncObjectInitializer ( ILProcessor worker , FieldDefinition fd ) function ImplementsSyncObject static inline bool ImplementsSyncObject ( TypeReference typeRef ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::SyncObjectInitializer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncObjectInitializer/#mirrorweaversyncobjectinitializer","text":"","title":"Mirror::Weaver::SyncObjectInitializer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncObjectInitializer/#public-functions","text":"Name void GenerateSyncObjectInitializer (ILProcessor worker, FieldDefinition fd) bool ImplementsSyncObject (TypeReference typeRef)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncObjectInitializer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncObjectInitializer/#function-generatesyncobjectinitializer","text":"static inline void GenerateSyncObjectInitializer ( ILProcessor worker , FieldDefinition fd )","title":"function GenerateSyncObjectInitializer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncObjectInitializer/#function-implementssyncobject","text":"static inline bool ImplementsSyncObject ( TypeReference typeRef ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function ImplementsSyncObject"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncObjectProcessor/","text":"Mirror::Weaver::SyncObjectProcessor Public Functions Name List< FieldDefinition > FindSyncObjectsFields (TypeDefinition td) Finds SyncObjects fields in a type Public Functions Documentation function FindSyncObjectsFields static inline List < FieldDefinition > FindSyncObjectsFields ( TypeDefinition td ) Finds SyncObjects fields in a type Parameters : td Return : Type should be a NetworkBehaviour Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::SyncObjectProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncObjectProcessor/#mirrorweaversyncobjectprocessor","text":"","title":"Mirror::Weaver::SyncObjectProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncObjectProcessor/#public-functions","text":"Name List< FieldDefinition > FindSyncObjectsFields (TypeDefinition td) Finds SyncObjects fields in a type","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncObjectProcessor/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncObjectProcessor/#function-findsyncobjectsfields","text":"static inline List < FieldDefinition > FindSyncObjectsFields ( TypeDefinition td ) Finds SyncObjects fields in a type Parameters : td Return : Type should be a NetworkBehaviour Updated on 29 January 2021 at 18:34:49 UTC","title":"function FindSyncObjectsFields"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncVarProcessor/","text":"Mirror::Weaver::SyncVarProcessor Processes [SyncVar] in NetworkBehaviour Public Functions Name MethodDefinition GetHookMethod (TypeDefinition td, FieldDefinition syncVar) MethodDefinition GenerateSyncVarGetter (FieldDefinition fd, string originalName, FieldDefinition netFieldId) MethodDefinition GenerateSyncVarSetter (TypeDefinition td, FieldDefinition fd, string originalName, long dirtyBit, FieldDefinition netFieldId) void ProcessSyncVar (TypeDefinition td, FieldDefinition fd, Dictionary< FieldDefinition, FieldDefinition > syncVarNetIds, long dirtyBit) void WriteCallHookMethodUsingArgument (ILProcessor worker, MethodDefinition hookMethod, VariableDefinition oldValue) void WriteCallHookMethodUsingField (ILProcessor worker, MethodDefinition hookMethod, VariableDefinition oldValue, FieldDefinition newValue) Public Attributes Name List< FieldDefinition > syncVars Public Functions Documentation function GetHookMethod static inline MethodDefinition GetHookMethod ( TypeDefinition td , FieldDefinition syncVar ) function GenerateSyncVarGetter static inline MethodDefinition GenerateSyncVarGetter ( FieldDefinition fd , string originalName , FieldDefinition netFieldId ) function GenerateSyncVarSetter static inline MethodDefinition GenerateSyncVarSetter ( TypeDefinition td , FieldDefinition fd , string originalName , long dirtyBit , FieldDefinition netFieldId ) function ProcessSyncVar static inline void ProcessSyncVar ( TypeDefinition td , FieldDefinition fd , Dictionary < FieldDefinition , FieldDefinition > syncVarNetIds , long dirtyBit ) function WriteCallHookMethodUsingArgument static inline void WriteCallHookMethodUsingArgument ( ILProcessor worker , MethodDefinition hookMethod , VariableDefinition oldValue ) function WriteCallHookMethodUsingField static inline void WriteCallHookMethodUsingField ( ILProcessor worker , MethodDefinition hookMethod , VariableDefinition oldValue , FieldDefinition newValue ) Public Attributes Documentation variable syncVars static List < FieldDefinition > syncVars ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::SyncVarProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncVarProcessor/#mirrorweaversyncvarprocessor","text":"Processes [SyncVar] in NetworkBehaviour","title":"Mirror::Weaver::SyncVarProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncVarProcessor/#public-functions","text":"Name MethodDefinition GetHookMethod (TypeDefinition td, FieldDefinition syncVar) MethodDefinition GenerateSyncVarGetter (FieldDefinition fd, string originalName, FieldDefinition netFieldId) MethodDefinition GenerateSyncVarSetter (TypeDefinition td, FieldDefinition fd, string originalName, long dirtyBit, FieldDefinition netFieldId) void ProcessSyncVar (TypeDefinition td, FieldDefinition fd, Dictionary< FieldDefinition, FieldDefinition > syncVarNetIds, long dirtyBit) void WriteCallHookMethodUsingArgument (ILProcessor worker, MethodDefinition hookMethod, VariableDefinition oldValue) void WriteCallHookMethodUsingField (ILProcessor worker, MethodDefinition hookMethod, VariableDefinition oldValue, FieldDefinition newValue)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncVarProcessor/#public-attributes","text":"Name List< FieldDefinition > syncVars","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncVarProcessor/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncVarProcessor/#function-gethookmethod","text":"static inline MethodDefinition GetHookMethod ( TypeDefinition td , FieldDefinition syncVar )","title":"function GetHookMethod"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncVarProcessor/#function-generatesyncvargetter","text":"static inline MethodDefinition GenerateSyncVarGetter ( FieldDefinition fd , string originalName , FieldDefinition netFieldId )","title":"function GenerateSyncVarGetter"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncVarProcessor/#function-generatesyncvarsetter","text":"static inline MethodDefinition GenerateSyncVarSetter ( TypeDefinition td , FieldDefinition fd , string originalName , long dirtyBit , FieldDefinition netFieldId )","title":"function GenerateSyncVarSetter"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncVarProcessor/#function-processsyncvar","text":"static inline void ProcessSyncVar ( TypeDefinition td , FieldDefinition fd , Dictionary < FieldDefinition , FieldDefinition > syncVarNetIds , long dirtyBit )","title":"function ProcessSyncVar"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncVarProcessor/#function-writecallhookmethodusingargument","text":"static inline void WriteCallHookMethodUsingArgument ( ILProcessor worker , MethodDefinition hookMethod , VariableDefinition oldValue )","title":"function WriteCallHookMethodUsingArgument"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncVarProcessor/#function-writecallhookmethodusingfield","text":"static inline void WriteCallHookMethodUsingField ( ILProcessor worker , MethodDefinition hookMethod , VariableDefinition oldValue , FieldDefinition newValue )","title":"function WriteCallHookMethodUsingField"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncVarProcessor/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1SyncVarProcessor/#variable-syncvars","text":"static List < FieldDefinition > syncVars ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable syncVars"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1TargetRpcProcessor/","text":"Mirror::Weaver::TargetRpcProcessor Processes [TargetRpc] methods in NetworkBehaviour Public Functions Name bool HasNetworkConnectionParameter (MethodDefinition md) MethodDefinition ProcessTargetRpcInvoke (TypeDefinition td, MethodDefinition md, MethodDefinition rpcCallFunc) MethodDefinition ProcessTargetRpcCall (TypeDefinition td, MethodDefinition md, CustomAttribute targetRpcAttr) Public Functions Documentation function HasNetworkConnectionParameter static inline bool HasNetworkConnectionParameter ( MethodDefinition md ) function ProcessTargetRpcInvoke static inline MethodDefinition ProcessTargetRpcInvoke ( TypeDefinition td , MethodDefinition md , MethodDefinition rpcCallFunc ) function ProcessTargetRpcCall static inline MethodDefinition ProcessTargetRpcCall ( TypeDefinition td , MethodDefinition md , CustomAttribute targetRpcAttr ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::TargetRpcProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1TargetRpcProcessor/#mirrorweavertargetrpcprocessor","text":"Processes [TargetRpc] methods in NetworkBehaviour","title":"Mirror::Weaver::TargetRpcProcessor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1TargetRpcProcessor/#public-functions","text":"Name bool HasNetworkConnectionParameter (MethodDefinition md) MethodDefinition ProcessTargetRpcInvoke (TypeDefinition td, MethodDefinition md, MethodDefinition rpcCallFunc) MethodDefinition ProcessTargetRpcCall (TypeDefinition td, MethodDefinition md, CustomAttribute targetRpcAttr)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1TargetRpcProcessor/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1TargetRpcProcessor/#function-hasnetworkconnectionparameter","text":"static inline bool HasNetworkConnectionParameter ( MethodDefinition md )","title":"function HasNetworkConnectionParameter"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1TargetRpcProcessor/#function-processtargetrpcinvoke","text":"static inline MethodDefinition ProcessTargetRpcInvoke ( TypeDefinition td , MethodDefinition md , MethodDefinition rpcCallFunc )","title":"function ProcessTargetRpcInvoke"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1TargetRpcProcessor/#function-processtargetrpccall","text":"static inline MethodDefinition ProcessTargetRpcCall ( TypeDefinition td , MethodDefinition md , CustomAttribute targetRpcAttr ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function ProcessTargetRpcCall"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1TypeReferenceComparer/","text":"Mirror::Weaver::TypeReferenceComparer Comparers TypeReference using FullName Inherits from IEqualityComparer< TypeReference > Public Functions Name bool Equals (TypeReference x, TypeReference y) int GetHashCode (TypeReference obj) Public Functions Documentation function Equals inline bool Equals ( TypeReference x , TypeReference y ) function GetHashCode inline int GetHashCode ( TypeReference obj ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::TypeReferenceComparer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1TypeReferenceComparer/#mirrorweavertypereferencecomparer","text":"Comparers TypeReference using FullName Inherits from IEqualityComparer< TypeReference >","title":"Mirror::Weaver::TypeReferenceComparer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1TypeReferenceComparer/#public-functions","text":"Name bool Equals (TypeReference x, TypeReference y) int GetHashCode (TypeReference obj)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1TypeReferenceComparer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1TypeReferenceComparer/#function-equals","text":"inline bool Equals ( TypeReference x , TypeReference y )","title":"function Equals"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1TypeReferenceComparer/#function-gethashcode","text":"inline int GetHashCode ( TypeReference obj ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function GetHashCode"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Weaver/","text":"Mirror::Weaver::Weaver Public Functions Name void DLog (TypeDefinition td, string fmt, params object [] args) void Error (string message) void Error (string message, MemberReference mr) void Warning (string message, MemberReference mr) bool WeaveAssembly (string assembly, IEnumerable< string > dependencies) Public Properties Name WeaverLists WeaveLists AssemblyDefinition CurrentAssembly bool WeavingFailed bool GenerateLogErrors Public Attributes Name string InvokeRpcPrefix Public Functions Documentation function DLog static inline void DLog ( TypeDefinition td , string fmt , params object [] args ) function Error static inline void Error ( string message ) function Error static inline void Error ( string message , MemberReference mr ) function Warning static inline void Warning ( string message , MemberReference mr ) function WeaveAssembly static inline bool WeaveAssembly ( string assembly , IEnumerable < string > dependencies ) Public Property Documentation property WeaveLists static WeaverLists WeaveLists ; property CurrentAssembly static AssemblyDefinition CurrentAssembly ; property WeavingFailed static bool WeavingFailed ; property GenerateLogErrors static bool GenerateLogErrors ; Public Attributes Documentation variable InvokeRpcPrefix static string InvokeRpcPrefix => \"InvokeUserCode_\" ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::Weaver"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Weaver/#mirrorweaverweaver","text":"","title":"Mirror::Weaver::Weaver"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Weaver/#public-functions","text":"Name void DLog (TypeDefinition td, string fmt, params object [] args) void Error (string message) void Error (string message, MemberReference mr) void Warning (string message, MemberReference mr) bool WeaveAssembly (string assembly, IEnumerable< string > dependencies)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Weaver/#public-properties","text":"Name WeaverLists WeaveLists AssemblyDefinition CurrentAssembly bool WeavingFailed bool GenerateLogErrors","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Weaver/#public-attributes","text":"Name string InvokeRpcPrefix","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Weaver/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Weaver/#function-dlog","text":"static inline void DLog ( TypeDefinition td , string fmt , params object [] args )","title":"function DLog"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Weaver/#function-error","text":"static inline void Error ( string message )","title":"function Error"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Weaver/#function-error_1","text":"static inline void Error ( string message , MemberReference mr )","title":"function Error"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Weaver/#function-warning","text":"static inline void Warning ( string message , MemberReference mr )","title":"function Warning"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Weaver/#function-weaveassembly","text":"static inline bool WeaveAssembly ( string assembly , IEnumerable < string > dependencies )","title":"function WeaveAssembly"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Weaver/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Weaver/#property-weavelists","text":"static WeaverLists WeaveLists ;","title":"property WeaveLists"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Weaver/#property-currentassembly","text":"static AssemblyDefinition CurrentAssembly ;","title":"property CurrentAssembly"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Weaver/#property-weavingfailed","text":"static bool WeavingFailed ;","title":"property WeavingFailed"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Weaver/#property-generatelogerrors","text":"static bool GenerateLogErrors ;","title":"property GenerateLogErrors"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Weaver/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Weaver/#variable-invokerpcprefix","text":"static string InvokeRpcPrefix => \"InvokeUserCode_\" ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable InvokeRpcPrefix"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverException/","text":"Mirror::Weaver::WeaverException Inherits from Exception Inherited by GenerateWriterException Protected Functions Name WeaverException (string message, MemberReference member) WeaverException (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext) Public Properties Name MemberReference MemberReference Protected Functions Documentation function WeaverException inline WeaverException ( string message , MemberReference member ) function WeaverException inline WeaverException ( System . Runtime . Serialization . SerializationInfo serializationInfo , System . Runtime . Serialization . StreamingContext streamingContext ) Public Property Documentation property MemberReference MemberReference MemberReference ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::WeaverException"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverException/#mirrorweaverweaverexception","text":"Inherits from Exception Inherited by GenerateWriterException","title":"Mirror::Weaver::WeaverException"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverException/#protected-functions","text":"Name WeaverException (string message, MemberReference member) WeaverException (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)","title":"Protected Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverException/#public-properties","text":"Name MemberReference MemberReference","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverException/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverException/#function-weaverexception","text":"inline WeaverException ( string message , MemberReference member )","title":"function WeaverException"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverException/#function-weaverexception_1","text":"inline WeaverException ( System . Runtime . Serialization . SerializationInfo serializationInfo , System . Runtime . Serialization . StreamingContext streamingContext )","title":"function WeaverException"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverException/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverException/#property-memberreference","text":"MemberReference MemberReference ; Updated on 29 January 2021 at 18:34:49 UTC","title":"property MemberReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverLists/","text":"Mirror::Weaver::WeaverLists Public Functions Name int GetSyncVarStart (string className) void SetNumSyncVars (string className, int num) WeaverLists () Public Attributes Name Dictionary< FieldDefinition, MethodDefinition > replacementSetterProperties Dictionary< FieldDefinition, MethodDefinition > replacementGetterProperties TypeDefinition generateContainerClass Dictionary< string, int > numSyncVars Public Functions Documentation function GetSyncVarStart inline int GetSyncVarStart ( string className ) function SetNumSyncVars inline void SetNumSyncVars ( string className , int num ) function WeaverLists inline WeaverLists () Public Attributes Documentation variable replacementSetterProperties Dictionary < FieldDefinition , MethodDefinition > replacementSetterProperties = new Dictionary < FieldDefinition , MethodDefinition > (); variable replacementGetterProperties Dictionary < FieldDefinition , MethodDefinition > replacementGetterProperties = new Dictionary < FieldDefinition , MethodDefinition > (); variable generateContainerClass TypeDefinition generateContainerClass ; variable numSyncVars Dictionary < string , int > numSyncVars = new Dictionary < string , int > (); Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::WeaverLists"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverLists/#mirrorweaverweaverlists","text":"","title":"Mirror::Weaver::WeaverLists"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverLists/#public-functions","text":"Name int GetSyncVarStart (string className) void SetNumSyncVars (string className, int num) WeaverLists ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverLists/#public-attributes","text":"Name Dictionary< FieldDefinition, MethodDefinition > replacementSetterProperties Dictionary< FieldDefinition, MethodDefinition > replacementGetterProperties TypeDefinition generateContainerClass Dictionary< string, int > numSyncVars","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverLists/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverLists/#function-getsyncvarstart","text":"inline int GetSyncVarStart ( string className )","title":"function GetSyncVarStart"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverLists/#function-setnumsyncvars","text":"inline void SetNumSyncVars ( string className , int num )","title":"function SetNumSyncVars"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverLists/#function-weaverlists","text":"inline WeaverLists ()","title":"function WeaverLists"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverLists/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverLists/#variable-replacementsetterproperties","text":"Dictionary < FieldDefinition , MethodDefinition > replacementSetterProperties = new Dictionary < FieldDefinition , MethodDefinition > ();","title":"variable replacementSetterProperties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverLists/#variable-replacementgetterproperties","text":"Dictionary < FieldDefinition , MethodDefinition > replacementGetterProperties = new Dictionary < FieldDefinition , MethodDefinition > ();","title":"variable replacementGetterProperties"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverLists/#variable-generatecontainerclass","text":"TypeDefinition generateContainerClass ;","title":"variable generateContainerClass"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverLists/#variable-numsyncvars","text":"Dictionary < string , int > numSyncVars = new Dictionary < string , int > (); Updated on 29 January 2021 at 18:34:49 UTC","title":"variable numSyncVars"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/","text":"Mirror::Weaver::WeaverTypes Public Functions Name TypeReference Import< T > () TypeReference Import (Type t) void SetupTargetTypes (AssemblyDefinition currentAssembly) Public Attributes Name MethodReference ScriptableObjectCreateInstanceMethod MethodReference NetworkBehaviourDirtyBitsReference MethodReference GetPooledWriterReference MethodReference RecycleWriterReference MethodReference ReadyConnectionReference MethodReference CmdDelegateConstructor MethodReference NetworkServerGetActive MethodReference NetworkServerGetLocalClientActive MethodReference NetworkClientGetActive MethodReference InitSyncObjectReference MethodReference ArraySegmentConstructorReference MethodReference ArraySegmentArrayReference MethodReference ArraySegmentOffsetReference MethodReference ArraySegmentCountReference MethodReference ListConstructorReference MethodReference ListCountReference MethodReference ListGetItemReference MethodReference ListAddReference MethodReference syncVarEqualReference MethodReference syncVarNetworkIdentityEqualReference MethodReference syncVarGameObjectEqualReference MethodReference setSyncVarReference MethodReference setSyncVarHookGuard MethodReference getSyncVarHookGuard MethodReference setSyncVarGameObjectReference MethodReference getSyncVarGameObjectReference MethodReference setSyncVarNetworkIdentityReference MethodReference getSyncVarNetworkIdentityReference MethodReference syncVarNetworkBehaviourEqualReference MethodReference setSyncVarNetworkBehaviourReference MethodReference getSyncVarNetworkBehaviourReference MethodReference registerCommandDelegateReference MethodReference registerRpcDelegateReference MethodReference getTypeReference MethodReference getTypeFromHandleReference MethodReference logErrorReference MethodReference logWarningReference MethodReference sendCommandInternal MethodReference sendRpcInternal MethodReference sendTargetRpcInternal MethodReference readNetworkBehaviourGeneric Public Functions Documentation function Import< T > static TypeReference Import < T > () function Import static TypeReference Import ( Type t ) function SetupTargetTypes static inline void SetupTargetTypes ( AssemblyDefinition currentAssembly ) Public Attributes Documentation variable ScriptableObjectCreateInstanceMethod static MethodReference ScriptableObjectCreateInstanceMethod ; variable NetworkBehaviourDirtyBitsReference static MethodReference NetworkBehaviourDirtyBitsReference ; variable GetPooledWriterReference static MethodReference GetPooledWriterReference ; variable RecycleWriterReference static MethodReference RecycleWriterReference ; variable ReadyConnectionReference static MethodReference ReadyConnectionReference ; variable CmdDelegateConstructor static MethodReference CmdDelegateConstructor ; variable NetworkServerGetActive static MethodReference NetworkServerGetActive ; variable NetworkServerGetLocalClientActive static MethodReference NetworkServerGetLocalClientActive ; variable NetworkClientGetActive static MethodReference NetworkClientGetActive ; variable InitSyncObjectReference static MethodReference InitSyncObjectReference ; variable ArraySegmentConstructorReference static MethodReference ArraySegmentConstructorReference ; variable ArraySegmentArrayReference static MethodReference ArraySegmentArrayReference ; variable ArraySegmentOffsetReference static MethodReference ArraySegmentOffsetReference ; variable ArraySegmentCountReference static MethodReference ArraySegmentCountReference ; variable ListConstructorReference static MethodReference ListConstructorReference ; variable ListCountReference static MethodReference ListCountReference ; variable ListGetItemReference static MethodReference ListGetItemReference ; variable ListAddReference static MethodReference ListAddReference ; variable syncVarEqualReference static MethodReference syncVarEqualReference ; variable syncVarNetworkIdentityEqualReference static MethodReference syncVarNetworkIdentityEqualReference ; variable syncVarGameObjectEqualReference static MethodReference syncVarGameObjectEqualReference ; variable setSyncVarReference static MethodReference setSyncVarReference ; variable setSyncVarHookGuard static MethodReference setSyncVarHookGuard ; variable getSyncVarHookGuard static MethodReference getSyncVarHookGuard ; variable setSyncVarGameObjectReference static MethodReference setSyncVarGameObjectReference ; variable getSyncVarGameObjectReference static MethodReference getSyncVarGameObjectReference ; variable setSyncVarNetworkIdentityReference static MethodReference setSyncVarNetworkIdentityReference ; variable getSyncVarNetworkIdentityReference static MethodReference getSyncVarNetworkIdentityReference ; variable syncVarNetworkBehaviourEqualReference static MethodReference syncVarNetworkBehaviourEqualReference ; variable setSyncVarNetworkBehaviourReference static MethodReference setSyncVarNetworkBehaviourReference ; variable getSyncVarNetworkBehaviourReference static MethodReference getSyncVarNetworkBehaviourReference ; variable registerCommandDelegateReference static MethodReference registerCommandDelegateReference ; variable registerRpcDelegateReference static MethodReference registerRpcDelegateReference ; variable getTypeReference static MethodReference getTypeReference ; variable getTypeFromHandleReference static MethodReference getTypeFromHandleReference ; variable logErrorReference static MethodReference logErrorReference ; variable logWarningReference static MethodReference logWarningReference ; variable sendCommandInternal static MethodReference sendCommandInternal ; variable sendRpcInternal static MethodReference sendRpcInternal ; variable sendTargetRpcInternal static MethodReference sendTargetRpcInternal ; variable readNetworkBehaviourGeneric static MethodReference readNetworkBehaviourGeneric ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::WeaverTypes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#mirrorweaverweavertypes","text":"","title":"Mirror::Weaver::WeaverTypes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#public-functions","text":"Name TypeReference Import< T > () TypeReference Import (Type t) void SetupTargetTypes (AssemblyDefinition currentAssembly)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#public-attributes","text":"Name MethodReference ScriptableObjectCreateInstanceMethod MethodReference NetworkBehaviourDirtyBitsReference MethodReference GetPooledWriterReference MethodReference RecycleWriterReference MethodReference ReadyConnectionReference MethodReference CmdDelegateConstructor MethodReference NetworkServerGetActive MethodReference NetworkServerGetLocalClientActive MethodReference NetworkClientGetActive MethodReference InitSyncObjectReference MethodReference ArraySegmentConstructorReference MethodReference ArraySegmentArrayReference MethodReference ArraySegmentOffsetReference MethodReference ArraySegmentCountReference MethodReference ListConstructorReference MethodReference ListCountReference MethodReference ListGetItemReference MethodReference ListAddReference MethodReference syncVarEqualReference MethodReference syncVarNetworkIdentityEqualReference MethodReference syncVarGameObjectEqualReference MethodReference setSyncVarReference MethodReference setSyncVarHookGuard MethodReference getSyncVarHookGuard MethodReference setSyncVarGameObjectReference MethodReference getSyncVarGameObjectReference MethodReference setSyncVarNetworkIdentityReference MethodReference getSyncVarNetworkIdentityReference MethodReference syncVarNetworkBehaviourEqualReference MethodReference setSyncVarNetworkBehaviourReference MethodReference getSyncVarNetworkBehaviourReference MethodReference registerCommandDelegateReference MethodReference registerRpcDelegateReference MethodReference getTypeReference MethodReference getTypeFromHandleReference MethodReference logErrorReference MethodReference logWarningReference MethodReference sendCommandInternal MethodReference sendRpcInternal MethodReference sendTargetRpcInternal MethodReference readNetworkBehaviourGeneric","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#function-import-t","text":"static TypeReference Import < T > ()","title":"function Import&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#function-import","text":"static TypeReference Import ( Type t )","title":"function Import"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#function-setuptargettypes","text":"static inline void SetupTargetTypes ( AssemblyDefinition currentAssembly )","title":"function SetupTargetTypes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-scriptableobjectcreateinstancemethod","text":"static MethodReference ScriptableObjectCreateInstanceMethod ;","title":"variable ScriptableObjectCreateInstanceMethod"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-networkbehaviourdirtybitsreference","text":"static MethodReference NetworkBehaviourDirtyBitsReference ;","title":"variable NetworkBehaviourDirtyBitsReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-getpooledwriterreference","text":"static MethodReference GetPooledWriterReference ;","title":"variable GetPooledWriterReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-recyclewriterreference","text":"static MethodReference RecycleWriterReference ;","title":"variable RecycleWriterReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-readyconnectionreference","text":"static MethodReference ReadyConnectionReference ;","title":"variable ReadyConnectionReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-cmddelegateconstructor","text":"static MethodReference CmdDelegateConstructor ;","title":"variable CmdDelegateConstructor"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-networkservergetactive","text":"static MethodReference NetworkServerGetActive ;","title":"variable NetworkServerGetActive"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-networkservergetlocalclientactive","text":"static MethodReference NetworkServerGetLocalClientActive ;","title":"variable NetworkServerGetLocalClientActive"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-networkclientgetactive","text":"static MethodReference NetworkClientGetActive ;","title":"variable NetworkClientGetActive"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-initsyncobjectreference","text":"static MethodReference InitSyncObjectReference ;","title":"variable InitSyncObjectReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-arraysegmentconstructorreference","text":"static MethodReference ArraySegmentConstructorReference ;","title":"variable ArraySegmentConstructorReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-arraysegmentarrayreference","text":"static MethodReference ArraySegmentArrayReference ;","title":"variable ArraySegmentArrayReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-arraysegmentoffsetreference","text":"static MethodReference ArraySegmentOffsetReference ;","title":"variable ArraySegmentOffsetReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-arraysegmentcountreference","text":"static MethodReference ArraySegmentCountReference ;","title":"variable ArraySegmentCountReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-listconstructorreference","text":"static MethodReference ListConstructorReference ;","title":"variable ListConstructorReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-listcountreference","text":"static MethodReference ListCountReference ;","title":"variable ListCountReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-listgetitemreference","text":"static MethodReference ListGetItemReference ;","title":"variable ListGetItemReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-listaddreference","text":"static MethodReference ListAddReference ;","title":"variable ListAddReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-syncvarequalreference","text":"static MethodReference syncVarEqualReference ;","title":"variable syncVarEqualReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-syncvarnetworkidentityequalreference","text":"static MethodReference syncVarNetworkIdentityEqualReference ;","title":"variable syncVarNetworkIdentityEqualReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-syncvargameobjectequalreference","text":"static MethodReference syncVarGameObjectEqualReference ;","title":"variable syncVarGameObjectEqualReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-setsyncvarreference","text":"static MethodReference setSyncVarReference ;","title":"variable setSyncVarReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-setsyncvarhookguard","text":"static MethodReference setSyncVarHookGuard ;","title":"variable setSyncVarHookGuard"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-getsyncvarhookguard","text":"static MethodReference getSyncVarHookGuard ;","title":"variable getSyncVarHookGuard"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-setsyncvargameobjectreference","text":"static MethodReference setSyncVarGameObjectReference ;","title":"variable setSyncVarGameObjectReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-getsyncvargameobjectreference","text":"static MethodReference getSyncVarGameObjectReference ;","title":"variable getSyncVarGameObjectReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-setsyncvarnetworkidentityreference","text":"static MethodReference setSyncVarNetworkIdentityReference ;","title":"variable setSyncVarNetworkIdentityReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-getsyncvarnetworkidentityreference","text":"static MethodReference getSyncVarNetworkIdentityReference ;","title":"variable getSyncVarNetworkIdentityReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-syncvarnetworkbehaviourequalreference","text":"static MethodReference syncVarNetworkBehaviourEqualReference ;","title":"variable syncVarNetworkBehaviourEqualReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-setsyncvarnetworkbehaviourreference","text":"static MethodReference setSyncVarNetworkBehaviourReference ;","title":"variable setSyncVarNetworkBehaviourReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-getsyncvarnetworkbehaviourreference","text":"static MethodReference getSyncVarNetworkBehaviourReference ;","title":"variable getSyncVarNetworkBehaviourReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-registercommanddelegatereference","text":"static MethodReference registerCommandDelegateReference ;","title":"variable registerCommandDelegateReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-registerrpcdelegatereference","text":"static MethodReference registerRpcDelegateReference ;","title":"variable registerRpcDelegateReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-gettypereference","text":"static MethodReference getTypeReference ;","title":"variable getTypeReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-gettypefromhandlereference","text":"static MethodReference getTypeFromHandleReference ;","title":"variable getTypeFromHandleReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-logerrorreference","text":"static MethodReference logErrorReference ;","title":"variable logErrorReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-logwarningreference","text":"static MethodReference logWarningReference ;","title":"variable logWarningReference"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-sendcommandinternal","text":"static MethodReference sendCommandInternal ;","title":"variable sendCommandInternal"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-sendrpcinternal","text":"static MethodReference sendRpcInternal ;","title":"variable sendRpcInternal"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-sendtargetrpcinternal","text":"static MethodReference sendTargetRpcInternal ;","title":"variable sendTargetRpcInternal"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1WeaverTypes/#variable-readnetworkbehaviourgeneric","text":"static MethodReference readNetworkBehaviourGeneric ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable readNetworkBehaviourGeneric"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Writers/","text":"Mirror::Weaver::Writers Public Functions Name void Init () void Register (TypeReference dataType, MethodReference methodReference) MethodReference GetWriteFunc (TypeReference variable) Finds existing writer for type, if non exists trys to create one Public Functions Documentation function Init static inline void Init () function Register static inline void Register ( TypeReference dataType , MethodReference methodReference ) function GetWriteFunc static inline MethodReference GetWriteFunc ( TypeReference variable ) Finds existing writer for type, if non exists trys to create one Parameters : variable Return : Returns MethodReference or null This method is recursive Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::Writers"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Writers/#mirrorweaverwriters","text":"","title":"Mirror::Weaver::Writers"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Writers/#public-functions","text":"Name void Init () void Register (TypeReference dataType, MethodReference methodReference) MethodReference GetWriteFunc (TypeReference variable) Finds existing writer for type, if non exists trys to create one","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Writers/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Writers/#function-init","text":"static inline void Init ()","title":"function Init"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Writers/#function-register","text":"static inline void Register ( TypeReference dataType , MethodReference methodReference )","title":"function Register"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Weaver_1_1Writers/#function-getwritefunc","text":"static inline MethodReference GetWriteFunc ( TypeReference variable ) Finds existing writer for type, if non exists trys to create one Parameters : variable Return : Returns MethodReference or null This method is recursive Updated on 29 January 2021 at 18:34:49 UTC","title":"function GetWriteFunc"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Writer/","text":"Mirror::Writer A class that holds writers for the different types More... Public Attributes Name Action< NetworkWriter , T > write Detailed Description template < T > class Mirror :: Writer ; A class that holds writers for the different types Template Parameters : T Note that c# creates a different static variable for each type This will be populated by the weaver Public Attributes Documentation variable write static Action < NetworkWriter , T > write ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Writer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Writer/#mirrorwriter","text":"A class that holds writers for the different types More...","title":"Mirror::Writer"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Writer/#public-attributes","text":"Name Action< NetworkWriter , T > write","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Writer/#detailed-description","text":"template < T > class Mirror :: Writer ; A class that holds writers for the different types Template Parameters : T Note that c# creates a different static variable for each type This will be populated by the weaver","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Writer/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classMirror_1_1Writer/#variable-write","text":"static Action < NetworkWriter , T > write ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable write"},{"location":"Cops%20And%20Robbers/Classes/classPatrol/","text":"Patrol Inherits from MonoBehaviour Public Attributes Name float speed float waitTime float startWaitTime Transform [] moveSpots Animator animator float moveSpeed Rigidbody2D rb Public Attributes Documentation variable speed float speed ; variable waitTime float waitTime ; variable startWaitTime float startWaitTime ; variable moveSpots Transform [] moveSpots ; variable animator Animator animator ; variable moveSpeed float moveSpeed = 5f ; variable rb Rigidbody2D rb ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Patrol"},{"location":"Cops%20And%20Robbers/Classes/classPatrol/#patrol","text":"Inherits from MonoBehaviour","title":"Patrol"},{"location":"Cops%20And%20Robbers/Classes/classPatrol/#public-attributes","text":"Name float speed float waitTime float startWaitTime Transform [] moveSpots Animator animator float moveSpeed Rigidbody2D rb","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classPatrol/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classPatrol/#variable-speed","text":"float speed ;","title":"variable speed"},{"location":"Cops%20And%20Robbers/Classes/classPatrol/#variable-waittime","text":"float waitTime ;","title":"variable waitTime"},{"location":"Cops%20And%20Robbers/Classes/classPatrol/#variable-startwaittime","text":"float startWaitTime ;","title":"variable startWaitTime"},{"location":"Cops%20And%20Robbers/Classes/classPatrol/#variable-movespots","text":"Transform [] moveSpots ;","title":"variable moveSpots"},{"location":"Cops%20And%20Robbers/Classes/classPatrol/#variable-animator","text":"Animator animator ;","title":"variable animator"},{"location":"Cops%20And%20Robbers/Classes/classPatrol/#variable-movespeed","text":"float moveSpeed = 5f ;","title":"variable moveSpeed"},{"location":"Cops%20And%20Robbers/Classes/classPatrol/#variable-rb","text":"Rigidbody2D rb ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable rb"},{"location":"Cops%20And%20Robbers/Classes/classPauseMenu/","text":"PauseMenu Inherits from MonoBehaviour Public Functions Name void Resume () void LoadMenu () void QuitGame () Public Attributes Name bool GameIsPaused GameObject pauseMenuUI Public Functions Documentation function Resume inline void Resume () function LoadMenu inline void LoadMenu () function QuitGame inline void QuitGame () Public Attributes Documentation variable GameIsPaused static bool GameIsPaused = false ; variable pauseMenuUI GameObject pauseMenuUI ; Updated on 29 January 2021 at 18:34:47 UTC","title":"PauseMenu"},{"location":"Cops%20And%20Robbers/Classes/classPauseMenu/#pausemenu","text":"Inherits from MonoBehaviour","title":"PauseMenu"},{"location":"Cops%20And%20Robbers/Classes/classPauseMenu/#public-functions","text":"Name void Resume () void LoadMenu () void QuitGame ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classPauseMenu/#public-attributes","text":"Name bool GameIsPaused GameObject pauseMenuUI","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classPauseMenu/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classPauseMenu/#function-resume","text":"inline void Resume ()","title":"function Resume"},{"location":"Cops%20And%20Robbers/Classes/classPauseMenu/#function-loadmenu","text":"inline void LoadMenu ()","title":"function LoadMenu"},{"location":"Cops%20And%20Robbers/Classes/classPauseMenu/#function-quitgame","text":"inline void QuitGame ()","title":"function QuitGame"},{"location":"Cops%20And%20Robbers/Classes/classPauseMenu/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classPauseMenu/#variable-gameispaused","text":"static bool GameIsPaused = false ;","title":"variable GameIsPaused"},{"location":"Cops%20And%20Robbers/Classes/classPauseMenu/#variable-pausemenuui","text":"GameObject pauseMenuUI ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable pauseMenuUI"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Client/","text":"Telepathy::Client Inherits from Common Public Functions Name void Connect (string ip, int port) void Disconnect () bool Send (byte [] data) Public Attributes Name TcpClient client bool Connected bool Connecting Additional inherited members Public Functions inherited from Common Name bool GetNextMessage (out Message message) Protected Functions inherited from Common Name bool SendMessagesBlocking (NetworkStream stream, byte messages[][]) bool ReadMessageBlocking (NetworkStream stream, int MaxMessageSize, out byte [] content) void ReceiveLoop (int connectionId, TcpClient client, ConcurrentQueue< Message > receiveQueue, int MaxMessageSize) void SendLoop (int connectionId, TcpClient client, SafeQueue < byte[]> sendQueue, ManualResetEvent sendPending) Public Attributes inherited from Common Name int ReceiveQueueCount bool NoDelay int MaxMessageSize int SendTimeout int messageQueueSizeWarning Protected Attributes inherited from Common Name ConcurrentQueue< Message > receiveQueue Public Functions Documentation function Connect inline void Connect ( string ip , int port ) function Disconnect inline void Disconnect () function Send inline bool Send ( byte [] data ) Public Attributes Documentation variable client TcpClient client ; variable Connected bool Connected => client != null && client . Client != null && client . Client . Connected ; variable Connecting bool Connecting => _Connecting ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Telepathy::Client"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Client/#telepathyclient","text":"Inherits from Common","title":"Telepathy::Client"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Client/#public-functions","text":"Name void Connect (string ip, int port) void Disconnect () bool Send (byte [] data)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Client/#public-attributes","text":"Name TcpClient client bool Connected bool Connecting","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Client/#additional-inherited-members","text":"Public Functions inherited from Common Name bool GetNextMessage (out Message message) Protected Functions inherited from Common Name bool SendMessagesBlocking (NetworkStream stream, byte messages[][]) bool ReadMessageBlocking (NetworkStream stream, int MaxMessageSize, out byte [] content) void ReceiveLoop (int connectionId, TcpClient client, ConcurrentQueue< Message > receiveQueue, int MaxMessageSize) void SendLoop (int connectionId, TcpClient client, SafeQueue < byte[]> sendQueue, ManualResetEvent sendPending) Public Attributes inherited from Common Name int ReceiveQueueCount bool NoDelay int MaxMessageSize int SendTimeout int messageQueueSizeWarning Protected Attributes inherited from Common Name ConcurrentQueue< Message > receiveQueue","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Client/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Client/#function-connect","text":"inline void Connect ( string ip , int port )","title":"function Connect"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Client/#function-disconnect","text":"inline void Disconnect ()","title":"function Disconnect"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Client/#function-send","text":"inline bool Send ( byte [] data )","title":"function Send"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Client/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Client/#variable-client","text":"TcpClient client ;","title":"variable client"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Client/#variable-connected","text":"bool Connected => client != null && client . Client != null && client . Client . Connected ;","title":"variable Connected"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Client/#variable-connecting","text":"bool Connecting => _Connecting ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable Connecting"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/","text":"Telepathy::Common Inherited by Client , Server Public Functions Name bool GetNextMessage (out Message message) Protected Functions Name bool SendMessagesBlocking (NetworkStream stream, byte messages[][]) bool ReadMessageBlocking (NetworkStream stream, int MaxMessageSize, out byte [] content) void ReceiveLoop (int connectionId, TcpClient client, ConcurrentQueue< Message > receiveQueue, int MaxMessageSize) void SendLoop (int connectionId, TcpClient client, SafeQueue < byte[]> sendQueue, ManualResetEvent sendPending) Public Attributes Name int ReceiveQueueCount bool NoDelay int MaxMessageSize int SendTimeout int messageQueueSizeWarning Protected Attributes Name ConcurrentQueue< Message > receiveQueue Public Functions Documentation function GetNextMessage inline bool GetNextMessage ( out Message message ) Protected Functions Documentation function SendMessagesBlocking static inline bool SendMessagesBlocking ( NetworkStream stream , byte messages [][] ) function ReadMessageBlocking static inline bool ReadMessageBlocking ( NetworkStream stream , int MaxMessageSize , out byte [] content ) function ReceiveLoop static inline void ReceiveLoop ( int connectionId , TcpClient client , ConcurrentQueue < Message > receiveQueue , int MaxMessageSize ) function SendLoop static inline void SendLoop ( int connectionId , TcpClient client , SafeQueue < byte [] > sendQueue , ManualResetEvent sendPending ) Public Attributes Documentation variable ReceiveQueueCount int ReceiveQueueCount => receiveQueue . Count ; variable NoDelay bool NoDelay = true ; variable MaxMessageSize int MaxMessageSize = 16 * 1024 ; variable SendTimeout int SendTimeout = 5000 ; variable messageQueueSizeWarning static int messageQueueSizeWarning = 100000 ; Protected Attributes Documentation variable receiveQueue ConcurrentQueue < Message > receiveQueue = new ConcurrentQueue < [ Message ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structTelepathy_1_1Message / ) > (); Updated on 29 January 2021 at 18:34:47 UTC","title":"Telepathy::Common"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/#telepathycommon","text":"Inherited by Client , Server","title":"Telepathy::Common"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/#public-functions","text":"Name bool GetNextMessage (out Message message)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/#protected-functions","text":"Name bool SendMessagesBlocking (NetworkStream stream, byte messages[][]) bool ReadMessageBlocking (NetworkStream stream, int MaxMessageSize, out byte [] content) void ReceiveLoop (int connectionId, TcpClient client, ConcurrentQueue< Message > receiveQueue, int MaxMessageSize) void SendLoop (int connectionId, TcpClient client, SafeQueue < byte[]> sendQueue, ManualResetEvent sendPending)","title":"Protected Functions"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/#public-attributes","text":"Name int ReceiveQueueCount bool NoDelay int MaxMessageSize int SendTimeout int messageQueueSizeWarning","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/#protected-attributes","text":"Name ConcurrentQueue< Message > receiveQueue","title":"Protected Attributes"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/#function-getnextmessage","text":"inline bool GetNextMessage ( out Message message )","title":"function GetNextMessage"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/#function-sendmessagesblocking","text":"static inline bool SendMessagesBlocking ( NetworkStream stream , byte messages [][] )","title":"function SendMessagesBlocking"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/#function-readmessageblocking","text":"static inline bool ReadMessageBlocking ( NetworkStream stream , int MaxMessageSize , out byte [] content )","title":"function ReadMessageBlocking"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/#function-receiveloop","text":"static inline void ReceiveLoop ( int connectionId , TcpClient client , ConcurrentQueue < Message > receiveQueue , int MaxMessageSize )","title":"function ReceiveLoop"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/#function-sendloop","text":"static inline void SendLoop ( int connectionId , TcpClient client , SafeQueue < byte [] > sendQueue , ManualResetEvent sendPending )","title":"function SendLoop"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/#variable-receivequeuecount","text":"int ReceiveQueueCount => receiveQueue . Count ;","title":"variable ReceiveQueueCount"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/#variable-nodelay","text":"bool NoDelay = true ;","title":"variable NoDelay"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/#variable-maxmessagesize","text":"int MaxMessageSize = 16 * 1024 ;","title":"variable MaxMessageSize"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/#variable-sendtimeout","text":"int SendTimeout = 5000 ;","title":"variable SendTimeout"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/#variable-messagequeuesizewarning","text":"static int messageQueueSizeWarning = 100000 ;","title":"variable messageQueueSizeWarning"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Common/#variable-receivequeue","text":"ConcurrentQueue < Message > receiveQueue = new ConcurrentQueue < [ Message ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / structTelepathy_1_1Message / ) > (); Updated on 29 January 2021 at 18:34:47 UTC","title":"variable receiveQueue"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Logger/","text":"Telepathy::Logger Public Attributes Name Action< string > Log Action< string > LogWarning Action< string > LogError Public Attributes Documentation variable Log static Action < string > Log = Console . WriteLine ; variable LogWarning static Action < string > LogWarning = Console . WriteLine ; variable LogError static Action < string > LogError = Console . Error . WriteLine ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Telepathy::Logger"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Logger/#telepathylogger","text":"","title":"Telepathy::Logger"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Logger/#public-attributes","text":"Name Action< string > Log Action< string > LogWarning Action< string > LogError","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Logger/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Logger/#variable-log","text":"static Action < string > Log = Console . WriteLine ;","title":"variable Log"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Logger/#variable-logwarning","text":"static Action < string > LogWarning = Console . WriteLine ;","title":"variable LogWarning"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Logger/#variable-logerror","text":"static Action < string > LogError = Console . Error . WriteLine ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable LogError"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1NetworkStreamExtensions/","text":"Telepathy::NetworkStreamExtensions Public Functions Name int ReadSafely (this NetworkStream stream, byte [] buffer, int offset, int size) bool ReadExactly (this NetworkStream stream, byte [] buffer, int amount) Public Functions Documentation function ReadSafely static inline int ReadSafely ( this NetworkStream stream , byte [] buffer , int offset , int size ) function ReadExactly static inline bool ReadExactly ( this NetworkStream stream , byte [] buffer , int amount ) Updated on 29 January 2021 at 18:34:47 UTC","title":"Telepathy::NetworkStreamExtensions"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1NetworkStreamExtensions/#telepathynetworkstreamextensions","text":"","title":"Telepathy::NetworkStreamExtensions"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1NetworkStreamExtensions/#public-functions","text":"Name int ReadSafely (this NetworkStream stream, byte [] buffer, int offset, int size) bool ReadExactly (this NetworkStream stream, byte [] buffer, int amount)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1NetworkStreamExtensions/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1NetworkStreamExtensions/#function-readsafely","text":"static inline int ReadSafely ( this NetworkStream stream , byte [] buffer , int offset , int size )","title":"function ReadSafely"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1NetworkStreamExtensions/#function-readexactly","text":"static inline bool ReadExactly ( this NetworkStream stream , byte [] buffer , int amount ) Updated on 29 January 2021 at 18:34:47 UTC","title":"function ReadExactly"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1SafeQueue/","text":"Telepathy::SafeQueue More... Public Functions Name void Enqueue (T item) bool TryDequeue (out T result) bool TryDequeueAll (out T [] result) void Clear () Public Properties Name int Count Detailed Description template < T > class Telepathy :: SafeQueue ; Public Functions Documentation function Enqueue inline void Enqueue ( T item ) function TryDequeue inline bool TryDequeue ( out T result ) function TryDequeueAll inline bool TryDequeueAll ( out T [] result ) function Clear inline void Clear () Public Property Documentation property Count int Count ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Telepathy::SafeQueue"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1SafeQueue/#telepathysafequeue","text":"More...","title":"Telepathy::SafeQueue"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1SafeQueue/#public-functions","text":"Name void Enqueue (T item) bool TryDequeue (out T result) bool TryDequeueAll (out T [] result) void Clear ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1SafeQueue/#public-properties","text":"Name int Count","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1SafeQueue/#detailed-description","text":"template < T > class Telepathy :: SafeQueue ;","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1SafeQueue/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1SafeQueue/#function-enqueue","text":"inline void Enqueue ( T item )","title":"function Enqueue"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1SafeQueue/#function-trydequeue","text":"inline bool TryDequeue ( out T result )","title":"function TryDequeue"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1SafeQueue/#function-trydequeueall","text":"inline bool TryDequeueAll ( out T [] result )","title":"function TryDequeueAll"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1SafeQueue/#function-clear","text":"inline void Clear ()","title":"function Clear"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1SafeQueue/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1SafeQueue/#property-count","text":"int Count ; Updated on 29 January 2021 at 18:34:47 UTC","title":"property Count"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server/","text":"Telepathy::Server Inherits from Common Public Functions Name int NextConnectionId () bool Start (int port) void Stop () bool Send (int connectionId, byte [] data) string GetClientAddress (int connectionId) bool Disconnect (int connectionId) Public Attributes Name TcpListener listener bool Active Additional inherited members Public Functions inherited from Common Name bool GetNextMessage (out Message message) Protected Functions inherited from Common Name bool SendMessagesBlocking (NetworkStream stream, byte messages[][]) bool ReadMessageBlocking (NetworkStream stream, int MaxMessageSize, out byte [] content) void ReceiveLoop (int connectionId, TcpClient client, ConcurrentQueue< Message > receiveQueue, int MaxMessageSize) void SendLoop (int connectionId, TcpClient client, SafeQueue < byte[]> sendQueue, ManualResetEvent sendPending) Public Attributes inherited from Common Name int ReceiveQueueCount bool NoDelay int MaxMessageSize int SendTimeout int messageQueueSizeWarning Protected Attributes inherited from Common Name ConcurrentQueue< Message > receiveQueue Public Functions Documentation function NextConnectionId inline int NextConnectionId () function Start inline bool Start ( int port ) function Stop inline void Stop () function Send inline bool Send ( int connectionId , byte [] data ) function GetClientAddress inline string GetClientAddress ( int connectionId ) function Disconnect inline bool Disconnect ( int connectionId ) Public Attributes Documentation variable listener TcpListener listener ; variable Active bool Active => listenerThread != null && listenerThread . IsAlive ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Telepathy::Server"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server/#telepathyserver","text":"Inherits from Common","title":"Telepathy::Server"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server/#public-functions","text":"Name int NextConnectionId () bool Start (int port) void Stop () bool Send (int connectionId, byte [] data) string GetClientAddress (int connectionId) bool Disconnect (int connectionId)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server/#public-attributes","text":"Name TcpListener listener bool Active","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server/#additional-inherited-members","text":"Public Functions inherited from Common Name bool GetNextMessage (out Message message) Protected Functions inherited from Common Name bool SendMessagesBlocking (NetworkStream stream, byte messages[][]) bool ReadMessageBlocking (NetworkStream stream, int MaxMessageSize, out byte [] content) void ReceiveLoop (int connectionId, TcpClient client, ConcurrentQueue< Message > receiveQueue, int MaxMessageSize) void SendLoop (int connectionId, TcpClient client, SafeQueue < byte[]> sendQueue, ManualResetEvent sendPending) Public Attributes inherited from Common Name int ReceiveQueueCount bool NoDelay int MaxMessageSize int SendTimeout int messageQueueSizeWarning Protected Attributes inherited from Common Name ConcurrentQueue< Message > receiveQueue","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server/#function-nextconnectionid","text":"inline int NextConnectionId ()","title":"function NextConnectionId"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server/#function-start","text":"inline bool Start ( int port )","title":"function Start"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server/#function-stop","text":"inline void Stop ()","title":"function Stop"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server/#function-send","text":"inline bool Send ( int connectionId , byte [] data )","title":"function Send"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server/#function-getclientaddress","text":"inline string GetClientAddress ( int connectionId )","title":"function GetClientAddress"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server/#function-disconnect","text":"inline bool Disconnect ( int connectionId )","title":"function Disconnect"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server/#variable-listener","text":"TcpListener listener ;","title":"variable listener"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server/#variable-active","text":"bool Active => listenerThread != null && listenerThread . IsAlive ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable Active"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server_1_1ClientToken/","text":"Telepathy::Server::ClientToken Public Functions Name ClientToken (TcpClient client) Public Attributes Name TcpClient client SafeQueue < byte[]> sendQueue ManualResetEvent sendPending Public Functions Documentation function ClientToken inline ClientToken ( TcpClient client ) Public Attributes Documentation variable client TcpClient client ; variable sendQueue SafeQueue < byte [] > sendQueue = new [ SafeQueue ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classTelepathy_1_1SafeQueue / ) < byte [] > (); variable sendPending ManualResetEvent sendPending = new ManualResetEvent ( false ); Updated on 29 January 2021 at 18:34:47 UTC","title":"Telepathy::Server::ClientToken"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server_1_1ClientToken/#telepathyserverclienttoken","text":"","title":"Telepathy::Server::ClientToken"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server_1_1ClientToken/#public-functions","text":"Name ClientToken (TcpClient client)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server_1_1ClientToken/#public-attributes","text":"Name TcpClient client SafeQueue < byte[]> sendQueue ManualResetEvent sendPending","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server_1_1ClientToken/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server_1_1ClientToken/#function-clienttoken","text":"inline ClientToken ( TcpClient client )","title":"function ClientToken"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server_1_1ClientToken/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server_1_1ClientToken/#variable-client","text":"TcpClient client ;","title":"variable client"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server_1_1ClientToken/#variable-sendqueue","text":"SafeQueue < byte [] > sendQueue = new [ SafeQueue ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classTelepathy_1_1SafeQueue / ) < byte [] > ();","title":"variable sendQueue"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Server_1_1ClientToken/#variable-sendpending","text":"ManualResetEvent sendPending = new ManualResetEvent ( false ); Updated on 29 January 2021 at 18:34:47 UTC","title":"variable sendPending"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1ThreadExtensions/","text":"Telepathy::ThreadExtensions Public Functions Name void AbortAndJoin (this Thread thread) Public Functions Documentation function AbortAndJoin static inline void AbortAndJoin ( this Thread thread ) Updated on 29 January 2021 at 18:34:47 UTC","title":"Telepathy::ThreadExtensions"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1ThreadExtensions/#telepathythreadextensions","text":"","title":"Telepathy::ThreadExtensions"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1ThreadExtensions/#public-functions","text":"Name void AbortAndJoin (this Thread thread)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1ThreadExtensions/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1ThreadExtensions/#function-abortandjoin","text":"static inline void AbortAndJoin ( this Thread thread ) Updated on 29 January 2021 at 18:34:47 UTC","title":"function AbortAndJoin"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Utils/","text":"Telepathy::Utils Public Functions Name byte [] IntToBytesBigEndian (int value) void IntToBytesBigEndianNonAlloc (int value, byte [] bytes) int BytesToIntBigEndian (byte [] bytes) Public Functions Documentation function IntToBytesBigEndian static inline byte [] IntToBytesBigEndian ( int value ) function IntToBytesBigEndianNonAlloc static inline void IntToBytesBigEndianNonAlloc ( int value , byte [] bytes ) function BytesToIntBigEndian static inline int BytesToIntBigEndian ( byte [] bytes ) Updated on 29 January 2021 at 18:34:47 UTC","title":"Telepathy::Utils"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Utils/#telepathyutils","text":"","title":"Telepathy::Utils"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Utils/#public-functions","text":"Name byte [] IntToBytesBigEndian (int value) void IntToBytesBigEndianNonAlloc (int value, byte [] bytes) int BytesToIntBigEndian (byte [] bytes)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Utils/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Utils/#function-inttobytesbigendian","text":"static inline byte [] IntToBytesBigEndian ( int value )","title":"function IntToBytesBigEndian"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Utils/#function-inttobytesbigendiannonalloc","text":"static inline void IntToBytesBigEndianNonAlloc ( int value , byte [] bytes )","title":"function IntToBytesBigEndianNonAlloc"},{"location":"Cops%20And%20Robbers/Classes/classTelepathy_1_1Utils/#function-bytestointbigendian","text":"static inline int BytesToIntBigEndian ( byte [] bytes ) Updated on 29 January 2021 at 18:34:47 UTC","title":"function BytesToIntBigEndian"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/","text":"kcp2k::Kcp Public Functions Name Kcp (uint conv, Action< byte[], int > output) int Receive (byte [] buffer, int len) int PeekSize () int Send (byte [] buffer, int offset, int len) int Input (byte [] data, int offset, int size) void Flush () void Update (uint currentTimeMilliSeconds) uint Check (uint current_) void SetMtu (uint mtu) void SetInterval (uint interval) void SetNoDelay (uint nodelay, uint interval =INTERVAL, int resend =0, bool nocwnd =false) void SetWindowSize (uint sendWindow, uint receiveWindow) Public Attributes Name const int RTO_NDL const int RTO_MIN const int RTO_DEF const int RTO_MAX const int CMD_PUSH const int CMD_ACK const int CMD_WASK const int CMD_WINS const int ASK_SEND const int ASK_TELL const int WND_SND const int WND_RCV const int MTU_DEF const int ACK_FAST const int INTERVAL const int OVERHEAD const int DEADLINK const int THRESH_INIT const int THRESH_MIN const int PROBE_INIT const int PROBE_LIMIT const int FASTACK_LIMIT int WaitSnd Public Functions Documentation function Kcp inline Kcp ( uint conv , Action < byte [], int > output ) function Receive inline int Receive ( byte [] buffer , int len ) function PeekSize inline int PeekSize () function Send inline int Send ( byte [] buffer , int offset , int len ) function Input inline int Input ( byte [] data , int offset , int size ) function Flush inline void Flush () function Update inline void Update ( uint currentTimeMilliSeconds ) function Check inline uint Check ( uint current_ ) function SetMtu inline void SetMtu ( uint mtu ) function SetInterval inline void SetInterval ( uint interval ) function SetNoDelay inline void SetNoDelay ( uint nodelay , uint interval = INTERVAL , int resend = 0 , bool nocwnd = false ) function SetWindowSize inline void SetWindowSize ( uint sendWindow , uint receiveWindow ) Public Attributes Documentation variable RTO_NDL const int RTO_NDL = 30 ; variable RTO_MIN const int RTO_MIN = 100 ; variable RTO_DEF const int RTO_DEF = 200 ; variable RTO_MAX const int RTO_MAX = 60000 ; variable CMD_PUSH const int CMD_PUSH = 81 ; variable CMD_ACK const int CMD_ACK = 82 ; variable CMD_WASK const int CMD_WASK = 83 ; variable CMD_WINS const int CMD_WINS = 84 ; variable ASK_SEND const int ASK_SEND = 1 ; variable ASK_TELL const int ASK_TELL = 2 ; variable WND_SND const int WND_SND = 32 ; variable WND_RCV const int WND_RCV = 128 ; variable MTU_DEF const int MTU_DEF = 1200 ; variable ACK_FAST const int ACK_FAST = 3 ; variable INTERVAL const int INTERVAL = 100 ; variable OVERHEAD const int OVERHEAD = 24 ; variable DEADLINK const int DEADLINK = 20 ; variable THRESH_INIT const int THRESH_INIT = 2 ; variable THRESH_MIN const int THRESH_MIN = 2 ; variable PROBE_INIT const int PROBE_INIT = 7000 ; variable PROBE_LIMIT const int PROBE_LIMIT = 120000 ; variable FASTACK_LIMIT const int FASTACK_LIMIT = 5 ; variable WaitSnd int WaitSnd => snd_buf . Count + snd_queue . Count ; Updated on 29 January 2021 at 18:34:49 UTC","title":"kcp2k::Kcp"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#kcp2kkcp","text":"","title":"kcp2k::Kcp"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#public-functions","text":"Name Kcp (uint conv, Action< byte[], int > output) int Receive (byte [] buffer, int len) int PeekSize () int Send (byte [] buffer, int offset, int len) int Input (byte [] data, int offset, int size) void Flush () void Update (uint currentTimeMilliSeconds) uint Check (uint current_) void SetMtu (uint mtu) void SetInterval (uint interval) void SetNoDelay (uint nodelay, uint interval =INTERVAL, int resend =0, bool nocwnd =false) void SetWindowSize (uint sendWindow, uint receiveWindow)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#public-attributes","text":"Name const int RTO_NDL const int RTO_MIN const int RTO_DEF const int RTO_MAX const int CMD_PUSH const int CMD_ACK const int CMD_WASK const int CMD_WINS const int ASK_SEND const int ASK_TELL const int WND_SND const int WND_RCV const int MTU_DEF const int ACK_FAST const int INTERVAL const int OVERHEAD const int DEADLINK const int THRESH_INIT const int THRESH_MIN const int PROBE_INIT const int PROBE_LIMIT const int FASTACK_LIMIT int WaitSnd","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#function-kcp","text":"inline Kcp ( uint conv , Action < byte [], int > output )","title":"function Kcp"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#function-receive","text":"inline int Receive ( byte [] buffer , int len )","title":"function Receive"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#function-peeksize","text":"inline int PeekSize ()","title":"function PeekSize"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#function-send","text":"inline int Send ( byte [] buffer , int offset , int len )","title":"function Send"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#function-input","text":"inline int Input ( byte [] data , int offset , int size )","title":"function Input"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#function-flush","text":"inline void Flush ()","title":"function Flush"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#function-update","text":"inline void Update ( uint currentTimeMilliSeconds )","title":"function Update"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#function-check","text":"inline uint Check ( uint current_ )","title":"function Check"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#function-setmtu","text":"inline void SetMtu ( uint mtu )","title":"function SetMtu"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#function-setinterval","text":"inline void SetInterval ( uint interval )","title":"function SetInterval"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#function-setnodelay","text":"inline void SetNoDelay ( uint nodelay , uint interval = INTERVAL , int resend = 0 , bool nocwnd = false )","title":"function SetNoDelay"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#function-setwindowsize","text":"inline void SetWindowSize ( uint sendWindow , uint receiveWindow )","title":"function SetWindowSize"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-rto_ndl","text":"const int RTO_NDL = 30 ;","title":"variable RTO_NDL"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-rto_min","text":"const int RTO_MIN = 100 ;","title":"variable RTO_MIN"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-rto_def","text":"const int RTO_DEF = 200 ;","title":"variable RTO_DEF"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-rto_max","text":"const int RTO_MAX = 60000 ;","title":"variable RTO_MAX"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-cmd_push","text":"const int CMD_PUSH = 81 ;","title":"variable CMD_PUSH"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-cmd_ack","text":"const int CMD_ACK = 82 ;","title":"variable CMD_ACK"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-cmd_wask","text":"const int CMD_WASK = 83 ;","title":"variable CMD_WASK"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-cmd_wins","text":"const int CMD_WINS = 84 ;","title":"variable CMD_WINS"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-ask_send","text":"const int ASK_SEND = 1 ;","title":"variable ASK_SEND"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-ask_tell","text":"const int ASK_TELL = 2 ;","title":"variable ASK_TELL"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-wnd_snd","text":"const int WND_SND = 32 ;","title":"variable WND_SND"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-wnd_rcv","text":"const int WND_RCV = 128 ;","title":"variable WND_RCV"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-mtu_def","text":"const int MTU_DEF = 1200 ;","title":"variable MTU_DEF"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-ack_fast","text":"const int ACK_FAST = 3 ;","title":"variable ACK_FAST"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-interval","text":"const int INTERVAL = 100 ;","title":"variable INTERVAL"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-overhead","text":"const int OVERHEAD = 24 ;","title":"variable OVERHEAD"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-deadlink","text":"const int DEADLINK = 20 ;","title":"variable DEADLINK"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-thresh_init","text":"const int THRESH_INIT = 2 ;","title":"variable THRESH_INIT"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-thresh_min","text":"const int THRESH_MIN = 2 ;","title":"variable THRESH_MIN"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-probe_init","text":"const int PROBE_INIT = 7000 ;","title":"variable PROBE_INIT"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-probe_limit","text":"const int PROBE_LIMIT = 120000 ;","title":"variable PROBE_LIMIT"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-fastack_limit","text":"const int FASTACK_LIMIT = 5 ;","title":"variable FASTACK_LIMIT"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Kcp/#variable-waitsnd","text":"int WaitSnd => snd_buf . Count + snd_queue . Count ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable WaitSnd"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClient/","text":"kcp2k::KcpClient Public Functions Name KcpClient (Action OnConnected, Action< ArraySegment< byte >> OnData, Action OnDisconnected) void Connect (string address, ushort port, bool noDelay, uint interval, int fastResend =0, bool congestionWindow =true, uint sendWindowSize =Kcp.WND_SND, uint receiveWindowSize =Kcp.WND_RCV) void Send (ArraySegment< byte > segment, KcpChannel channel) void Disconnect () void Tick () void Pause () void Unpause () Public Attributes Name Action OnConnected Action< ArraySegment< byte > > OnData Action OnDisconnected KcpClientConnection connection bool connected Public Functions Documentation function KcpClient inline KcpClient ( Action OnConnected , Action < ArraySegment < byte >> OnData , Action OnDisconnected ) function Connect inline void Connect ( string address , ushort port , bool noDelay , uint interval , int fastResend = 0 , bool congestionWindow = true , uint sendWindowSize = Kcp . WND_SND , uint receiveWindowSize = Kcp . WND_RCV ) function Send inline void Send ( ArraySegment < byte > segment , KcpChannel channel ) function Disconnect inline void Disconnect () function Tick inline void Tick () function Pause void Pause () function Unpause void Unpause () Public Attributes Documentation variable OnConnected Action OnConnected ; variable OnData Action < ArraySegment < byte > > OnData ; variable OnDisconnected Action OnDisconnected ; variable connection KcpClientConnection connection ; variable connected bool connected ; Updated on 29 January 2021 at 18:34:49 UTC","title":"kcp2k::KcpClient"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClient/#kcp2kkcpclient","text":"","title":"kcp2k::KcpClient"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClient/#public-functions","text":"Name KcpClient (Action OnConnected, Action< ArraySegment< byte >> OnData, Action OnDisconnected) void Connect (string address, ushort port, bool noDelay, uint interval, int fastResend =0, bool congestionWindow =true, uint sendWindowSize =Kcp.WND_SND, uint receiveWindowSize =Kcp.WND_RCV) void Send (ArraySegment< byte > segment, KcpChannel channel) void Disconnect () void Tick () void Pause () void Unpause ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClient/#public-attributes","text":"Name Action OnConnected Action< ArraySegment< byte > > OnData Action OnDisconnected KcpClientConnection connection bool connected","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClient/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClient/#function-kcpclient","text":"inline KcpClient ( Action OnConnected , Action < ArraySegment < byte >> OnData , Action OnDisconnected )","title":"function KcpClient"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClient/#function-connect","text":"inline void Connect ( string address , ushort port , bool noDelay , uint interval , int fastResend = 0 , bool congestionWindow = true , uint sendWindowSize = Kcp . WND_SND , uint receiveWindowSize = Kcp . WND_RCV )","title":"function Connect"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClient/#function-send","text":"inline void Send ( ArraySegment < byte > segment , KcpChannel channel )","title":"function Send"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClient/#function-disconnect","text":"inline void Disconnect ()","title":"function Disconnect"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClient/#function-tick","text":"inline void Tick ()","title":"function Tick"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClient/#function-pause","text":"void Pause ()","title":"function Pause"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClient/#function-unpause","text":"void Unpause ()","title":"function Unpause"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClient/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClient/#variable-onconnected","text":"Action OnConnected ;","title":"variable OnConnected"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClient/#variable-ondata","text":"Action < ArraySegment < byte > > OnData ;","title":"variable OnData"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClient/#variable-ondisconnected","text":"Action OnDisconnected ;","title":"variable OnDisconnected"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClient/#variable-connection","text":"KcpClientConnection connection ;","title":"variable connection"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClient/#variable-connected","text":"bool connected ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable connected"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClientConnection/","text":"kcp2k::KcpClientConnection Inherits from KcpConnection Public Functions Name void Connect (string host, ushort port, bool noDelay, uint interval =Kcp.INTERVAL, int fastResend =0, bool congestionWindow =true, uint sendWindowSize =Kcp.WND_SND, uint receiveWindowSize =Kcp.WND_RCV) void RawReceive () Protected Functions Name virtual override void Dispose () virtual override void RawSend (byte [] data, int length) Additional inherited members Public Functions inherited from KcpConnection Name void Tick () void RawInput (byte [] buffer, int msgLength) void SendHandshake () void SendData (ArraySegment< byte > data, KcpChannel channel) void Disconnect () EndPoint GetRemoteEndPoint () void Pause () void Unpause () Protected Functions inherited from KcpConnection Name void SetupKcp (bool noDelay, uint interval =Kcp.INTERVAL, int fastResend =0, bool congestionWindow =true, uint sendWindowSize =Kcp.WND_SND, uint receiveWindowSize =Kcp.WND_RCV) Public Attributes inherited from KcpConnection Name Action OnAuthenticated Action< ArraySegment< byte > > OnData Action OnDisconnected const int TIMEOUT const int ReliableMaxMessageSize const int UnreliableMaxMessageSize const int PING_INTERVAL int SendQueueCount int ReceiveQueueCount int SendBufferCount int ReceiveBufferCount uint MaxSendRate uint MaxReceiveRate Protected Attributes inherited from KcpConnection Name Socket socket EndPoint remoteEndpoint Public Functions Documentation function Connect inline void Connect ( string host , ushort port , bool noDelay , uint interval = Kcp . INTERVAL , int fastResend = 0 , bool congestionWindow = true , uint sendWindowSize = Kcp . WND_SND , uint receiveWindowSize = Kcp . WND_RCV ) function RawReceive inline void RawReceive () Protected Functions Documentation function Dispose inline virtual override void Dispose () Reimplements : kcp2k::KcpConnection::Dispose function RawSend inline virtual override void RawSend ( byte [] data , int length ) Reimplements : kcp2k::KcpConnection::RawSend Updated on 29 January 2021 at 18:34:49 UTC","title":"kcp2k::KcpClientConnection"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClientConnection/#kcp2kkcpclientconnection","text":"Inherits from KcpConnection","title":"kcp2k::KcpClientConnection"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClientConnection/#public-functions","text":"Name void Connect (string host, ushort port, bool noDelay, uint interval =Kcp.INTERVAL, int fastResend =0, bool congestionWindow =true, uint sendWindowSize =Kcp.WND_SND, uint receiveWindowSize =Kcp.WND_RCV) void RawReceive ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClientConnection/#protected-functions","text":"Name virtual override void Dispose () virtual override void RawSend (byte [] data, int length)","title":"Protected Functions"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClientConnection/#additional-inherited-members","text":"Public Functions inherited from KcpConnection Name void Tick () void RawInput (byte [] buffer, int msgLength) void SendHandshake () void SendData (ArraySegment< byte > data, KcpChannel channel) void Disconnect () EndPoint GetRemoteEndPoint () void Pause () void Unpause () Protected Functions inherited from KcpConnection Name void SetupKcp (bool noDelay, uint interval =Kcp.INTERVAL, int fastResend =0, bool congestionWindow =true, uint sendWindowSize =Kcp.WND_SND, uint receiveWindowSize =Kcp.WND_RCV) Public Attributes inherited from KcpConnection Name Action OnAuthenticated Action< ArraySegment< byte > > OnData Action OnDisconnected const int TIMEOUT const int ReliableMaxMessageSize const int UnreliableMaxMessageSize const int PING_INTERVAL int SendQueueCount int ReceiveQueueCount int SendBufferCount int ReceiveBufferCount uint MaxSendRate uint MaxReceiveRate Protected Attributes inherited from KcpConnection Name Socket socket EndPoint remoteEndpoint","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClientConnection/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClientConnection/#function-connect","text":"inline void Connect ( string host , ushort port , bool noDelay , uint interval = Kcp . INTERVAL , int fastResend = 0 , bool congestionWindow = true , uint sendWindowSize = Kcp . WND_SND , uint receiveWindowSize = Kcp . WND_RCV )","title":"function Connect"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClientConnection/#function-rawreceive","text":"inline void RawReceive ()","title":"function RawReceive"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClientConnection/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClientConnection/#function-dispose","text":"inline virtual override void Dispose () Reimplements : kcp2k::KcpConnection::Dispose","title":"function Dispose"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpClientConnection/#function-rawsend","text":"inline virtual override void RawSend ( byte [] data , int length ) Reimplements : kcp2k::KcpConnection::RawSend Updated on 29 January 2021 at 18:34:49 UTC","title":"function RawSend"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/","text":"kcp2k::KcpConnection Inherited by KcpClientConnection , KcpServerConnection Public Functions Name void Tick () void RawInput (byte [] buffer, int msgLength) void SendHandshake () void SendData (ArraySegment< byte > data, KcpChannel channel) void Disconnect () EndPoint GetRemoteEndPoint () void Pause () void Unpause () Protected Functions Name void SetupKcp (bool noDelay, uint interval =Kcp.INTERVAL, int fastResend =0, bool congestionWindow =true, uint sendWindowSize =Kcp.WND_SND, uint receiveWindowSize =Kcp.WND_RCV) virtual abstract void RawSend (byte [] data, int length) =0 virtual void Dispose () Public Attributes Name Action OnAuthenticated Action< ArraySegment< byte > > OnData Action OnDisconnected const int TIMEOUT const int ReliableMaxMessageSize const int UnreliableMaxMessageSize const int PING_INTERVAL int SendQueueCount int ReceiveQueueCount int SendBufferCount int ReceiveBufferCount uint MaxSendRate uint MaxReceiveRate Protected Attributes Name Socket socket EndPoint remoteEndpoint Public Functions Documentation function Tick inline void Tick () function RawInput inline void RawInput ( byte [] buffer , int msgLength ) function SendHandshake inline void SendHandshake () function SendData inline void SendData ( ArraySegment < byte > data , KcpChannel channel ) function Disconnect inline void Disconnect () function GetRemoteEndPoint EndPoint GetRemoteEndPoint () function Pause void Pause () function Unpause inline void Unpause () Protected Functions Documentation function SetupKcp inline void SetupKcp ( bool noDelay , uint interval = Kcp . INTERVAL , int fastResend = 0 , bool congestionWindow = true , uint sendWindowSize = Kcp . WND_SND , uint receiveWindowSize = Kcp . WND_RCV ) function RawSend virtual abstract void RawSend ( byte [] data , int length ) = 0 Reimplemented by : kcp2k::KcpServerConnection::RawSend , kcp2k::KcpClientConnection::RawSend function Dispose inline virtual void Dispose () Reimplemented by : kcp2k::KcpClientConnection::Dispose Public Attributes Documentation variable OnAuthenticated Action OnAuthenticated ; variable OnData Action < ArraySegment < byte > > OnData ; variable OnDisconnected Action OnDisconnected ; variable TIMEOUT const int TIMEOUT = 10000 ; variable ReliableMaxMessageSize const int ReliableMaxMessageSize = ( Kcp . MTU_DEF - Kcp . OVERHEAD - CHANNEL_HEADER_SIZE ) * ( Kcp . WND_RCV - 1 ) - 1 ; variable UnreliableMaxMessageSize const int UnreliableMaxMessageSize = Kcp . MTU_DEF - CHANNEL_HEADER_SIZE ; variable PING_INTERVAL const int PING_INTERVAL = 1000 ; variable SendQueueCount int SendQueueCount => kcp . snd_queue . Count ; variable ReceiveQueueCount int ReceiveQueueCount => kcp . rcv_queue . Count ; variable SendBufferCount int SendBufferCount => kcp . snd_buf . Count ; variable ReceiveBufferCount int ReceiveBufferCount => kcp . rcv_buf . Count ; variable MaxSendRate uint MaxSendRate => kcp . snd_wnd * kcp . mtu * 1000 / kcp . interval ; variable MaxReceiveRate uint MaxReceiveRate => kcp . rcv_wnd * kcp . mtu * 1000 / kcp . interval ; Protected Attributes Documentation variable socket Socket socket ; variable remoteEndpoint EndPoint remoteEndpoint ; Updated on 29 January 2021 at 18:34:50 UTC","title":"kcp2k::KcpConnection"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#kcp2kkcpconnection","text":"Inherited by KcpClientConnection , KcpServerConnection","title":"kcp2k::KcpConnection"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#public-functions","text":"Name void Tick () void RawInput (byte [] buffer, int msgLength) void SendHandshake () void SendData (ArraySegment< byte > data, KcpChannel channel) void Disconnect () EndPoint GetRemoteEndPoint () void Pause () void Unpause ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#protected-functions","text":"Name void SetupKcp (bool noDelay, uint interval =Kcp.INTERVAL, int fastResend =0, bool congestionWindow =true, uint sendWindowSize =Kcp.WND_SND, uint receiveWindowSize =Kcp.WND_RCV) virtual abstract void RawSend (byte [] data, int length) =0 virtual void Dispose ()","title":"Protected Functions"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#public-attributes","text":"Name Action OnAuthenticated Action< ArraySegment< byte > > OnData Action OnDisconnected const int TIMEOUT const int ReliableMaxMessageSize const int UnreliableMaxMessageSize const int PING_INTERVAL int SendQueueCount int ReceiveQueueCount int SendBufferCount int ReceiveBufferCount uint MaxSendRate uint MaxReceiveRate","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#protected-attributes","text":"Name Socket socket EndPoint remoteEndpoint","title":"Protected Attributes"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#function-tick","text":"inline void Tick ()","title":"function Tick"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#function-rawinput","text":"inline void RawInput ( byte [] buffer , int msgLength )","title":"function RawInput"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#function-sendhandshake","text":"inline void SendHandshake ()","title":"function SendHandshake"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#function-senddata","text":"inline void SendData ( ArraySegment < byte > data , KcpChannel channel )","title":"function SendData"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#function-disconnect","text":"inline void Disconnect ()","title":"function Disconnect"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#function-getremoteendpoint","text":"EndPoint GetRemoteEndPoint ()","title":"function GetRemoteEndPoint"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#function-pause","text":"void Pause ()","title":"function Pause"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#function-unpause","text":"inline void Unpause ()","title":"function Unpause"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#function-setupkcp","text":"inline void SetupKcp ( bool noDelay , uint interval = Kcp . INTERVAL , int fastResend = 0 , bool congestionWindow = true , uint sendWindowSize = Kcp . WND_SND , uint receiveWindowSize = Kcp . WND_RCV )","title":"function SetupKcp"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#function-rawsend","text":"virtual abstract void RawSend ( byte [] data , int length ) = 0 Reimplemented by : kcp2k::KcpServerConnection::RawSend , kcp2k::KcpClientConnection::RawSend","title":"function RawSend"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#function-dispose","text":"inline virtual void Dispose () Reimplemented by : kcp2k::KcpClientConnection::Dispose","title":"function Dispose"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#variable-onauthenticated","text":"Action OnAuthenticated ;","title":"variable OnAuthenticated"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#variable-ondata","text":"Action < ArraySegment < byte > > OnData ;","title":"variable OnData"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#variable-ondisconnected","text":"Action OnDisconnected ;","title":"variable OnDisconnected"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#variable-timeout","text":"const int TIMEOUT = 10000 ;","title":"variable TIMEOUT"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#variable-reliablemaxmessagesize","text":"const int ReliableMaxMessageSize = ( Kcp . MTU_DEF - Kcp . OVERHEAD - CHANNEL_HEADER_SIZE ) * ( Kcp . WND_RCV - 1 ) - 1 ;","title":"variable ReliableMaxMessageSize"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#variable-unreliablemaxmessagesize","text":"const int UnreliableMaxMessageSize = Kcp . MTU_DEF - CHANNEL_HEADER_SIZE ;","title":"variable UnreliableMaxMessageSize"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#variable-ping_interval","text":"const int PING_INTERVAL = 1000 ;","title":"variable PING_INTERVAL"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#variable-sendqueuecount","text":"int SendQueueCount => kcp . snd_queue . Count ;","title":"variable SendQueueCount"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#variable-receivequeuecount","text":"int ReceiveQueueCount => kcp . rcv_queue . Count ;","title":"variable ReceiveQueueCount"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#variable-sendbuffercount","text":"int SendBufferCount => kcp . snd_buf . Count ;","title":"variable SendBufferCount"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#variable-receivebuffercount","text":"int ReceiveBufferCount => kcp . rcv_buf . Count ;","title":"variable ReceiveBufferCount"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#variable-maxsendrate","text":"uint MaxSendRate => kcp . snd_wnd * kcp . mtu * 1000 / kcp . interval ;","title":"variable MaxSendRate"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#variable-maxreceiverate","text":"uint MaxReceiveRate => kcp . rcv_wnd * kcp . mtu * 1000 / kcp . interval ;","title":"variable MaxReceiveRate"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#variable-socket","text":"Socket socket ;","title":"variable socket"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpConnection/#variable-remoteendpoint","text":"EndPoint remoteEndpoint ; Updated on 29 January 2021 at 18:34:50 UTC","title":"variable remoteEndpoint"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/","text":"kcp2k::KcpServer Public Functions Name KcpServer (Action< int > OnConnected, Action< int, ArraySegment< byte >> OnData, Action< int > OnDisconnected, bool NoDelay, uint Interval, int FastResend =0, bool CongestionWindow =true, uint SendWindowSize =Kcp.WND_SND, uint ReceiveWindowSize =Kcp.WND_RCV) bool IsActive () void Start (ushort port) void Send (int connectionId, ArraySegment< byte > segment, KcpChannel channel) void Disconnect (int connectionId) string GetClientAddress (int connectionId) void Tick () void Stop () void Pause () void Unpause () Public Attributes Name Action< int > OnConnected Action< int, ArraySegment< byte > > OnData Action< int > OnDisconnected bool NoDelay uint Interval int FastResend bool CongestionWindow uint SendWindowSize uint ReceiveWindowSize Dictionary< int, KcpServerConnection > connections Public Functions Documentation function KcpServer inline KcpServer ( Action < int > OnConnected , Action < int , ArraySegment < byte >> OnData , Action < int > OnDisconnected , bool NoDelay , uint Interval , int FastResend = 0 , bool CongestionWindow = true , uint SendWindowSize = Kcp . WND_SND , uint ReceiveWindowSize = Kcp . WND_RCV ) function IsActive bool IsActive () function Start inline void Start ( ushort port ) function Send inline void Send ( int connectionId , ArraySegment < byte > segment , KcpChannel channel ) function Disconnect inline void Disconnect ( int connectionId ) function GetClientAddress inline string GetClientAddress ( int connectionId ) function Tick inline void Tick () function Stop inline void Stop () function Pause inline void Pause () function Unpause inline void Unpause () Public Attributes Documentation variable OnConnected Action < int > OnConnected ; variable OnData Action < int , ArraySegment < byte > > OnData ; variable OnDisconnected Action < int > OnDisconnected ; variable NoDelay bool NoDelay ; variable Interval uint Interval ; variable FastResend int FastResend ; variable CongestionWindow bool CongestionWindow ; variable SendWindowSize uint SendWindowSize ; variable ReceiveWindowSize uint ReceiveWindowSize ; variable connections Dictionary < int , KcpServerConnection > connections = new Dictionary < int , [ KcpServerConnection ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classkcp2k_1_1KcpServerConnection / ) > (); Updated on 29 January 2021 at 18:34:50 UTC","title":"kcp2k::KcpServer"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#kcp2kkcpserver","text":"","title":"kcp2k::KcpServer"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#public-functions","text":"Name KcpServer (Action< int > OnConnected, Action< int, ArraySegment< byte >> OnData, Action< int > OnDisconnected, bool NoDelay, uint Interval, int FastResend =0, bool CongestionWindow =true, uint SendWindowSize =Kcp.WND_SND, uint ReceiveWindowSize =Kcp.WND_RCV) bool IsActive () void Start (ushort port) void Send (int connectionId, ArraySegment< byte > segment, KcpChannel channel) void Disconnect (int connectionId) string GetClientAddress (int connectionId) void Tick () void Stop () void Pause () void Unpause ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#public-attributes","text":"Name Action< int > OnConnected Action< int, ArraySegment< byte > > OnData Action< int > OnDisconnected bool NoDelay uint Interval int FastResend bool CongestionWindow uint SendWindowSize uint ReceiveWindowSize Dictionary< int, KcpServerConnection > connections","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#function-kcpserver","text":"inline KcpServer ( Action < int > OnConnected , Action < int , ArraySegment < byte >> OnData , Action < int > OnDisconnected , bool NoDelay , uint Interval , int FastResend = 0 , bool CongestionWindow = true , uint SendWindowSize = Kcp . WND_SND , uint ReceiveWindowSize = Kcp . WND_RCV )","title":"function KcpServer"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#function-isactive","text":"bool IsActive ()","title":"function IsActive"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#function-start","text":"inline void Start ( ushort port )","title":"function Start"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#function-send","text":"inline void Send ( int connectionId , ArraySegment < byte > segment , KcpChannel channel )","title":"function Send"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#function-disconnect","text":"inline void Disconnect ( int connectionId )","title":"function Disconnect"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#function-getclientaddress","text":"inline string GetClientAddress ( int connectionId )","title":"function GetClientAddress"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#function-tick","text":"inline void Tick ()","title":"function Tick"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#function-stop","text":"inline void Stop ()","title":"function Stop"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#function-pause","text":"inline void Pause ()","title":"function Pause"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#function-unpause","text":"inline void Unpause ()","title":"function Unpause"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#variable-onconnected","text":"Action < int > OnConnected ;","title":"variable OnConnected"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#variable-ondata","text":"Action < int , ArraySegment < byte > > OnData ;","title":"variable OnData"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#variable-ondisconnected","text":"Action < int > OnDisconnected ;","title":"variable OnDisconnected"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#variable-nodelay","text":"bool NoDelay ;","title":"variable NoDelay"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#variable-interval","text":"uint Interval ;","title":"variable Interval"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#variable-fastresend","text":"int FastResend ;","title":"variable FastResend"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#variable-congestionwindow","text":"bool CongestionWindow ;","title":"variable CongestionWindow"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#variable-sendwindowsize","text":"uint SendWindowSize ;","title":"variable SendWindowSize"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#variable-receivewindowsize","text":"uint ReceiveWindowSize ;","title":"variable ReceiveWindowSize"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServer/#variable-connections","text":"Dictionary < int , KcpServerConnection > connections = new Dictionary < int , [ KcpServerConnection ]( / Documentation / Cops % 20 And % 20 Robbers / Classes / classkcp2k_1_1KcpServerConnection / ) > (); Updated on 29 January 2021 at 18:34:50 UTC","title":"variable connections"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServerConnection/","text":"kcp2k::KcpServerConnection Inherits from KcpConnection Public Functions Name KcpServerConnection (Socket socket, EndPoint remoteEndpoint, bool noDelay, uint interval =Kcp.INTERVAL, int fastResend =0, bool congestionWindow =true, uint sendWindowSize =Kcp.WND_SND, uint receiveWindowSize =Kcp.WND_RCV) Protected Functions Name virtual override void RawSend (byte [] data, int length) Additional inherited members Public Functions inherited from KcpConnection Name void Tick () void RawInput (byte [] buffer, int msgLength) void SendHandshake () void SendData (ArraySegment< byte > data, KcpChannel channel) void Disconnect () EndPoint GetRemoteEndPoint () void Pause () void Unpause () Protected Functions inherited from KcpConnection Name void SetupKcp (bool noDelay, uint interval =Kcp.INTERVAL, int fastResend =0, bool congestionWindow =true, uint sendWindowSize =Kcp.WND_SND, uint receiveWindowSize =Kcp.WND_RCV) virtual void Dispose () Public Attributes inherited from KcpConnection Name Action OnAuthenticated Action< ArraySegment< byte > > OnData Action OnDisconnected const int TIMEOUT const int ReliableMaxMessageSize const int UnreliableMaxMessageSize const int PING_INTERVAL int SendQueueCount int ReceiveQueueCount int SendBufferCount int ReceiveBufferCount uint MaxSendRate uint MaxReceiveRate Protected Attributes inherited from KcpConnection Name Socket socket EndPoint remoteEndpoint Public Functions Documentation function KcpServerConnection inline KcpServerConnection ( Socket socket , EndPoint remoteEndpoint , bool noDelay , uint interval = Kcp . INTERVAL , int fastResend = 0 , bool congestionWindow = true , uint sendWindowSize = Kcp . WND_SND , uint receiveWindowSize = Kcp . WND_RCV ) Protected Functions Documentation function RawSend inline virtual override void RawSend ( byte [] data , int length ) Reimplements : kcp2k::KcpConnection::RawSend Updated on 29 January 2021 at 18:34:50 UTC","title":"kcp2k::KcpServerConnection"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServerConnection/#kcp2kkcpserverconnection","text":"Inherits from KcpConnection","title":"kcp2k::KcpServerConnection"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServerConnection/#public-functions","text":"Name KcpServerConnection (Socket socket, EndPoint remoteEndpoint, bool noDelay, uint interval =Kcp.INTERVAL, int fastResend =0, bool congestionWindow =true, uint sendWindowSize =Kcp.WND_SND, uint receiveWindowSize =Kcp.WND_RCV)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServerConnection/#protected-functions","text":"Name virtual override void RawSend (byte [] data, int length)","title":"Protected Functions"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServerConnection/#additional-inherited-members","text":"Public Functions inherited from KcpConnection Name void Tick () void RawInput (byte [] buffer, int msgLength) void SendHandshake () void SendData (ArraySegment< byte > data, KcpChannel channel) void Disconnect () EndPoint GetRemoteEndPoint () void Pause () void Unpause () Protected Functions inherited from KcpConnection Name void SetupKcp (bool noDelay, uint interval =Kcp.INTERVAL, int fastResend =0, bool congestionWindow =true, uint sendWindowSize =Kcp.WND_SND, uint receiveWindowSize =Kcp.WND_RCV) virtual void Dispose () Public Attributes inherited from KcpConnection Name Action OnAuthenticated Action< ArraySegment< byte > > OnData Action OnDisconnected const int TIMEOUT const int ReliableMaxMessageSize const int UnreliableMaxMessageSize const int PING_INTERVAL int SendQueueCount int ReceiveQueueCount int SendBufferCount int ReceiveBufferCount uint MaxSendRate uint MaxReceiveRate Protected Attributes inherited from KcpConnection Name Socket socket EndPoint remoteEndpoint","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServerConnection/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServerConnection/#function-kcpserverconnection","text":"inline KcpServerConnection ( Socket socket , EndPoint remoteEndpoint , bool noDelay , uint interval = Kcp . INTERVAL , int fastResend = 0 , bool congestionWindow = true , uint sendWindowSize = Kcp . WND_SND , uint receiveWindowSize = Kcp . WND_RCV )","title":"function KcpServerConnection"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServerConnection/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpServerConnection/#function-rawsend","text":"inline virtual override void RawSend ( byte [] data , int length ) Reimplements : kcp2k::KcpConnection::RawSend Updated on 29 January 2021 at 18:34:50 UTC","title":"function RawSend"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/","text":"kcp2k::KcpTransport Inherits from Transport , MonoBehaviour Public Functions Name virtual override bool Available () Is this transport available in the current platform? virtual override bool ClientConnected () Determines if we are currently connected to the server virtual override void ClientConnect (string address) Establish a connection to a server virtual override void ClientSend (int channelId, ArraySegment< byte > segment) Send data to the server virtual override void ClientDisconnect () Disconnect this client from the server void LateUpdate () virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery virtual override bool ServerActive () Determines if the server is up and running virtual override void ServerStart () Start listening for clients virtual override void ServerSend (int connectionId, int channelId, ArraySegment< byte > segment) Send data to a client. virtual override bool ServerDisconnect (int connectionId) Disconnect a client from this server. Useful to kick people out. virtual override string ServerGetClientAddress (int connectionId) Get the client address virtual override void ServerStop () Stop listening for clients and disconnect all existing clients virtual override void Shutdown () Shut down the transport, both as client and server virtual override int GetMaxPacketSize (int channelId =Channels.DefaultReliable) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. override string ToString () int GetAverageMaxSendRate () int GetAverageMaxReceiveRate () string PrettyBytes (long bytes) Public Attributes Name const string Scheme ushort Port bool NoDelay uint Interval int FastResend bool CongestionWindow uint SendWindowSize uint ReceiveWindowSize bool debugLog bool statisticsGUI bool statisticsLog Additional inherited members Public Functions inherited from Transport Name void Update () virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor Public Attributes inherited from Transport Name Transport activeTransport The current transport used by Mirror . Action OnClientConnected Notify subscribers when when this client establish a successful connection to the server Action< ArraySegment< byte >, int > OnClientDataReceived Notify subscribers when this client receive data from the server Action< Exception > OnClientError Notify subscribers when this client encounters an error communicating with the server Action OnClientDisconnected Notify subscribers when this client disconnects from the server Action< int > OnServerConnected Notify subscribers when a client connects to this server Action< int, ArraySegment< byte >, int > OnServerDataReceived Notify subscribers when this server receives data from the client Action< int, Exception > OnServerError Notify subscribers when this server has some problem communicating with the client Action< int > OnServerDisconnected Notify subscribers when a client disconnects from this server Public Functions Documentation function Available virtual override bool Available () Is this transport available in the current platform? Return : True if this transport works in the current platform Reimplements : Mirror::Transport::Available Some transports might only be available in mobile Many will not work in webgl Example usage: return Application.platform == RuntimePlatform.WebGLPlayer function ClientConnected virtual override bool ClientConnected () Determines if we are currently connected to the server Return : True if a connection has been established to the server Reimplements : Mirror::Transport::ClientConnected function ClientConnect inline virtual override void ClientConnect ( string address ) Establish a connection to a server Parameters : address The IP address or FQDN of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect function ClientSend inline virtual override void ClientSend ( int channelId , ArraySegment < byte > segment ) Send data to the server Parameters : channelId The channel to use. 0 is the default channel, but some transports might want to provide unreliable, encrypted, compressed, or any other feature as new channels segment The data to send to the server. Will be recycled after returning, so either use it directly or copy it internally. This allows for allocation-free sends! Reimplements : Mirror::Transport::ClientSend function ClientDisconnect virtual override void ClientDisconnect () Disconnect this client from the server Reimplements : Mirror::Transport::ClientDisconnect function LateUpdate inline void LateUpdate () function ServerUri inline virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery Return : the url at which this server can be reached Reimplements : Mirror::Transport::ServerUri function ServerActive virtual override bool ServerActive () Determines if the server is up and running Return : true if the transport is ready for connections from clients Reimplements : Mirror::Transport::ServerActive function ServerStart virtual override void ServerStart () Start listening for clients Reimplements : Mirror::Transport::ServerStart function ServerSend inline virtual override void ServerSend ( int connectionId , int channelId , ArraySegment < byte > segment ) Send data to a client. Parameters : connectionId The client connection id to send the data to channelId The channel to be used. Transports can use channels to implement other features such as unreliable, encryption, compression, etc... data Reimplements : Mirror::Transport::ServerSend function ServerDisconnect inline virtual override bool ServerDisconnect ( int connectionId ) Disconnect a client from this server. Useful to kick people out. Parameters : connectionId the id of the client to disconnect Return : true if the client was kicked Reimplements : Mirror::Transport::ServerDisconnect function ServerGetClientAddress virtual override string ServerGetClientAddress ( int connectionId ) Get the client address Parameters : connectionId id of the client Return : address of the client Reimplements : Mirror::Transport::ServerGetClientAddress function ServerStop virtual override void ServerStop () Stop listening for clients and disconnect all existing clients Reimplements : Mirror::Transport::ServerStop function Shutdown inline virtual override void Shutdown () Shut down the transport, both as client and server Reimplements : Mirror::Transport::Shutdown function GetMaxPacketSize inline virtual override int GetMaxPacketSize ( int channelId = Channels . DefaultReliable ) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. Parameters : channelId channel id Return : the size in bytes that can be sent via the provided channel Reimplements : Mirror::Transport::GetMaxPacketSize GetMaxPacketSize needs to return a value at all times. Even if the Transport isn't running, or isn't Available() . This is because Fallback and Multiplex transports need to find the smallest possible packet size at runtime. function ToString inline override string ToString () function GetAverageMaxSendRate int GetAverageMaxSendRate () function GetAverageMaxReceiveRate int GetAverageMaxReceiveRate () function PrettyBytes static inline string PrettyBytes ( long bytes ) Public Attributes Documentation variable Scheme const string Scheme = \"kcp\" ; variable Port ushort Port = 7777 ; variable NoDelay bool NoDelay = true ; variable Interval uint Interval = 10 ; variable FastResend int FastResend = 2 ; variable CongestionWindow bool CongestionWindow = false ; variable SendWindowSize uint SendWindowSize = 4096 ; variable ReceiveWindowSize uint ReceiveWindowSize = 4096 ; variable debugLog bool debugLog ; variable statisticsGUI bool statisticsGUI ; variable statisticsLog bool statisticsLog ; Updated on 29 January 2021 at 18:34:50 UTC","title":"kcp2k::KcpTransport"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#kcp2kkcptransport","text":"Inherits from Transport , MonoBehaviour","title":"kcp2k::KcpTransport"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#public-functions","text":"Name virtual override bool Available () Is this transport available in the current platform? virtual override bool ClientConnected () Determines if we are currently connected to the server virtual override void ClientConnect (string address) Establish a connection to a server virtual override void ClientSend (int channelId, ArraySegment< byte > segment) Send data to the server virtual override void ClientDisconnect () Disconnect this client from the server void LateUpdate () virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery virtual override bool ServerActive () Determines if the server is up and running virtual override void ServerStart () Start listening for clients virtual override void ServerSend (int connectionId, int channelId, ArraySegment< byte > segment) Send data to a client. virtual override bool ServerDisconnect (int connectionId) Disconnect a client from this server. Useful to kick people out. virtual override string ServerGetClientAddress (int connectionId) Get the client address virtual override void ServerStop () Stop listening for clients and disconnect all existing clients virtual override void Shutdown () Shut down the transport, both as client and server virtual override int GetMaxPacketSize (int channelId =Channels.DefaultReliable) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. override string ToString () int GetAverageMaxSendRate () int GetAverageMaxReceiveRate () string PrettyBytes (long bytes)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#public-attributes","text":"Name const string Scheme ushort Port bool NoDelay uint Interval int FastResend bool CongestionWindow uint SendWindowSize uint ReceiveWindowSize bool debugLog bool statisticsGUI bool statisticsLog","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#additional-inherited-members","text":"Public Functions inherited from Transport Name void Update () virtual void OnApplicationQuit () called when quitting the application by closing the window / pressing stop in the editor Public Attributes inherited from Transport Name Transport activeTransport The current transport used by Mirror . Action OnClientConnected Notify subscribers when when this client establish a successful connection to the server Action< ArraySegment< byte >, int > OnClientDataReceived Notify subscribers when this client receive data from the server Action< Exception > OnClientError Notify subscribers when this client encounters an error communicating with the server Action OnClientDisconnected Notify subscribers when this client disconnects from the server Action< int > OnServerConnected Notify subscribers when a client connects to this server Action< int, ArraySegment< byte >, int > OnServerDataReceived Notify subscribers when this server receives data from the client Action< int, Exception > OnServerError Notify subscribers when this server has some problem communicating with the client Action< int > OnServerDisconnected Notify subscribers when a client disconnects from this server","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#function-available","text":"virtual override bool Available () Is this transport available in the current platform? Return : True if this transport works in the current platform Reimplements : Mirror::Transport::Available Some transports might only be available in mobile Many will not work in webgl Example usage: return Application.platform == RuntimePlatform.WebGLPlayer","title":"function Available"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#function-clientconnected","text":"virtual override bool ClientConnected () Determines if we are currently connected to the server Return : True if a connection has been established to the server Reimplements : Mirror::Transport::ClientConnected","title":"function ClientConnected"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#function-clientconnect","text":"inline virtual override void ClientConnect ( string address ) Establish a connection to a server Parameters : address The IP address or FQDN of the server we are trying to connect to Reimplements : Mirror::Transport::ClientConnect","title":"function ClientConnect"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#function-clientsend","text":"inline virtual override void ClientSend ( int channelId , ArraySegment < byte > segment ) Send data to the server Parameters : channelId The channel to use. 0 is the default channel, but some transports might want to provide unreliable, encrypted, compressed, or any other feature as new channels segment The data to send to the server. Will be recycled after returning, so either use it directly or copy it internally. This allows for allocation-free sends! Reimplements : Mirror::Transport::ClientSend","title":"function ClientSend"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#function-clientdisconnect","text":"virtual override void ClientDisconnect () Disconnect this client from the server Reimplements : Mirror::Transport::ClientDisconnect","title":"function ClientDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#function-lateupdate","text":"inline void LateUpdate ()","title":"function LateUpdate"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#function-serveruri","text":"inline virtual override Uri ServerUri () Retrieves the address of this server. Useful for network discovery Return : the url at which this server can be reached Reimplements : Mirror::Transport::ServerUri","title":"function ServerUri"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#function-serveractive","text":"virtual override bool ServerActive () Determines if the server is up and running Return : true if the transport is ready for connections from clients Reimplements : Mirror::Transport::ServerActive","title":"function ServerActive"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#function-serverstart","text":"virtual override void ServerStart () Start listening for clients Reimplements : Mirror::Transport::ServerStart","title":"function ServerStart"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#function-serversend","text":"inline virtual override void ServerSend ( int connectionId , int channelId , ArraySegment < byte > segment ) Send data to a client. Parameters : connectionId The client connection id to send the data to channelId The channel to be used. Transports can use channels to implement other features such as unreliable, encryption, compression, etc... data Reimplements : Mirror::Transport::ServerSend","title":"function ServerSend"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#function-serverdisconnect","text":"inline virtual override bool ServerDisconnect ( int connectionId ) Disconnect a client from this server. Useful to kick people out. Parameters : connectionId the id of the client to disconnect Return : true if the client was kicked Reimplements : Mirror::Transport::ServerDisconnect","title":"function ServerDisconnect"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#function-servergetclientaddress","text":"virtual override string ServerGetClientAddress ( int connectionId ) Get the client address Parameters : connectionId id of the client Return : address of the client Reimplements : Mirror::Transport::ServerGetClientAddress","title":"function ServerGetClientAddress"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#function-serverstop","text":"virtual override void ServerStop () Stop listening for clients and disconnect all existing clients Reimplements : Mirror::Transport::ServerStop","title":"function ServerStop"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#function-shutdown","text":"inline virtual override void Shutdown () Shut down the transport, both as client and server Reimplements : Mirror::Transport::Shutdown","title":"function Shutdown"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#function-getmaxpacketsize","text":"inline virtual override int GetMaxPacketSize ( int channelId = Channels . DefaultReliable ) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. Parameters : channelId channel id Return : the size in bytes that can be sent via the provided channel Reimplements : Mirror::Transport::GetMaxPacketSize GetMaxPacketSize needs to return a value at all times. Even if the Transport isn't running, or isn't Available() . This is because Fallback and Multiplex transports need to find the smallest possible packet size at runtime.","title":"function GetMaxPacketSize"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#function-tostring","text":"inline override string ToString ()","title":"function ToString"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#function-getaveragemaxsendrate","text":"int GetAverageMaxSendRate ()","title":"function GetAverageMaxSendRate"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#function-getaveragemaxreceiverate","text":"int GetAverageMaxReceiveRate ()","title":"function GetAverageMaxReceiveRate"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#function-prettybytes","text":"static inline string PrettyBytes ( long bytes )","title":"function PrettyBytes"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#variable-scheme","text":"const string Scheme = \"kcp\" ;","title":"variable Scheme"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#variable-port","text":"ushort Port = 7777 ;","title":"variable Port"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#variable-nodelay","text":"bool NoDelay = true ;","title":"variable NoDelay"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#variable-interval","text":"uint Interval = 10 ;","title":"variable Interval"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#variable-fastresend","text":"int FastResend = 2 ;","title":"variable FastResend"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#variable-congestionwindow","text":"bool CongestionWindow = false ;","title":"variable CongestionWindow"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#variable-sendwindowsize","text":"uint SendWindowSize = 4096 ;","title":"variable SendWindowSize"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#variable-receivewindowsize","text":"uint ReceiveWindowSize = 4096 ;","title":"variable ReceiveWindowSize"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#variable-debuglog","text":"bool debugLog ;","title":"variable debugLog"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#variable-statisticsgui","text":"bool statisticsGUI ;","title":"variable statisticsGUI"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1KcpTransport/#variable-statisticslog","text":"bool statisticsLog ; Updated on 29 January 2021 at 18:34:50 UTC","title":"variable statisticsLog"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Log/","text":"kcp2k::Log Public Attributes Name Action< string > Info Action< string > Warning Action< string > Error Public Attributes Documentation variable Info static Action < string > Info = Console . WriteLine ; variable Warning static Action < string > Warning = Console . WriteLine ; variable Error static Action < string > Error = Console . Error . WriteLine ; Updated on 29 January 2021 at 18:34:50 UTC","title":"kcp2k::Log"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Log/#kcp2klog","text":"","title":"kcp2k::Log"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Log/#public-attributes","text":"Name Action< string > Info Action< string > Warning Action< string > Error","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Log/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Log/#variable-info","text":"static Action < string > Info = Console . WriteLine ;","title":"variable Info"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Log/#variable-warning","text":"static Action < string > Warning = Console . WriteLine ;","title":"variable Warning"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Log/#variable-error","text":"static Action < string > Error = Console . Error . WriteLine ; Updated on 29 January 2021 at 18:34:50 UTC","title":"variable Error"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Segment/","text":"kcp2k::Segment Public Functions Name Segment Take () void Return (Segment seg) Public Functions Documentation function Take static inline Segment Take () function Return static inline void Return ( Segment seg ) Updated on 29 January 2021 at 18:34:50 UTC","title":"kcp2k::Segment"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Segment/#kcp2ksegment","text":"","title":"kcp2k::Segment"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Segment/#public-functions","text":"Name Segment Take () void Return (Segment seg)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Segment/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Segment/#function-take","text":"static inline Segment Take ()","title":"function Take"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Segment/#function-return","text":"static inline void Return ( Segment seg ) Updated on 29 January 2021 at 18:34:50 UTC","title":"function Return"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Utils/","text":"kcp2k::Utils Public Functions Name unsafe bool SegmentsEqual (ArraySegment< byte > a, ArraySegment< byte > b) int Clamp (int value, int min, int max) int Encode8u (byte [] p, int offset, byte c) int Decode8u (byte [] p, int offset, ref byte c) int Encode16U (byte [] p, int offset, ushort w) int Decode16U (byte [] p, int offset, ref ushort c) int Encode32U (byte [] p, int offset, uint l) int Decode32U (byte [] p, int offset, ref uint c) int TimeDiff (uint later, uint earlier) Public Functions Documentation function SegmentsEqual static inline unsafe bool SegmentsEqual ( ArraySegment < byte > a , ArraySegment < byte > b ) function Clamp static inline int Clamp ( int value , int min , int max ) function Encode8u static inline int Encode8u ( byte [] p , int offset , byte c ) function Decode8u static inline int Decode8u ( byte [] p , int offset , ref byte c ) function Encode16U static inline int Encode16U ( byte [] p , int offset , ushort w ) function Decode16U static inline int Decode16U ( byte [] p , int offset , ref ushort c ) function Encode32U static inline int Encode32U ( byte [] p , int offset , uint l ) function Decode32U static inline int Decode32U ( byte [] p , int offset , ref uint c ) function TimeDiff static inline int TimeDiff ( uint later , uint earlier ) Updated on 29 January 2021 at 18:34:50 UTC","title":"kcp2k::Utils"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Utils/#kcp2kutils","text":"","title":"kcp2k::Utils"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Utils/#public-functions","text":"Name unsafe bool SegmentsEqual (ArraySegment< byte > a, ArraySegment< byte > b) int Clamp (int value, int min, int max) int Encode8u (byte [] p, int offset, byte c) int Decode8u (byte [] p, int offset, ref byte c) int Encode16U (byte [] p, int offset, ushort w) int Decode16U (byte [] p, int offset, ref ushort c) int Encode32U (byte [] p, int offset, uint l) int Decode32U (byte [] p, int offset, ref uint c) int TimeDiff (uint later, uint earlier)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Utils/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Utils/#function-segmentsequal","text":"static inline unsafe bool SegmentsEqual ( ArraySegment < byte > a , ArraySegment < byte > b )","title":"function SegmentsEqual"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Utils/#function-clamp","text":"static inline int Clamp ( int value , int min , int max )","title":"function Clamp"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Utils/#function-encode8u","text":"static inline int Encode8u ( byte [] p , int offset , byte c )","title":"function Encode8u"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Utils/#function-decode8u","text":"static inline int Decode8u ( byte [] p , int offset , ref byte c )","title":"function Decode8u"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Utils/#function-encode16u","text":"static inline int Encode16U ( byte [] p , int offset , ushort w )","title":"function Encode16U"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Utils/#function-decode16u","text":"static inline int Decode16U ( byte [] p , int offset , ref ushort c )","title":"function Decode16U"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Utils/#function-encode32u","text":"static inline int Encode32U ( byte [] p , int offset , uint l )","title":"function Encode32U"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Utils/#function-decode32u","text":"static inline int Decode32U ( byte [] p , int offset , ref uint c )","title":"function Decode32U"},{"location":"Cops%20And%20Robbers/Classes/classkcp2k_1_1Utils/#function-timediff","text":"static inline int TimeDiff ( uint later , uint earlier ) Updated on 29 January 2021 at 18:34:50 UTC","title":"function TimeDiff"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1IAttackMapActions/","text":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::IAttackMapActions Public Functions Name void OnMelee (InputAction.CallbackContext context) Public Functions Documentation function OnMelee void OnMelee ( InputAction . CallbackContext context ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::IAttackMapActions"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1IAttackMapActions/#mederangedsenatorscopsandrobbersplayercontrolsiattackmapactions","text":"","title":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::IAttackMapActions"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1IAttackMapActions/#public-functions","text":"Name void OnMelee (InputAction.CallbackContext context)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1IAttackMapActions/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1IAttackMapActions/#function-onmelee","text":"void OnMelee ( InputAction . CallbackContext context ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function OnMelee"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1ICameraViewPointsActions/","text":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::ICameraViewPointsActions Public Functions Name void OnFocusPlayer (InputAction.CallbackContext context) void OnZoomOut (InputAction.CallbackContext context) void OnZoomIn (InputAction.CallbackContext context) Public Functions Documentation function OnFocusPlayer void OnFocusPlayer ( InputAction . CallbackContext context ) function OnZoomOut void OnZoomOut ( InputAction . CallbackContext context ) function OnZoomIn void OnZoomIn ( InputAction . CallbackContext context ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::ICameraViewPointsActions"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1ICameraViewPointsActions/#mederangedsenatorscopsandrobbersplayercontrolsicameraviewpointsactions","text":"","title":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::ICameraViewPointsActions"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1ICameraViewPointsActions/#public-functions","text":"Name void OnFocusPlayer (InputAction.CallbackContext context) void OnZoomOut (InputAction.CallbackContext context) void OnZoomIn (InputAction.CallbackContext context)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1ICameraViewPointsActions/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1ICameraViewPointsActions/#function-onfocusplayer","text":"void OnFocusPlayer ( InputAction . CallbackContext context )","title":"function OnFocusPlayer"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1ICameraViewPointsActions/#function-onzoomout","text":"void OnZoomOut ( InputAction . CallbackContext context )","title":"function OnZoomOut"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1ICameraViewPointsActions/#function-onzoomin","text":"void OnZoomIn ( InputAction . CallbackContext context ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function OnZoomIn"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1IKeyMapActions/","text":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::IKeyMapActions Public Functions Name void OnMoveUp (InputAction.CallbackContext context) void OnMoveDown (InputAction.CallbackContext context) void OnMoveLeft (InputAction.CallbackContext context) void OnMoveRight (InputAction.CallbackContext context) Public Functions Documentation function OnMoveUp void OnMoveUp ( InputAction . CallbackContext context ) function OnMoveDown void OnMoveDown ( InputAction . CallbackContext context ) function OnMoveLeft void OnMoveLeft ( InputAction . CallbackContext context ) function OnMoveRight void OnMoveRight ( InputAction . CallbackContext context ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::IKeyMapActions"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1IKeyMapActions/#mederangedsenatorscopsandrobbersplayercontrolsikeymapactions","text":"","title":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::IKeyMapActions"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1IKeyMapActions/#public-functions","text":"Name void OnMoveUp (InputAction.CallbackContext context) void OnMoveDown (InputAction.CallbackContext context) void OnMoveLeft (InputAction.CallbackContext context) void OnMoveRight (InputAction.CallbackContext context)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1IKeyMapActions/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1IKeyMapActions/#function-onmoveup","text":"void OnMoveUp ( InputAction . CallbackContext context )","title":"function OnMoveUp"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1IKeyMapActions/#function-onmovedown","text":"void OnMoveDown ( InputAction . CallbackContext context )","title":"function OnMoveDown"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1IKeyMapActions/#function-onmoveleft","text":"void OnMoveLeft ( InputAction . CallbackContext context )","title":"function OnMoveLeft"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1IKeyMapActions/#function-onmoveright","text":"void OnMoveRight ( InputAction . CallbackContext context ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function OnMoveRight"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1IMouseActionsActions/","text":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::IMouseActionsActions Public Functions Name void OnMousePosition (InputAction.CallbackContext context) Public Functions Documentation function OnMousePosition void OnMousePosition ( InputAction . CallbackContext context ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::IMouseActionsActions"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1IMouseActionsActions/#mederangedsenatorscopsandrobbersplayercontrolsimouseactionsactions","text":"","title":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::IMouseActionsActions"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1IMouseActionsActions/#public-functions","text":"Name void OnMousePosition (InputAction.CallbackContext context)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1IMouseActionsActions/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/interfaceMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1IMouseActionsActions/#function-onmouseposition","text":"void OnMousePosition ( InputAction . CallbackContext context ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function OnMousePosition"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IApiConnector/","text":"Mirror::Cloud::IApiConnector Used to requests and responses from the mirror api Inherited by ApiConnector Public Properties Name ListServer ListServer Public Property Documentation property ListServer ListServer ListServer ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::IApiConnector"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IApiConnector/#mirrorcloudiapiconnector","text":"Used to requests and responses from the mirror api Inherited by ApiConnector","title":"Mirror::Cloud::IApiConnector"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IApiConnector/#public-properties","text":"Name ListServer ListServer","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IApiConnector/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IApiConnector/#property-listserver","text":"ListServer ListServer ; Updated on 29 January 2021 at 18:34:48 UTC","title":"property ListServer"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IBaseApi/","text":"Mirror::Cloud::IBaseApi Inherited by IListServerClientApi , IListServerServerApi Public Functions Name void Shutdown () Cleans up any data created by the instance Public Functions Documentation function Shutdown void Shutdown () Cleans up any data created by the instance Reimplemented by : Mirror::Cloud::ListServerService::ListServerClientApi::Shutdown , Mirror::Cloud::ListServerService::ListServerServerApi::Shutdown For Example: removing server from list Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::IBaseApi"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IBaseApi/#mirrorcloudibaseapi","text":"Inherited by IListServerClientApi , IListServerServerApi","title":"Mirror::Cloud::IBaseApi"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IBaseApi/#public-functions","text":"Name void Shutdown () Cleans up any data created by the instance","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IBaseApi/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IBaseApi/#function-shutdown","text":"void Shutdown () Cleans up any data created by the instance Reimplemented by : Mirror::Cloud::ListServerService::ListServerClientApi::Shutdown , Mirror::Cloud::ListServerService::ListServerServerApi::Shutdown For Example: removing server from list Updated on 29 January 2021 at 18:34:48 UTC","title":"function Shutdown"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ICanBeJson/","text":"Mirror::Cloud::ICanBeJson Objects that can be sent to the Api must have this interface Inherited by CreatedIdJson , EmptyJson , ErrorJson , PartialServerJson , ServerCollectionJson , ServerJson Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::ICanBeJson"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ICanBeJson/#mirrorcloudicanbejson","text":"Objects that can be sent to the Api must have this interface Inherited by CreatedIdJson , EmptyJson , ErrorJson , PartialServerJson , ServerCollectionJson , ServerJson Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::ICanBeJson"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ICoroutineRunner/","text":"Mirror::Cloud::ICoroutineRunner Inherits from IUnityEqualCheck Inherited by ApiConnector Public Functions Name Coroutine StartCoroutine (IEnumerator routine) void StopCoroutine (IEnumerator routine) void StopCoroutine (Coroutine routine) Public Functions Documentation function StartCoroutine Coroutine StartCoroutine ( IEnumerator routine ) function StopCoroutine void StopCoroutine ( IEnumerator routine ) function StopCoroutine void StopCoroutine ( Coroutine routine ) Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::ICoroutineRunner"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ICoroutineRunner/#mirrorcloudicoroutinerunner","text":"Inherits from IUnityEqualCheck Inherited by ApiConnector","title":"Mirror::Cloud::ICoroutineRunner"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ICoroutineRunner/#public-functions","text":"Name Coroutine StartCoroutine (IEnumerator routine) void StopCoroutine (IEnumerator routine) void StopCoroutine (Coroutine routine)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ICoroutineRunner/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ICoroutineRunner/#function-startcoroutine","text":"Coroutine StartCoroutine ( IEnumerator routine )","title":"function StartCoroutine"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ICoroutineRunner/#function-stopcoroutine","text":"void StopCoroutine ( IEnumerator routine )","title":"function StopCoroutine"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ICoroutineRunner/#function-stopcoroutine_1","text":"void StopCoroutine ( Coroutine routine ) Updated on 29 January 2021 at 18:34:48 UTC","title":"function StopCoroutine"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IRequestCreator/","text":"Mirror::Cloud::IRequestCreator Methods to create and send UnityWebRequest Inherited by RequestCreator Public Functions Name UnityWebRequest Delete (string page) UnityWebRequest Get (string page) UnityWebRequest Patch< T > (string page, T json) UnityWebRequest Post< T > (string page, T json) void SendRequest (UnityWebRequest request, RequestSuccess onSuccess =null, RequestFail onFail =null) Sends Request to api and invokes callback when finished IEnumerator SendRequestEnumerator (UnityWebRequest request, RequestSuccess onSuccess =null, RequestFail onFail =null) Sends Request to api and invokes callback when finished Public Functions Documentation function Delete UnityWebRequest Delete ( string page ) Reimplemented by : Mirror::Cloud::RequestCreator::Delete function Get UnityWebRequest Get ( string page ) Reimplemented by : Mirror::Cloud::RequestCreator::Get function Patch< T > UnityWebRequest Patch < T > ( string page , T json ) Reimplemented by : Mirror::Cloud::RequestCreator::Patch< T > function Post< T > UnityWebRequest Post < T > ( string page , T json ) Reimplemented by : Mirror::Cloud::RequestCreator::Post< T > function SendRequest void SendRequest ( UnityWebRequest request , RequestSuccess onSuccess = null , RequestFail onFail = null ) Sends Request to api and invokes callback when finished Parameters : request onSuccess onFail Reimplemented by : Mirror::Cloud::RequestCreator::SendRequest Starts Coroutine of SendRequestEnumerator function SendRequestEnumerator IEnumerator SendRequestEnumerator ( UnityWebRequest request , RequestSuccess onSuccess = null , RequestFail onFail = null ) Sends Request to api and invokes callback when finished Parameters : request onSuccess onFail Return : Reimplemented by : Mirror::Cloud::RequestCreator::SendRequestEnumerator Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::IRequestCreator"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IRequestCreator/#mirrorcloudirequestcreator","text":"Methods to create and send UnityWebRequest Inherited by RequestCreator","title":"Mirror::Cloud::IRequestCreator"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IRequestCreator/#public-functions","text":"Name UnityWebRequest Delete (string page) UnityWebRequest Get (string page) UnityWebRequest Patch< T > (string page, T json) UnityWebRequest Post< T > (string page, T json) void SendRequest (UnityWebRequest request, RequestSuccess onSuccess =null, RequestFail onFail =null) Sends Request to api and invokes callback when finished IEnumerator SendRequestEnumerator (UnityWebRequest request, RequestSuccess onSuccess =null, RequestFail onFail =null) Sends Request to api and invokes callback when finished","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IRequestCreator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IRequestCreator/#function-delete","text":"UnityWebRequest Delete ( string page ) Reimplemented by : Mirror::Cloud::RequestCreator::Delete","title":"function Delete"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IRequestCreator/#function-get","text":"UnityWebRequest Get ( string page ) Reimplemented by : Mirror::Cloud::RequestCreator::Get","title":"function Get"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IRequestCreator/#function-patch-t","text":"UnityWebRequest Patch < T > ( string page , T json ) Reimplemented by : Mirror::Cloud::RequestCreator::Patch< T >","title":"function Patch&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IRequestCreator/#function-post-t","text":"UnityWebRequest Post < T > ( string page , T json ) Reimplemented by : Mirror::Cloud::RequestCreator::Post< T >","title":"function Post&lt; T &gt;"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IRequestCreator/#function-sendrequest","text":"void SendRequest ( UnityWebRequest request , RequestSuccess onSuccess = null , RequestFail onFail = null ) Sends Request to api and invokes callback when finished Parameters : request onSuccess onFail Reimplemented by : Mirror::Cloud::RequestCreator::SendRequest Starts Coroutine of SendRequestEnumerator","title":"function SendRequest"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IRequestCreator/#function-sendrequestenumerator","text":"IEnumerator SendRequestEnumerator ( UnityWebRequest request , RequestSuccess onSuccess = null , RequestFail onFail = null ) Sends Request to api and invokes callback when finished Parameters : request onSuccess onFail Return : Reimplemented by : Mirror::Cloud::RequestCreator::SendRequestEnumerator Updated on 29 January 2021 at 18:34:48 UTC","title":"function SendRequestEnumerator"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IUnityEqualCheck/","text":"Mirror::Cloud::IUnityEqualCheck Adds Extension to check if unity object is null. More... Inherited by ICoroutineRunner Detailed Description class Mirror :: Cloud :: IUnityEqualCheck ; Adds Extension to check if unity object is null. Use these methods to stop MissingReferenceException Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::IUnityEqualCheck"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IUnityEqualCheck/#mirrorcloudiunityequalcheck","text":"Adds Extension to check if unity object is null. More... Inherited by ICoroutineRunner","title":"Mirror::Cloud::IUnityEqualCheck"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1IUnityEqualCheck/#detailed-description","text":"class Mirror :: Cloud :: IUnityEqualCheck ; Adds Extension to check if unity object is null. Use these methods to stop MissingReferenceException Updated on 29 January 2021 at 18:34:48 UTC","title":"Detailed Description"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerClientApi/","text":"Mirror::Cloud::ListServerService::IListServerClientApi Inherits from IBaseApi Inherited by ListServerClientApi Public Events Name UnityAction< ServerCollectionJson > onServerListUpdated () Called when the server list is updated Public Functions Name void GetServerList () Get the server list once void StartGetServerListRepeat (int interval) Start getting the server list every interval void StopGetServerListRepeat () Stop getting the server list Additional inherited members Public Functions inherited from IBaseApi Name void Shutdown () Cleans up any data created by the instance Public Events Documentation event onServerListUpdated UnityAction < ServerCollectionJson > onServerListUpdated () Called when the server list is updated Public Functions Documentation function GetServerList void GetServerList () Get the server list once Reimplemented by : Mirror::Cloud::ListServerService::ListServerClientApi::GetServerList function StartGetServerListRepeat void StartGetServerListRepeat ( int interval ) Start getting the server list every interval Parameters : interval Reimplemented by : Mirror::Cloud::ListServerService::ListServerClientApi::StartGetServerListRepeat function StopGetServerListRepeat void StopGetServerListRepeat () Stop getting the server list Reimplemented by : Mirror::Cloud::ListServerService::ListServerClientApi::StopGetServerListRepeat Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::ListServerService::IListServerClientApi"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerClientApi/#mirrorcloudlistserverserviceilistserverclientapi","text":"Inherits from IBaseApi Inherited by ListServerClientApi","title":"Mirror::Cloud::ListServerService::IListServerClientApi"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerClientApi/#public-events","text":"Name UnityAction< ServerCollectionJson > onServerListUpdated () Called when the server list is updated","title":"Public Events"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerClientApi/#public-functions","text":"Name void GetServerList () Get the server list once void StartGetServerListRepeat (int interval) Start getting the server list every interval void StopGetServerListRepeat () Stop getting the server list","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerClientApi/#additional-inherited-members","text":"Public Functions inherited from IBaseApi Name void Shutdown () Cleans up any data created by the instance","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerClientApi/#public-events-documentation","text":"","title":"Public Events Documentation"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerClientApi/#event-onserverlistupdated","text":"UnityAction < ServerCollectionJson > onServerListUpdated () Called when the server list is updated","title":"event onServerListUpdated"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerClientApi/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerClientApi/#function-getserverlist","text":"void GetServerList () Get the server list once Reimplemented by : Mirror::Cloud::ListServerService::ListServerClientApi::GetServerList","title":"function GetServerList"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerClientApi/#function-startgetserverlistrepeat","text":"void StartGetServerListRepeat ( int interval ) Start getting the server list every interval Parameters : interval Reimplemented by : Mirror::Cloud::ListServerService::ListServerClientApi::StartGetServerListRepeat","title":"function StartGetServerListRepeat"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerClientApi/#function-stopgetserverlistrepeat","text":"void StopGetServerListRepeat () Stop getting the server list Reimplemented by : Mirror::Cloud::ListServerService::ListServerClientApi::StopGetServerListRepeat Updated on 29 January 2021 at 18:34:48 UTC","title":"function StopGetServerListRepeat"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerServerApi/","text":"Mirror::Cloud::ListServerService::IListServerServerApi Inherits from IBaseApi Inherited by ListServerServerApi Public Functions Name void AddServer ( ServerJson server) Add a server to the list void UpdateServer (int newPlayerCount) Update the current server void UpdateServer ( ServerJson server) Update the current server void RemoveServer () Removes the current server Public Properties Name bool ServerInList Has a server been added to the list with this connection Additional inherited members Public Functions inherited from IBaseApi Name void Shutdown () Cleans up any data created by the instance Public Functions Documentation function AddServer void AddServer ( ServerJson server ) Add a server to the list Parameters : server Reimplemented by : Mirror::Cloud::ListServerService::ListServerServerApi::AddServer function UpdateServer void UpdateServer ( int newPlayerCount ) Update the current server Parameters : newPlayerCount Reimplemented by : Mirror::Cloud::ListServerService::ListServerServerApi::UpdateServer function UpdateServer void UpdateServer ( ServerJson server ) Update the current server Parameters : server Reimplemented by : Mirror::Cloud::ListServerService::ListServerServerApi::UpdateServer function RemoveServer void RemoveServer () Removes the current server Reimplemented by : Mirror::Cloud::ListServerService::ListServerServerApi::RemoveServer Public Property Documentation property ServerInList bool ServerInList ; Has a server been added to the list with this connection Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::ListServerService::IListServerServerApi"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerServerApi/#mirrorcloudlistserverserviceilistserverserverapi","text":"Inherits from IBaseApi Inherited by ListServerServerApi","title":"Mirror::Cloud::ListServerService::IListServerServerApi"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerServerApi/#public-functions","text":"Name void AddServer ( ServerJson server) Add a server to the list void UpdateServer (int newPlayerCount) Update the current server void UpdateServer ( ServerJson server) Update the current server void RemoveServer () Removes the current server","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerServerApi/#public-properties","text":"Name bool ServerInList Has a server been added to the list with this connection","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerServerApi/#additional-inherited-members","text":"Public Functions inherited from IBaseApi Name void Shutdown () Cleans up any data created by the instance","title":"Additional inherited members"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerServerApi/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerServerApi/#function-addserver","text":"void AddServer ( ServerJson server ) Add a server to the list Parameters : server Reimplemented by : Mirror::Cloud::ListServerService::ListServerServerApi::AddServer","title":"function AddServer"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerServerApi/#function-updateserver","text":"void UpdateServer ( int newPlayerCount ) Update the current server Parameters : newPlayerCount Reimplemented by : Mirror::Cloud::ListServerService::ListServerServerApi::UpdateServer","title":"function UpdateServer"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerServerApi/#function-updateserver_1","text":"void UpdateServer ( ServerJson server ) Update the current server Parameters : server Reimplemented by : Mirror::Cloud::ListServerService::ListServerServerApi::UpdateServer","title":"function UpdateServer"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerServerApi/#function-removeserver","text":"void RemoveServer () Removes the current server Reimplemented by : Mirror::Cloud::ListServerService::ListServerServerApi::RemoveServer","title":"function RemoveServer"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerServerApi/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1Cloud_1_1ListServerService_1_1IListServerServerApi/#property-serverinlist","text":"bool ServerInList ; Has a server been added to the list with this connection Updated on 29 January 2021 at 18:34:48 UTC","title":"property ServerInList"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1IMessageBase/","text":"Mirror::IMessageBase Inherited by MessageBase Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::IMessageBase"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1IMessageBase/#mirrorimessagebase","text":"Inherited by MessageBase Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::IMessageBase"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1NetworkMessage/","text":"Mirror::NetworkMessage Inherited by AddPlayerMessage , BasicAuthenticator.AuthRequestMessage , BasicAuthenticator.AuthResponseMessage , CommandMessage , ConnectMessage , DisconnectMessage , ServerRequest , ServerResponse , ErrorMessage , NetworkPingMessage , NetworkPongMessage , NotReadyMessage , ObjectDestroyMessage , ObjectHideMessage , ObjectSpawnFinishedMessage , ObjectSpawnStartedMessage , ReadyMessage , RpcMessage , SceneMessage , SpawnMessage , UpdateVarsMessage Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkMessage"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1NetworkMessage/#mirrornetworkmessage","text":"Inherited by AddPlayerMessage , BasicAuthenticator.AuthRequestMessage , BasicAuthenticator.AuthResponseMessage , CommandMessage , ConnectMessage , DisconnectMessage , ServerRequest , ServerResponse , ErrorMessage , NetworkPingMessage , NetworkPongMessage , NotReadyMessage , ObjectDestroyMessage , ObjectHideMessage , ObjectSpawnFinishedMessage , ObjectSpawnStartedMessage , ReadyMessage , RpcMessage , SceneMessage , SpawnMessage , UpdateVarsMessage Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkMessage"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1SimpleWeb_1_1IBufferOwner/","text":"Mirror::SimpleWeb::IBufferOwner Inherited by BufferBucket Public Functions Name void Return ( ArrayBuffer buffer) Public Functions Documentation function Return void Return ( ArrayBuffer buffer ) Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::IBufferOwner"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1SimpleWeb_1_1IBufferOwner/#mirrorsimplewebibufferowner","text":"Inherited by BufferBucket","title":"Mirror::SimpleWeb::IBufferOwner"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1SimpleWeb_1_1IBufferOwner/#public-functions","text":"Name void Return ( ArrayBuffer buffer)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1SimpleWeb_1_1IBufferOwner/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1SimpleWeb_1_1IBufferOwner/#function-return","text":"void Return ( ArrayBuffer buffer ) Updated on 29 January 2021 at 18:34:49 UTC","title":"function Return"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1SyncObject/","text":"Mirror::SyncObject A sync object is an object that can synchronize it's state between server and client, such as a SyncList Inherited by SyncIDictionary< TKey, TValue > , SyncList< T > , SyncSet< T > Public Functions Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used Public Properties Name bool IsDirty true if there are changes since the last flush Public Functions Documentation function Flush void Flush () Discard all the queued changes Reimplemented by : Mirror::SyncSet::Flush , Mirror::SyncIDictionary::Flush , Mirror::SyncList::Flush Consider the object fully synchronized with clients function OnSerializeAll void OnSerializeAll ( NetworkWriter writer ) Write a full copy of the object Parameters : writer Reimplemented by : Mirror::SyncSet::OnSerializeAll , Mirror::SyncIDictionary::OnSerializeAll , Mirror::SyncList::OnSerializeAll function OnSerializeDelta void OnSerializeDelta ( NetworkWriter writer ) Write the changes made to the object since last sync Parameters : writer Reimplemented by : Mirror::SyncSet::OnSerializeDelta , Mirror::SyncIDictionary::OnSerializeDelta , Mirror::SyncList::OnSerializeDelta function OnDeserializeAll void OnDeserializeAll ( NetworkReader reader ) Reads a full copy of the object Parameters : reader Reimplemented by : Mirror::SyncSet::OnDeserializeAll , Mirror::SyncIDictionary::OnDeserializeAll , Mirror::SyncList::OnDeserializeAll function OnDeserializeDelta void OnDeserializeDelta ( NetworkReader reader ) Reads the changes made to the object since last sync Parameters : reader Reimplemented by : Mirror::SyncSet::OnDeserializeDelta , Mirror::SyncIDictionary::OnDeserializeDelta , Mirror::SyncList::OnDeserializeDelta function Reset void Reset () Resets the SyncObject so that it can be re-used Reimplemented by : Mirror::SyncIDictionary::Reset , Mirror::SyncSet::Reset , Mirror::SyncList::Reset Public Property Documentation property IsDirty bool IsDirty ; true if there are changes since the last flush Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncObject"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1SyncObject/#mirrorsyncobject","text":"A sync object is an object that can synchronize it's state between server and client, such as a SyncList Inherited by SyncIDictionary< TKey, TValue > , SyncList< T > , SyncSet< T >","title":"Mirror::SyncObject"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1SyncObject/#public-functions","text":"Name void Flush () Discard all the queued changes void OnSerializeAll ( NetworkWriter writer) Write a full copy of the object void OnSerializeDelta ( NetworkWriter writer) Write the changes made to the object since last sync void OnDeserializeAll ( NetworkReader reader) Reads a full copy of the object void OnDeserializeDelta ( NetworkReader reader) Reads the changes made to the object since last sync void Reset () Resets the SyncObject so that it can be re-used","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1SyncObject/#public-properties","text":"Name bool IsDirty true if there are changes since the last flush","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1SyncObject/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1SyncObject/#function-flush","text":"void Flush () Discard all the queued changes Reimplemented by : Mirror::SyncSet::Flush , Mirror::SyncIDictionary::Flush , Mirror::SyncList::Flush Consider the object fully synchronized with clients","title":"function Flush"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1SyncObject/#function-onserializeall","text":"void OnSerializeAll ( NetworkWriter writer ) Write a full copy of the object Parameters : writer Reimplemented by : Mirror::SyncSet::OnSerializeAll , Mirror::SyncIDictionary::OnSerializeAll , Mirror::SyncList::OnSerializeAll","title":"function OnSerializeAll"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1SyncObject/#function-onserializedelta","text":"void OnSerializeDelta ( NetworkWriter writer ) Write the changes made to the object since last sync Parameters : writer Reimplemented by : Mirror::SyncSet::OnSerializeDelta , Mirror::SyncIDictionary::OnSerializeDelta , Mirror::SyncList::OnSerializeDelta","title":"function OnSerializeDelta"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1SyncObject/#function-ondeserializeall","text":"void OnDeserializeAll ( NetworkReader reader ) Reads a full copy of the object Parameters : reader Reimplemented by : Mirror::SyncSet::OnDeserializeAll , Mirror::SyncIDictionary::OnDeserializeAll , Mirror::SyncList::OnDeserializeAll","title":"function OnDeserializeAll"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1SyncObject/#function-ondeserializedelta","text":"void OnDeserializeDelta ( NetworkReader reader ) Reads the changes made to the object since last sync Parameters : reader Reimplemented by : Mirror::SyncSet::OnDeserializeDelta , Mirror::SyncIDictionary::OnDeserializeDelta , Mirror::SyncList::OnDeserializeDelta","title":"function OnDeserializeDelta"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1SyncObject/#function-reset","text":"void Reset () Resets the SyncObject so that it can be re-used Reimplemented by : Mirror::SyncIDictionary::Reset , Mirror::SyncSet::Reset , Mirror::SyncList::Reset","title":"function Reset"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1SyncObject/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/interfaceMirror_1_1SyncObject/#property-isdirty","text":"bool IsDirty ; true if there are changes since the last flush Updated on 29 January 2021 at 18:34:48 UTC","title":"property IsDirty"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1AttackMapActions/","text":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::AttackMapActions Public Functions Name AttackMapActions (@ PlayerControls wrapper) InputActionMap Get () void Enable () void Disable () void SetCallbacks ( IAttackMapActions instance) implicit operator InputActionMap ( AttackMapActions set) Public Attributes Name InputAction Melee bool enabled Public Functions Documentation function AttackMapActions inline AttackMapActions ( @ PlayerControls wrapper ) function Get inline InputActionMap Get () function Enable inline void Enable () function Disable inline void Disable () function SetCallbacks inline void SetCallbacks ( IAttackMapActions instance ) function operator InputActionMap static inline implicit operator InputActionMap ( AttackMapActions set ) Public Attributes Documentation variable Melee InputAction Melee => m_Wrapper . m_AttackMap_Melee ; variable enabled bool enabled => Get (). enabled ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::AttackMapActions"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1AttackMapActions/#mederangedsenatorscopsandrobbersplayercontrolsattackmapactions","text":"","title":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::AttackMapActions"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1AttackMapActions/#public-functions","text":"Name AttackMapActions (@ PlayerControls wrapper) InputActionMap Get () void Enable () void Disable () void SetCallbacks ( IAttackMapActions instance) implicit operator InputActionMap ( AttackMapActions set)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1AttackMapActions/#public-attributes","text":"Name InputAction Melee bool enabled","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1AttackMapActions/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1AttackMapActions/#function-attackmapactions","text":"inline AttackMapActions ( @ PlayerControls wrapper )","title":"function AttackMapActions"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1AttackMapActions/#function-get","text":"inline InputActionMap Get ()","title":"function Get"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1AttackMapActions/#function-enable","text":"inline void Enable ()","title":"function Enable"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1AttackMapActions/#function-disable","text":"inline void Disable ()","title":"function Disable"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1AttackMapActions/#function-setcallbacks","text":"inline void SetCallbacks ( IAttackMapActions instance )","title":"function SetCallbacks"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1AttackMapActions/#function-operator-inputactionmap","text":"static inline implicit operator InputActionMap ( AttackMapActions set )","title":"function operator InputActionMap"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1AttackMapActions/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1AttackMapActions/#variable-melee","text":"InputAction Melee => m_Wrapper . m_AttackMap_Melee ;","title":"variable Melee"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1AttackMapActions/#variable-enabled","text":"bool enabled => Get (). enabled ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable enabled"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1CameraViewPointsActions/","text":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::CameraViewPointsActions Public Functions Name CameraViewPointsActions (@ PlayerControls wrapper) InputActionMap Get () void Enable () void Disable () void SetCallbacks ( ICameraViewPointsActions instance) implicit operator InputActionMap ( CameraViewPointsActions set) Public Attributes Name InputAction FocusPlayer InputAction ZoomOut InputAction ZoomIn bool enabled Public Functions Documentation function CameraViewPointsActions inline CameraViewPointsActions ( @ PlayerControls wrapper ) function Get inline InputActionMap Get () function Enable inline void Enable () function Disable inline void Disable () function SetCallbacks inline void SetCallbacks ( ICameraViewPointsActions instance ) function operator InputActionMap static inline implicit operator InputActionMap ( CameraViewPointsActions set ) Public Attributes Documentation variable FocusPlayer InputAction FocusPlayer => m_Wrapper . m_CameraViewPoints_FocusPlayer ; variable ZoomOut InputAction ZoomOut => m_Wrapper . m_CameraViewPoints_ZoomOut ; variable ZoomIn InputAction ZoomIn => m_Wrapper . m_CameraViewPoints_ZoomIn ; variable enabled bool enabled => Get (). enabled ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::CameraViewPointsActions"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1CameraViewPointsActions/#mederangedsenatorscopsandrobbersplayercontrolscameraviewpointsactions","text":"","title":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::CameraViewPointsActions"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1CameraViewPointsActions/#public-functions","text":"Name CameraViewPointsActions (@ PlayerControls wrapper) InputActionMap Get () void Enable () void Disable () void SetCallbacks ( ICameraViewPointsActions instance) implicit operator InputActionMap ( CameraViewPointsActions set)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1CameraViewPointsActions/#public-attributes","text":"Name InputAction FocusPlayer InputAction ZoomOut InputAction ZoomIn bool enabled","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1CameraViewPointsActions/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1CameraViewPointsActions/#function-cameraviewpointsactions","text":"inline CameraViewPointsActions ( @ PlayerControls wrapper )","title":"function CameraViewPointsActions"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1CameraViewPointsActions/#function-get","text":"inline InputActionMap Get ()","title":"function Get"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1CameraViewPointsActions/#function-enable","text":"inline void Enable ()","title":"function Enable"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1CameraViewPointsActions/#function-disable","text":"inline void Disable ()","title":"function Disable"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1CameraViewPointsActions/#function-setcallbacks","text":"inline void SetCallbacks ( ICameraViewPointsActions instance )","title":"function SetCallbacks"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1CameraViewPointsActions/#function-operator-inputactionmap","text":"static inline implicit operator InputActionMap ( CameraViewPointsActions set )","title":"function operator InputActionMap"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1CameraViewPointsActions/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1CameraViewPointsActions/#variable-focusplayer","text":"InputAction FocusPlayer => m_Wrapper . m_CameraViewPoints_FocusPlayer ;","title":"variable FocusPlayer"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1CameraViewPointsActions/#variable-zoomout","text":"InputAction ZoomOut => m_Wrapper . m_CameraViewPoints_ZoomOut ;","title":"variable ZoomOut"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1CameraViewPointsActions/#variable-zoomin","text":"InputAction ZoomIn => m_Wrapper . m_CameraViewPoints_ZoomIn ;","title":"variable ZoomIn"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1CameraViewPointsActions/#variable-enabled","text":"bool enabled => Get (). enabled ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable enabled"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1KeyMapActions/","text":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::KeyMapActions Public Functions Name KeyMapActions (@ PlayerControls wrapper) InputActionMap Get () void Enable () void Disable () void SetCallbacks ( IKeyMapActions instance) implicit operator InputActionMap ( KeyMapActions set) Public Attributes Name InputAction MoveUp InputAction MoveDown InputAction MoveLeft InputAction MoveRight bool enabled Public Functions Documentation function KeyMapActions inline KeyMapActions ( @ PlayerControls wrapper ) function Get inline InputActionMap Get () function Enable inline void Enable () function Disable inline void Disable () function SetCallbacks inline void SetCallbacks ( IKeyMapActions instance ) function operator InputActionMap static inline implicit operator InputActionMap ( KeyMapActions set ) Public Attributes Documentation variable MoveUp InputAction MoveUp => m_Wrapper . m_KeyMap_MoveUp ; variable MoveDown InputAction MoveDown => m_Wrapper . m_KeyMap_MoveDown ; variable MoveLeft InputAction MoveLeft => m_Wrapper . m_KeyMap_MoveLeft ; variable MoveRight InputAction MoveRight => m_Wrapper . m_KeyMap_MoveRight ; variable enabled bool enabled => Get (). enabled ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::KeyMapActions"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1KeyMapActions/#mederangedsenatorscopsandrobbersplayercontrolskeymapactions","text":"","title":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::KeyMapActions"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1KeyMapActions/#public-functions","text":"Name KeyMapActions (@ PlayerControls wrapper) InputActionMap Get () void Enable () void Disable () void SetCallbacks ( IKeyMapActions instance) implicit operator InputActionMap ( KeyMapActions set)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1KeyMapActions/#public-attributes","text":"Name InputAction MoveUp InputAction MoveDown InputAction MoveLeft InputAction MoveRight bool enabled","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1KeyMapActions/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1KeyMapActions/#function-keymapactions","text":"inline KeyMapActions ( @ PlayerControls wrapper )","title":"function KeyMapActions"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1KeyMapActions/#function-get","text":"inline InputActionMap Get ()","title":"function Get"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1KeyMapActions/#function-enable","text":"inline void Enable ()","title":"function Enable"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1KeyMapActions/#function-disable","text":"inline void Disable ()","title":"function Disable"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1KeyMapActions/#function-setcallbacks","text":"inline void SetCallbacks ( IKeyMapActions instance )","title":"function SetCallbacks"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1KeyMapActions/#function-operator-inputactionmap","text":"static inline implicit operator InputActionMap ( KeyMapActions set )","title":"function operator InputActionMap"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1KeyMapActions/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1KeyMapActions/#variable-moveup","text":"InputAction MoveUp => m_Wrapper . m_KeyMap_MoveUp ;","title":"variable MoveUp"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1KeyMapActions/#variable-movedown","text":"InputAction MoveDown => m_Wrapper . m_KeyMap_MoveDown ;","title":"variable MoveDown"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1KeyMapActions/#variable-moveleft","text":"InputAction MoveLeft => m_Wrapper . m_KeyMap_MoveLeft ;","title":"variable MoveLeft"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1KeyMapActions/#variable-moveright","text":"InputAction MoveRight => m_Wrapper . m_KeyMap_MoveRight ;","title":"variable MoveRight"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1KeyMapActions/#variable-enabled","text":"bool enabled => Get (). enabled ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable enabled"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1MouseActionsActions/","text":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::MouseActionsActions Public Functions Name MouseActionsActions (@ PlayerControls wrapper) InputActionMap Get () void Enable () void Disable () void SetCallbacks ( IMouseActionsActions instance) implicit operator InputActionMap ( MouseActionsActions set) Public Attributes Name InputAction MousePosition bool enabled Public Functions Documentation function MouseActionsActions inline MouseActionsActions ( @ PlayerControls wrapper ) function Get inline InputActionMap Get () function Enable inline void Enable () function Disable inline void Disable () function SetCallbacks inline void SetCallbacks ( IMouseActionsActions instance ) function operator InputActionMap static inline implicit operator InputActionMap ( MouseActionsActions set ) Public Attributes Documentation variable MousePosition InputAction MousePosition => m_Wrapper . m_MouseActions_MousePosition ; variable enabled bool enabled => Get (). enabled ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::MouseActionsActions"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1MouseActionsActions/#mederangedsenatorscopsandrobbersplayercontrolsmouseactionsactions","text":"","title":"Me::DerangedSenators::CopsAndRobbers::PlayerControls::MouseActionsActions"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1MouseActionsActions/#public-functions","text":"Name MouseActionsActions (@ PlayerControls wrapper) InputActionMap Get () void Enable () void Disable () void SetCallbacks ( IMouseActionsActions instance) implicit operator InputActionMap ( MouseActionsActions set)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1MouseActionsActions/#public-attributes","text":"Name InputAction MousePosition bool enabled","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1MouseActionsActions/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1MouseActionsActions/#function-mouseactionsactions","text":"inline MouseActionsActions ( @ PlayerControls wrapper )","title":"function MouseActionsActions"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1MouseActionsActions/#function-get","text":"inline InputActionMap Get ()","title":"function Get"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1MouseActionsActions/#function-enable","text":"inline void Enable ()","title":"function Enable"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1MouseActionsActions/#function-disable","text":"inline void Disable ()","title":"function Disable"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1MouseActionsActions/#function-setcallbacks","text":"inline void SetCallbacks ( IMouseActionsActions instance )","title":"function SetCallbacks"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1MouseActionsActions/#function-operator-inputactionmap","text":"static inline implicit operator InputActionMap ( MouseActionsActions set )","title":"function operator InputActionMap"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1MouseActionsActions/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1MouseActionsActions/#variable-mouseposition","text":"InputAction MousePosition => m_Wrapper . m_MouseActions_MousePosition ;","title":"variable MousePosition"},{"location":"Cops%20And%20Robbers/Classes/structMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerControls_1_1MouseActionsActions/#variable-enabled","text":"bool enabled => Get (). enabled ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable enabled"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1AddPlayerMessage/","text":"Mirror::AddPlayerMessage Inherits from NetworkMessage Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::AddPlayerMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1AddPlayerMessage/#mirroraddplayermessage","text":"Inherits from NetworkMessage Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::AddPlayerMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Authenticators_1_1BasicAuthenticator_1_1AuthRequestMessage/","text":"Mirror::Authenticators::BasicAuthenticator::AuthRequestMessage Inherits from NetworkMessage Public Attributes Name string authUsername string authPassword Public Attributes Documentation variable authUsername string authUsername ; variable authPassword string authPassword ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Authenticators::BasicAuthenticator::AuthRequestMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Authenticators_1_1BasicAuthenticator_1_1AuthRequestMessage/#mirrorauthenticatorsbasicauthenticatorauthrequestmessage","text":"Inherits from NetworkMessage","title":"Mirror::Authenticators::BasicAuthenticator::AuthRequestMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Authenticators_1_1BasicAuthenticator_1_1AuthRequestMessage/#public-attributes","text":"Name string authUsername string authPassword","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Authenticators_1_1BasicAuthenticator_1_1AuthRequestMessage/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Authenticators_1_1BasicAuthenticator_1_1AuthRequestMessage/#variable-authusername","text":"string authUsername ;","title":"variable authUsername"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Authenticators_1_1BasicAuthenticator_1_1AuthRequestMessage/#variable-authpassword","text":"string authPassword ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable authPassword"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Authenticators_1_1BasicAuthenticator_1_1AuthResponseMessage/","text":"Mirror::Authenticators::BasicAuthenticator::AuthResponseMessage Inherits from NetworkMessage Public Attributes Name byte code string message Public Attributes Documentation variable code byte code ; variable message string message ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Authenticators::BasicAuthenticator::AuthResponseMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Authenticators_1_1BasicAuthenticator_1_1AuthResponseMessage/#mirrorauthenticatorsbasicauthenticatorauthresponsemessage","text":"Inherits from NetworkMessage","title":"Mirror::Authenticators::BasicAuthenticator::AuthResponseMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Authenticators_1_1BasicAuthenticator_1_1AuthResponseMessage/#public-attributes","text":"Name byte code string message","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Authenticators_1_1BasicAuthenticator_1_1AuthResponseMessage/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Authenticators_1_1BasicAuthenticator_1_1AuthResponseMessage/#variable-code","text":"byte code ;","title":"variable code"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Authenticators_1_1BasicAuthenticator_1_1AuthResponseMessage/#variable-message","text":"string message ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable message"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1CreatedIdJson/","text":"Mirror::Cloud::CreatedIdJson Inherits from ICanBeJson Public Attributes Name string id Public Attributes Documentation variable id string id ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::CreatedIdJson"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1CreatedIdJson/#mirrorcloudcreatedidjson","text":"Inherits from ICanBeJson","title":"Mirror::Cloud::CreatedIdJson"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1CreatedIdJson/#public-attributes","text":"Name string id","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1CreatedIdJson/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1CreatedIdJson/#variable-id","text":"string id ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable id"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1EmptyJson/","text":"Mirror::Cloud::EmptyJson Inherits from ICanBeJson Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::EmptyJson"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1EmptyJson/#mirrorcloudemptyjson","text":"Inherits from ICanBeJson Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::EmptyJson"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ErrorJson/","text":"Mirror::Cloud::ErrorJson Inherits from ICanBeJson Public Attributes Name string code string message int HtmlCode Public Attributes Documentation variable code string code ; variable message string message ; variable HtmlCode int HtmlCode => int . Parse ( code ); Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::ErrorJson"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ErrorJson/#mirrorclouderrorjson","text":"Inherits from ICanBeJson","title":"Mirror::Cloud::ErrorJson"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ErrorJson/#public-attributes","text":"Name string code string message int HtmlCode","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ErrorJson/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ErrorJson/#variable-code","text":"string code ;","title":"variable code"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ErrorJson/#variable-message","text":"string message ;","title":"variable message"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ErrorJson/#variable-htmlcode","text":"int HtmlCode => int . Parse ( code ); Updated on 29 January 2021 at 18:34:48 UTC","title":"variable HtmlCode"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1KeyValue/","text":"Mirror::Cloud::ListServerService::KeyValue Public Functions Name KeyValue (string key, string value) void Validate () Public Attributes Name const int MaxKeySize const int MaxValueSize string key string value Public Functions Documentation function KeyValue inline KeyValue ( string key , string value ) function Validate inline void Validate () Public Attributes Documentation variable MaxKeySize const int MaxKeySize = 32 ; variable MaxValueSize const int MaxValueSize = 256 ; variable key string key ; variable value string value ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::ListServerService::KeyValue"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1KeyValue/#mirrorcloudlistserverservicekeyvalue","text":"","title":"Mirror::Cloud::ListServerService::KeyValue"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1KeyValue/#public-functions","text":"Name KeyValue (string key, string value) void Validate ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1KeyValue/#public-attributes","text":"Name const int MaxKeySize const int MaxValueSize string key string value","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1KeyValue/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1KeyValue/#function-keyvalue","text":"inline KeyValue ( string key , string value )","title":"function KeyValue"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1KeyValue/#function-validate","text":"inline void Validate ()","title":"function Validate"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1KeyValue/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1KeyValue/#variable-maxkeysize","text":"const int MaxKeySize = 32 ;","title":"variable MaxKeySize"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1KeyValue/#variable-maxvaluesize","text":"const int MaxValueSize = 256 ;","title":"variable MaxValueSize"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1KeyValue/#variable-key","text":"string key ;","title":"variable key"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1KeyValue/#variable-value","text":"string value ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable value"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1PartialServerJson/","text":"Mirror::Cloud::ListServerService::PartialServerJson Inherits from ICanBeJson Public Functions Name void SetCustomData (Dictionary< string, string > data) void Validate () Public Attributes Name int playerCount optional int maxPlayerCount optional string displayName optional KeyValue [] customData Array of custom data, use SetCustomData to set values Public Functions Documentation function SetCustomData inline void SetCustomData ( Dictionary < string , string > data ) function Validate inline void Validate () Public Attributes Documentation variable playerCount int playerCount ; optional variable maxPlayerCount int maxPlayerCount ; optional variable displayName string displayName ; optional variable customData KeyValue [] customData ; Array of custom data, use SetCustomData to set values optional Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::ListServerService::PartialServerJson"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1PartialServerJson/#mirrorcloudlistserverservicepartialserverjson","text":"Inherits from ICanBeJson","title":"Mirror::Cloud::ListServerService::PartialServerJson"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1PartialServerJson/#public-functions","text":"Name void SetCustomData (Dictionary< string, string > data) void Validate ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1PartialServerJson/#public-attributes","text":"Name int playerCount optional int maxPlayerCount optional string displayName optional KeyValue [] customData Array of custom data, use SetCustomData to set values","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1PartialServerJson/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1PartialServerJson/#function-setcustomdata","text":"inline void SetCustomData ( Dictionary < string , string > data )","title":"function SetCustomData"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1PartialServerJson/#function-validate","text":"inline void Validate ()","title":"function Validate"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1PartialServerJson/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1PartialServerJson/#variable-playercount","text":"int playerCount ; optional","title":"variable playerCount"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1PartialServerJson/#variable-maxplayercount","text":"int maxPlayerCount ; optional","title":"variable maxPlayerCount"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1PartialServerJson/#variable-displayname","text":"string displayName ; optional","title":"variable displayName"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1PartialServerJson/#variable-customdata","text":"KeyValue [] customData ; Array of custom data, use SetCustomData to set values optional Updated on 29 January 2021 at 18:34:48 UTC","title":"variable customData"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerCollectionJson/","text":"Mirror::Cloud::ListServerService::ServerCollectionJson Inherits from ICanBeJson Public Attributes Name ServerJson [] servers Public Attributes Documentation variable servers ServerJson [] servers ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::ListServerService::ServerCollectionJson"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerCollectionJson/#mirrorcloudlistserverserviceservercollectionjson","text":"Inherits from ICanBeJson","title":"Mirror::Cloud::ListServerService::ServerCollectionJson"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerCollectionJson/#public-attributes","text":"Name ServerJson [] servers","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerCollectionJson/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerCollectionJson/#variable-servers","text":"ServerJson [] servers ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable servers"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerJson/","text":"Mirror::Cloud::ListServerService::ServerJson Inherits from ICanBeJson Public Functions Name Uri GetServerUri () Uri from address field Uri GetCustomUri () Uri from customAddress field void SetCustomData (Dictionary< string, string > data) Updates the customData array bool Validate () Public Attributes Name string protocol int port int playerCount int maxPlayerCount string displayName optional string address Uri string of the ip and port of the server. string customAddress Can be used to set custom uri KeyValue [] customData Array of custom data, use SetCustomData to set values Public Functions Documentation function GetServerUri Uri GetServerUri () Uri from address field Return : function GetCustomUri Uri GetCustomUri () Uri from customAddress field Return : function SetCustomData inline void SetCustomData ( Dictionary < string , string > data ) Updates the customData array Parameters : data function Validate inline bool Validate () Public Attributes Documentation variable protocol string protocol ; variable port int port ; variable playerCount int playerCount ; variable maxPlayerCount int maxPlayerCount ; variable displayName string displayName ; optional variable address string address ; Uri string of the ip and port of the server. The ip is calculated by the request to the API This is returns from the api, any incoming address fields will be ignored variable customAddress string customAddress ; Can be used to set custom uri optional variable customData KeyValue [] customData ; Array of custom data, use SetCustomData to set values optional Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::ListServerService::ServerJson"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerJson/#mirrorcloudlistserverserviceserverjson","text":"Inherits from ICanBeJson","title":"Mirror::Cloud::ListServerService::ServerJson"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerJson/#public-functions","text":"Name Uri GetServerUri () Uri from address field Uri GetCustomUri () Uri from customAddress field void SetCustomData (Dictionary< string, string > data) Updates the customData array bool Validate ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerJson/#public-attributes","text":"Name string protocol int port int playerCount int maxPlayerCount string displayName optional string address Uri string of the ip and port of the server. string customAddress Can be used to set custom uri KeyValue [] customData Array of custom data, use SetCustomData to set values","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerJson/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerJson/#function-getserveruri","text":"Uri GetServerUri () Uri from address field Return :","title":"function GetServerUri"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerJson/#function-getcustomuri","text":"Uri GetCustomUri () Uri from customAddress field Return :","title":"function GetCustomUri"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerJson/#function-setcustomdata","text":"inline void SetCustomData ( Dictionary < string , string > data ) Updates the customData array Parameters : data","title":"function SetCustomData"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerJson/#function-validate","text":"inline bool Validate ()","title":"function Validate"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerJson/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerJson/#variable-protocol","text":"string protocol ;","title":"variable protocol"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerJson/#variable-port","text":"int port ;","title":"variable port"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerJson/#variable-playercount","text":"int playerCount ;","title":"variable playerCount"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerJson/#variable-maxplayercount","text":"int maxPlayerCount ;","title":"variable maxPlayerCount"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerJson/#variable-displayname","text":"string displayName ; optional","title":"variable displayName"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerJson/#variable-address","text":"string address ; Uri string of the ip and port of the server. The ip is calculated by the request to the API This is returns from the api, any incoming address fields will be ignored","title":"variable address"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerJson/#variable-customaddress","text":"string customAddress ; Can be used to set custom uri optional","title":"variable customAddress"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Cloud_1_1ListServerService_1_1ServerJson/#variable-customdata","text":"KeyValue [] customData ; Array of custom data, use SetCustomData to set values optional Updated on 29 January 2021 at 18:34:48 UTC","title":"variable customData"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1CommandMessage/","text":"Mirror::CommandMessage Inherits from NetworkMessage Public Attributes Name uint netId int componentIndex int functionHash ArraySegment< byte > payload Public Attributes Documentation variable netId uint netId ; variable componentIndex int componentIndex ; variable functionHash int functionHash ; variable payload ArraySegment < byte > payload ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::CommandMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1CommandMessage/#mirrorcommandmessage","text":"Inherits from NetworkMessage","title":"Mirror::CommandMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1CommandMessage/#public-attributes","text":"Name uint netId int componentIndex int functionHash ArraySegment< byte > payload","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1CommandMessage/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1CommandMessage/#variable-netid","text":"uint netId ;","title":"variable netId"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1CommandMessage/#variable-componentindex","text":"int componentIndex ;","title":"variable componentIndex"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1CommandMessage/#variable-functionhash","text":"int functionHash ;","title":"variable functionHash"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1CommandMessage/#variable-payload","text":"ArraySegment < byte > payload ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable payload"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ConnectMessage/","text":"Mirror::ConnectMessage Inherits from NetworkMessage Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::ConnectMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ConnectMessage/#mirrorconnectmessage","text":"Inherits from NetworkMessage Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::ConnectMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1DisconnectMessage/","text":"Mirror::DisconnectMessage Inherits from NetworkMessage Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::DisconnectMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1DisconnectMessage/#mirrordisconnectmessage","text":"Inherits from NetworkMessage Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::DisconnectMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Discovery_1_1ServerRequest/","text":"Mirror::Discovery::ServerRequest Inherits from NetworkMessage Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Discovery::ServerRequest"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Discovery_1_1ServerRequest/#mirrordiscoveryserverrequest","text":"Inherits from NetworkMessage Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Discovery::ServerRequest"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Discovery_1_1ServerResponse/","text":"Mirror::Discovery::ServerResponse Inherits from NetworkMessage Public Properties Name IPEndPoint EndPoint Public Attributes Name Uri uri long serverId Public Property Documentation property EndPoint IPEndPoint EndPoint ; Public Attributes Documentation variable uri Uri uri ; variable serverId long serverId ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Discovery::ServerResponse"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Discovery_1_1ServerResponse/#mirrordiscoveryserverresponse","text":"Inherits from NetworkMessage","title":"Mirror::Discovery::ServerResponse"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Discovery_1_1ServerResponse/#public-properties","text":"Name IPEndPoint EndPoint","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Discovery_1_1ServerResponse/#public-attributes","text":"Name Uri uri long serverId","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Discovery_1_1ServerResponse/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Discovery_1_1ServerResponse/#property-endpoint","text":"IPEndPoint EndPoint ;","title":"property EndPoint"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Discovery_1_1ServerResponse/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Discovery_1_1ServerResponse/#variable-uri","text":"Uri uri ;","title":"variable uri"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Discovery_1_1ServerResponse/#variable-serverid","text":"long serverId ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable serverId"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ErrorMessage/","text":"Mirror::ErrorMessage Inherits from NetworkMessage Public Functions Name ErrorMessage (byte v) Public Attributes Name byte value Public Functions Documentation function ErrorMessage inline ErrorMessage ( byte v ) Public Attributes Documentation variable value byte value ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::ErrorMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ErrorMessage/#mirrorerrormessage","text":"Inherits from NetworkMessage","title":"Mirror::ErrorMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ErrorMessage/#public-functions","text":"Name ErrorMessage (byte v)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ErrorMessage/#public-attributes","text":"Name byte value","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ErrorMessage/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ErrorMessage/#function-errormessage","text":"inline ErrorMessage ( byte v )","title":"function ErrorMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ErrorMessage/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ErrorMessage/#variable-value","text":"byte value ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable value"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Experimental_1_1NetworkTransformBase_1_1DataPoint/","text":"Mirror::Experimental::NetworkTransformBase::DataPoint Public Attributes Name float timeStamp Vector3 localPosition Quaternion localRotation Vector3 localScale float movementSpeed bool isValid Public Attributes Documentation variable timeStamp float timeStamp ; variable localPosition Vector3 localPosition ; variable localRotation Quaternion localRotation ; variable localScale Vector3 localScale ; variable movementSpeed float movementSpeed ; variable isValid bool isValid => timeStamp != 0 ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Experimental::NetworkTransformBase::DataPoint"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Experimental_1_1NetworkTransformBase_1_1DataPoint/#mirrorexperimentalnetworktransformbasedatapoint","text":"","title":"Mirror::Experimental::NetworkTransformBase::DataPoint"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Experimental_1_1NetworkTransformBase_1_1DataPoint/#public-attributes","text":"Name float timeStamp Vector3 localPosition Quaternion localRotation Vector3 localScale float movementSpeed bool isValid","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Experimental_1_1NetworkTransformBase_1_1DataPoint/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Experimental_1_1NetworkTransformBase_1_1DataPoint/#variable-timestamp","text":"float timeStamp ;","title":"variable timeStamp"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Experimental_1_1NetworkTransformBase_1_1DataPoint/#variable-localposition","text":"Vector3 localPosition ;","title":"variable localPosition"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Experimental_1_1NetworkTransformBase_1_1DataPoint/#variable-localrotation","text":"Quaternion localRotation ;","title":"variable localRotation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Experimental_1_1NetworkTransformBase_1_1DataPoint/#variable-localscale","text":"Vector3 localScale ;","title":"variable localScale"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Experimental_1_1NetworkTransformBase_1_1DataPoint/#variable-movementspeed","text":"float movementSpeed ;","title":"variable movementSpeed"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Experimental_1_1NetworkTransformBase_1_1DataPoint/#variable-isvalid","text":"bool isValid => timeStamp != 0 ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable isValid"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Logging_1_1LogSettings_1_1LoggerSettings/","text":"Mirror::Logging::LogSettings::LoggerSettings Public Attributes Name string name LogType logLevel Public Attributes Documentation variable name string name ; variable logLevel LogType logLevel ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Logging::LogSettings::LoggerSettings"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Logging_1_1LogSettings_1_1LoggerSettings/#mirrorlogginglogsettingsloggersettings","text":"","title":"Mirror::Logging::LogSettings::LoggerSettings"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Logging_1_1LogSettings_1_1LoggerSettings/#public-attributes","text":"Name string name LogType logLevel","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Logging_1_1LogSettings_1_1LoggerSettings/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Logging_1_1LogSettings_1_1LoggerSettings/#variable-name","text":"string name ;","title":"variable name"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Logging_1_1LogSettings_1_1LoggerSettings/#variable-loglevel","text":"LogType logLevel ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable logLevel"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkBehaviour_1_1NetworkBehaviourSyncVar/","text":"Mirror::NetworkBehaviour::NetworkBehaviourSyncVar backing field for sync NetworkBehaviour Inherits from IEquatable< NetworkBehaviourSyncVar > Public Functions Name NetworkBehaviourSyncVar (uint netId, int componentIndex) bool Equals ( NetworkBehaviourSyncVar other) bool Equals (uint netId, int componentIndex) override string ToString () Public Attributes Name uint netId byte componentIndex Public Functions Documentation function NetworkBehaviourSyncVar inline NetworkBehaviourSyncVar ( uint netId , int componentIndex ) function Equals inline bool Equals ( NetworkBehaviourSyncVar other ) function Equals inline bool Equals ( uint netId , int componentIndex ) function ToString inline override string ToString () Public Attributes Documentation variable netId uint netId ; variable componentIndex byte componentIndex ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkBehaviour::NetworkBehaviourSyncVar"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkBehaviour_1_1NetworkBehaviourSyncVar/#mirrornetworkbehaviournetworkbehavioursyncvar","text":"backing field for sync NetworkBehaviour Inherits from IEquatable< NetworkBehaviourSyncVar >","title":"Mirror::NetworkBehaviour::NetworkBehaviourSyncVar"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkBehaviour_1_1NetworkBehaviourSyncVar/#public-functions","text":"Name NetworkBehaviourSyncVar (uint netId, int componentIndex) bool Equals ( NetworkBehaviourSyncVar other) bool Equals (uint netId, int componentIndex) override string ToString ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkBehaviour_1_1NetworkBehaviourSyncVar/#public-attributes","text":"Name uint netId byte componentIndex","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkBehaviour_1_1NetworkBehaviourSyncVar/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkBehaviour_1_1NetworkBehaviourSyncVar/#function-networkbehavioursyncvar","text":"inline NetworkBehaviourSyncVar ( uint netId , int componentIndex )","title":"function NetworkBehaviourSyncVar"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkBehaviour_1_1NetworkBehaviourSyncVar/#function-equals","text":"inline bool Equals ( NetworkBehaviourSyncVar other )","title":"function Equals"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkBehaviour_1_1NetworkBehaviourSyncVar/#function-equals_1","text":"inline bool Equals ( uint netId , int componentIndex )","title":"function Equals"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkBehaviour_1_1NetworkBehaviourSyncVar/#function-tostring","text":"inline override string ToString ()","title":"function ToString"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkBehaviour_1_1NetworkBehaviourSyncVar/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkBehaviour_1_1NetworkBehaviourSyncVar/#variable-netid","text":"uint netId ;","title":"variable netId"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkBehaviour_1_1NetworkBehaviourSyncVar/#variable-componentindex","text":"byte componentIndex ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable componentIndex"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkDiagnostics_1_1MessageInfo/","text":"Mirror::NetworkDiagnostics::MessageInfo Describes an outgoing message Public Attributes Name readonly NetworkMessage message The message being sent readonly int channel channel through which the message was sent readonly int bytes how big was the message (does not include transport headers) readonly int count How many connections was the message sent to If an object has a lot of observers this count could be high Public Attributes Documentation variable message readonly NetworkMessage message ; The message being sent variable channel readonly int channel ; channel through which the message was sent variable bytes readonly int bytes ; how big was the message (does not include transport headers) variable count readonly int count ; How many connections was the message sent to If an object has a lot of observers this count could be high Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkDiagnostics::MessageInfo"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkDiagnostics_1_1MessageInfo/#mirrornetworkdiagnosticsmessageinfo","text":"Describes an outgoing message","title":"Mirror::NetworkDiagnostics::MessageInfo"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkDiagnostics_1_1MessageInfo/#public-attributes","text":"Name readonly NetworkMessage message The message being sent readonly int channel channel through which the message was sent readonly int bytes how big was the message (does not include transport headers) readonly int count How many connections was the message sent to If an object has a lot of observers this count could be high","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkDiagnostics_1_1MessageInfo/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkDiagnostics_1_1MessageInfo/#variable-message","text":"readonly NetworkMessage message ; The message being sent","title":"variable message"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkDiagnostics_1_1MessageInfo/#variable-channel","text":"readonly int channel ; channel through which the message was sent","title":"variable channel"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkDiagnostics_1_1MessageInfo/#variable-bytes","text":"readonly int bytes ; how big was the message (does not include transport headers)","title":"variable bytes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkDiagnostics_1_1MessageInfo/#variable-count","text":"readonly int count ; How many connections was the message sent to If an object has a lot of observers this count could be high Updated on 29 January 2021 at 18:34:47 UTC","title":"variable count"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkInformationPreview_1_1NetworkBehaviourInfo/","text":"Mirror::NetworkInformationPreview::NetworkBehaviourInfo Public Attributes Name NetworkBehaviour behaviour GUIContent name Public Attributes Documentation variable behaviour NetworkBehaviour behaviour ; variable name GUIContent name ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkInformationPreview::NetworkBehaviourInfo"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkInformationPreview_1_1NetworkBehaviourInfo/#mirrornetworkinformationpreviewnetworkbehaviourinfo","text":"","title":"Mirror::NetworkInformationPreview::NetworkBehaviourInfo"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkInformationPreview_1_1NetworkBehaviourInfo/#public-attributes","text":"Name NetworkBehaviour behaviour GUIContent name","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkInformationPreview_1_1NetworkBehaviourInfo/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkInformationPreview_1_1NetworkBehaviourInfo/#variable-behaviour","text":"NetworkBehaviour behaviour ;","title":"variable behaviour"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkInformationPreview_1_1NetworkBehaviourInfo/#variable-name","text":"GUIContent name ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable name"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkInformationPreview_1_1NetworkIdentityInfo/","text":"Mirror::NetworkInformationPreview::NetworkIdentityInfo Public Attributes Name GUIContent name GUIContent value Public Attributes Documentation variable name GUIContent name ; variable value GUIContent value ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkInformationPreview::NetworkIdentityInfo"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkInformationPreview_1_1NetworkIdentityInfo/#mirrornetworkinformationpreviewnetworkidentityinfo","text":"","title":"Mirror::NetworkInformationPreview::NetworkIdentityInfo"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkInformationPreview_1_1NetworkIdentityInfo/#public-attributes","text":"Name GUIContent name GUIContent value","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkInformationPreview_1_1NetworkIdentityInfo/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkInformationPreview_1_1NetworkIdentityInfo/#variable-name","text":"GUIContent name ;","title":"variable name"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkInformationPreview_1_1NetworkIdentityInfo/#variable-value","text":"GUIContent value ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable value"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkPingMessage/","text":"Mirror::NetworkPingMessage Inherits from NetworkMessage Public Functions Name NetworkPingMessage (double value) Public Attributes Name double clientTime Public Functions Documentation function NetworkPingMessage inline NetworkPingMessage ( double value ) Public Attributes Documentation variable clientTime double clientTime ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkPingMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkPingMessage/#mirrornetworkpingmessage","text":"Inherits from NetworkMessage","title":"Mirror::NetworkPingMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkPingMessage/#public-functions","text":"Name NetworkPingMessage (double value)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkPingMessage/#public-attributes","text":"Name double clientTime","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkPingMessage/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkPingMessage/#function-networkpingmessage","text":"inline NetworkPingMessage ( double value )","title":"function NetworkPingMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkPingMessage/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkPingMessage/#variable-clienttime","text":"double clientTime ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable clientTime"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkPongMessage/","text":"Mirror::NetworkPongMessage Inherits from NetworkMessage Public Attributes Name double clientTime double serverTime Public Attributes Documentation variable clientTime double clientTime ; variable serverTime double serverTime ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror::NetworkPongMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkPongMessage/#mirrornetworkpongmessage","text":"Inherits from NetworkMessage","title":"Mirror::NetworkPongMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkPongMessage/#public-attributes","text":"Name double clientTime double serverTime","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkPongMessage/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkPongMessage/#variable-clienttime","text":"double clientTime ;","title":"variable clientTime"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkPongMessage/#variable-servertime","text":"double serverTime ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable serverTime"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkRoomManager_1_1PendingPlayer/","text":"Mirror::NetworkRoomManager::PendingPlayer Public Attributes Name NetworkConnection conn GameObject roomPlayer Public Attributes Documentation variable conn NetworkConnection conn ; variable roomPlayer GameObject roomPlayer ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::NetworkRoomManager::PendingPlayer"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkRoomManager_1_1PendingPlayer/#mirrornetworkroommanagerpendingplayer","text":"","title":"Mirror::NetworkRoomManager::PendingPlayer"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkRoomManager_1_1PendingPlayer/#public-attributes","text":"Name NetworkConnection conn GameObject roomPlayer","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkRoomManager_1_1PendingPlayer/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkRoomManager_1_1PendingPlayer/#variable-conn","text":"NetworkConnection conn ;","title":"variable conn"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NetworkRoomManager_1_1PendingPlayer/#variable-roomplayer","text":"GameObject roomPlayer ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable roomPlayer"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NotReadyMessage/","text":"Mirror::NotReadyMessage Inherits from NetworkMessage Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::NotReadyMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1NotReadyMessage/#mirrornotreadymessage","text":"Inherits from NetworkMessage Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::NotReadyMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ObjectDestroyMessage/","text":"Mirror::ObjectDestroyMessage Inherits from NetworkMessage Public Attributes Name uint netId Public Attributes Documentation variable netId uint netId ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::ObjectDestroyMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ObjectDestroyMessage/#mirrorobjectdestroymessage","text":"Inherits from NetworkMessage","title":"Mirror::ObjectDestroyMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ObjectDestroyMessage/#public-attributes","text":"Name uint netId","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ObjectDestroyMessage/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ObjectDestroyMessage/#variable-netid","text":"uint netId ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable netId"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ObjectHideMessage/","text":"Mirror::ObjectHideMessage Inherits from NetworkMessage Public Attributes Name uint netId Public Attributes Documentation variable netId uint netId ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::ObjectHideMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ObjectHideMessage/#mirrorobjecthidemessage","text":"Inherits from NetworkMessage","title":"Mirror::ObjectHideMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ObjectHideMessage/#public-attributes","text":"Name uint netId","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ObjectHideMessage/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ObjectHideMessage/#variable-netid","text":"uint netId ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable netId"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ObjectSpawnFinishedMessage/","text":"Mirror::ObjectSpawnFinishedMessage Inherits from NetworkMessage Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::ObjectSpawnFinishedMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ObjectSpawnFinishedMessage/#mirrorobjectspawnfinishedmessage","text":"Inherits from NetworkMessage Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::ObjectSpawnFinishedMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ObjectSpawnStartedMessage/","text":"Mirror::ObjectSpawnStartedMessage Inherits from NetworkMessage Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::ObjectSpawnStartedMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ObjectSpawnStartedMessage/#mirrorobjectspawnstartedmessage","text":"Inherits from NetworkMessage Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::ObjectSpawnStartedMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ReadyMessage/","text":"Mirror::ReadyMessage Inherits from NetworkMessage Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::ReadyMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1ReadyMessage/#mirrorreadymessage","text":"Inherits from NetworkMessage Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::ReadyMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1RemoteCalls_1_1CommandInfo/","text":"Mirror::RemoteCalls::CommandInfo Public Attributes Name bool ignoreAuthority Public Attributes Documentation variable ignoreAuthority bool ignoreAuthority ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::RemoteCalls::CommandInfo"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1RemoteCalls_1_1CommandInfo/#mirrorremotecallscommandinfo","text":"","title":"Mirror::RemoteCalls::CommandInfo"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1RemoteCalls_1_1CommandInfo/#public-attributes","text":"Name bool ignoreAuthority","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1RemoteCalls_1_1CommandInfo/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1RemoteCalls_1_1CommandInfo/#variable-ignoreauthority","text":"bool ignoreAuthority ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable ignoreAuthority"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1RpcMessage/","text":"Mirror::RpcMessage Inherits from NetworkMessage Public Attributes Name uint netId int componentIndex int functionHash ArraySegment< byte > payload Public Attributes Documentation variable netId uint netId ; variable componentIndex int componentIndex ; variable functionHash int functionHash ; variable payload ArraySegment < byte > payload ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::RpcMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1RpcMessage/#mirrorrpcmessage","text":"Inherits from NetworkMessage","title":"Mirror::RpcMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1RpcMessage/#public-attributes","text":"Name uint netId int componentIndex int functionHash ArraySegment< byte > payload","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1RpcMessage/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1RpcMessage/#variable-netid","text":"uint netId ;","title":"variable netId"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1RpcMessage/#variable-componentindex","text":"int componentIndex ;","title":"variable componentIndex"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1RpcMessage/#variable-functionhash","text":"int functionHash ;","title":"variable functionHash"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1RpcMessage/#variable-payload","text":"ArraySegment < byte > payload ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable payload"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SceneMessage/","text":"Mirror::SceneMessage Inherits from NetworkMessage Public Attributes Name string sceneName SceneOperation sceneOperation bool customHandling Public Attributes Documentation variable sceneName string sceneName ; variable sceneOperation SceneOperation sceneOperation ; variable customHandling bool customHandling ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SceneMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SceneMessage/#mirrorscenemessage","text":"Inherits from NetworkMessage","title":"Mirror::SceneMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SceneMessage/#public-attributes","text":"Name string sceneName SceneOperation sceneOperation bool customHandling","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SceneMessage/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SceneMessage/#variable-scenename","text":"string sceneName ;","title":"variable sceneName"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SceneMessage/#variable-sceneoperation","text":"SceneOperation sceneOperation ;","title":"variable sceneOperation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SceneMessage/#variable-customhandling","text":"bool customHandling ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable customHandling"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1Message/","text":"Mirror::SimpleWeb::Message Public Functions Name Message (EventType type) Message ( ArrayBuffer data) Message (Exception exception) Message (int connId, EventType type) Message (int connId, ArrayBuffer data) Message (int connId, Exception exception) Public Attributes Name readonly int connId readonly EventType type readonly ArrayBuffer data readonly Exception exception Public Functions Documentation function Message inline Message ( EventType type ) function Message inline Message ( ArrayBuffer data ) function Message inline Message ( Exception exception ) function Message inline Message ( int connId , EventType type ) function Message inline Message ( int connId , ArrayBuffer data ) function Message inline Message ( int connId , Exception exception ) Public Attributes Documentation variable connId readonly int connId ; variable type readonly EventType type ; variable data readonly ArrayBuffer data ; variable exception readonly Exception exception ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::Message"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1Message/#mirrorsimplewebmessage","text":"","title":"Mirror::SimpleWeb::Message"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1Message/#public-functions","text":"Name Message (EventType type) Message ( ArrayBuffer data) Message (Exception exception) Message (int connId, EventType type) Message (int connId, ArrayBuffer data) Message (int connId, Exception exception)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1Message/#public-attributes","text":"Name readonly int connId readonly EventType type readonly ArrayBuffer data readonly Exception exception","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1Message/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1Message/#function-message","text":"inline Message ( EventType type )","title":"function Message"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1Message/#function-message_1","text":"inline Message ( ArrayBuffer data )","title":"function Message"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1Message/#function-message_2","text":"inline Message ( Exception exception )","title":"function Message"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1Message/#function-message_3","text":"inline Message ( int connId , EventType type )","title":"function Message"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1Message/#function-message_4","text":"inline Message ( int connId , ArrayBuffer data )","title":"function Message"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1Message/#function-message_5","text":"inline Message ( int connId , Exception exception )","title":"function Message"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1Message/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1Message/#variable-connid","text":"readonly int connId ;","title":"variable connId"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1Message/#variable-type","text":"readonly EventType type ;","title":"variable type"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1Message/#variable-data","text":"readonly ArrayBuffer data ;","title":"variable data"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1Message/#variable-exception","text":"readonly Exception exception ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable exception"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1ReceiveLoop_1_1Config/","text":"Mirror::SimpleWeb::ReceiveLoop::Config Public Functions Name Config (Connection conn, int maxMessageSize, bool expectMask, ConcurrentQueue< Message > queue, BufferPool bufferPool) void Deconstruct (out Connection conn, out int maxMessageSize, out bool expectMask, out ConcurrentQueue< Message > queue, out BufferPool bufferPool) Public Attributes Name readonly Connection conn readonly int maxMessageSize readonly bool expectMask readonly ConcurrentQueue< Message > queue readonly BufferPool bufferPool Public Functions Documentation function Config inline Config ( Connection conn , int maxMessageSize , bool expectMask , ConcurrentQueue < Message > queue , BufferPool bufferPool ) function Deconstruct inline void Deconstruct ( out Connection conn , out int maxMessageSize , out bool expectMask , out ConcurrentQueue < Message > queue , out BufferPool bufferPool ) Public Attributes Documentation variable conn readonly Connection conn ; variable maxMessageSize readonly int maxMessageSize ; variable expectMask readonly bool expectMask ; variable queue readonly ConcurrentQueue < Message > queue ; variable bufferPool readonly BufferPool bufferPool ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::ReceiveLoop::Config"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1ReceiveLoop_1_1Config/#mirrorsimplewebreceiveloopconfig","text":"","title":"Mirror::SimpleWeb::ReceiveLoop::Config"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1ReceiveLoop_1_1Config/#public-functions","text":"Name Config (Connection conn, int maxMessageSize, bool expectMask, ConcurrentQueue< Message > queue, BufferPool bufferPool) void Deconstruct (out Connection conn, out int maxMessageSize, out bool expectMask, out ConcurrentQueue< Message > queue, out BufferPool bufferPool)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1ReceiveLoop_1_1Config/#public-attributes","text":"Name readonly Connection conn readonly int maxMessageSize readonly bool expectMask readonly ConcurrentQueue< Message > queue readonly BufferPool bufferPool","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1ReceiveLoop_1_1Config/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1ReceiveLoop_1_1Config/#function-config","text":"inline Config ( Connection conn , int maxMessageSize , bool expectMask , ConcurrentQueue < Message > queue , BufferPool bufferPool )","title":"function Config"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1ReceiveLoop_1_1Config/#function-deconstruct","text":"inline void Deconstruct ( out Connection conn , out int maxMessageSize , out bool expectMask , out ConcurrentQueue < Message > queue , out BufferPool bufferPool )","title":"function Deconstruct"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1ReceiveLoop_1_1Config/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1ReceiveLoop_1_1Config/#variable-conn","text":"readonly Connection conn ;","title":"variable conn"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1ReceiveLoop_1_1Config/#variable-maxmessagesize","text":"readonly int maxMessageSize ;","title":"variable maxMessageSize"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1ReceiveLoop_1_1Config/#variable-expectmask","text":"readonly bool expectMask ;","title":"variable expectMask"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1ReceiveLoop_1_1Config/#variable-queue","text":"readonly ConcurrentQueue < Message > queue ;","title":"variable queue"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1ReceiveLoop_1_1Config/#variable-bufferpool","text":"readonly BufferPool bufferPool ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable bufferPool"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SendLoop_1_1Config/","text":"Mirror::SimpleWeb::SendLoop::Config Public Functions Name Config (Connection conn, int bufferSize, bool setMask) void Deconstruct (out Connection conn, out int bufferSize, out bool setMask) Public Attributes Name readonly Connection conn readonly int bufferSize readonly bool setMask Public Functions Documentation function Config inline Config ( Connection conn , int bufferSize , bool setMask ) function Deconstruct inline void Deconstruct ( out Connection conn , out int bufferSize , out bool setMask ) Public Attributes Documentation variable conn readonly Connection conn ; variable bufferSize readonly int bufferSize ; variable setMask readonly bool setMask ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::SendLoop::Config"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SendLoop_1_1Config/#mirrorsimplewebsendloopconfig","text":"","title":"Mirror::SimpleWeb::SendLoop::Config"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SendLoop_1_1Config/#public-functions","text":"Name Config (Connection conn, int bufferSize, bool setMask) void Deconstruct (out Connection conn, out int bufferSize, out bool setMask)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SendLoop_1_1Config/#public-attributes","text":"Name readonly Connection conn readonly int bufferSize readonly bool setMask","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SendLoop_1_1Config/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SendLoop_1_1Config/#function-config","text":"inline Config ( Connection conn , int bufferSize , bool setMask )","title":"function Config"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SendLoop_1_1Config/#function-deconstruct","text":"inline void Deconstruct ( out Connection conn , out int bufferSize , out bool setMask )","title":"function Deconstruct"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SendLoop_1_1Config/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SendLoop_1_1Config/#variable-conn","text":"readonly Connection conn ;","title":"variable conn"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SendLoop_1_1Config/#variable-buffersize","text":"readonly int bufferSize ;","title":"variable bufferSize"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SendLoop_1_1Config/#variable-setmask","text":"readonly bool setMask ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable setMask"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SslConfig/","text":"Mirror::SimpleWeb::SslConfig Public Functions Name SslConfig (bool enabled, string certPath, string certPassword, SslProtocols sslProtocols) Public Attributes Name readonly bool enabled readonly string certPath readonly string certPassword readonly SslProtocols sslProtocols Public Functions Documentation function SslConfig inline SslConfig ( bool enabled , string certPath , string certPassword , SslProtocols sslProtocols ) Public Attributes Documentation variable enabled readonly bool enabled ; variable certPath readonly string certPath ; variable certPassword readonly string certPassword ; variable sslProtocols readonly SslProtocols sslProtocols ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::SslConfig"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SslConfig/#mirrorsimplewebsslconfig","text":"","title":"Mirror::SimpleWeb::SslConfig"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SslConfig/#public-functions","text":"Name SslConfig (bool enabled, string certPath, string certPassword, SslProtocols sslProtocols)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SslConfig/#public-attributes","text":"Name readonly bool enabled readonly string certPath readonly string certPassword readonly SslProtocols sslProtocols","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SslConfig/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SslConfig/#function-sslconfig","text":"inline SslConfig ( bool enabled , string certPath , string certPassword , SslProtocols sslProtocols )","title":"function SslConfig"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SslConfig/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SslConfig/#variable-enabled","text":"readonly bool enabled ;","title":"variable enabled"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SslConfig/#variable-certpath","text":"readonly string certPath ;","title":"variable certPath"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SslConfig/#variable-certpassword","text":"readonly string certPassword ;","title":"variable certPassword"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SslConfig/#variable-sslprotocols","text":"readonly SslProtocols sslProtocols ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable sslProtocols"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SslConfigLoader_1_1Cert/","text":"Mirror::SimpleWeb::SslConfigLoader::Cert Public Attributes Name string path string password Public Attributes Documentation variable path string path ; variable password string password ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::SslConfigLoader::Cert"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SslConfigLoader_1_1Cert/#mirrorsimplewebsslconfigloadercert","text":"","title":"Mirror::SimpleWeb::SslConfigLoader::Cert"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SslConfigLoader_1_1Cert/#public-attributes","text":"Name string path string password","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SslConfigLoader_1_1Cert/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SslConfigLoader_1_1Cert/#variable-path","text":"string path ;","title":"variable path"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1SslConfigLoader_1_1Cert/#variable-password","text":"string password ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable password"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1TcpConfig/","text":"Mirror::SimpleWeb::TcpConfig Public Functions Name TcpConfig (bool noDelay, int sendTimeout, int receiveTimeout) void ApplyTo (TcpClient client) Public Attributes Name readonly bool noDelay readonly int sendTimeout readonly int receiveTimeout Public Functions Documentation function TcpConfig inline TcpConfig ( bool noDelay , int sendTimeout , int receiveTimeout ) function ApplyTo inline void ApplyTo ( TcpClient client ) Public Attributes Documentation variable noDelay readonly bool noDelay ; variable sendTimeout readonly int sendTimeout ; variable receiveTimeout readonly int receiveTimeout ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb::TcpConfig"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1TcpConfig/#mirrorsimplewebtcpconfig","text":"","title":"Mirror::SimpleWeb::TcpConfig"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1TcpConfig/#public-functions","text":"Name TcpConfig (bool noDelay, int sendTimeout, int receiveTimeout) void ApplyTo (TcpClient client)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1TcpConfig/#public-attributes","text":"Name readonly bool noDelay readonly int sendTimeout readonly int receiveTimeout","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1TcpConfig/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1TcpConfig/#function-tcpconfig","text":"inline TcpConfig ( bool noDelay , int sendTimeout , int receiveTimeout )","title":"function TcpConfig"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1TcpConfig/#function-applyto","text":"inline void ApplyTo ( TcpClient client )","title":"function ApplyTo"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1TcpConfig/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1TcpConfig/#variable-nodelay","text":"readonly bool noDelay ;","title":"variable noDelay"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1TcpConfig/#variable-sendtimeout","text":"readonly int sendTimeout ;","title":"variable sendTimeout"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SimpleWeb_1_1TcpConfig/#variable-receivetimeout","text":"readonly int receiveTimeout ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable receiveTimeout"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SpawnMessage/","text":"Mirror::SpawnMessage Inherits from NetworkMessage Public Attributes Name uint netId netId of new or existing object bool isLocalPlayer Is the spawning object the local player. Sets ClientScene.localPlayer bool isOwner Sets hasAuthority on the spawned object ulong sceneId The id of the scene object to spawn Guid assetId The id of the prefab to spawn Vector3 position Local position Quaternion rotation Local rotation Vector3 scale Local scale ArraySegment< byte > payload The serialized component data ArraySegment to avoid unnecessary allocations Public Attributes Documentation variable netId uint netId ; netId of new or existing object variable isLocalPlayer bool isLocalPlayer ; Is the spawning object the local player. Sets ClientScene.localPlayer variable isOwner bool isOwner ; Sets hasAuthority on the spawned object variable sceneId ulong sceneId ; The id of the scene object to spawn variable assetId Guid assetId ; The id of the prefab to spawn If sceneId != 0 then it is used instead of assetId variable position Vector3 position ; Local position variable rotation Quaternion rotation ; Local rotation variable scale Vector3 scale ; Local scale variable payload ArraySegment < byte > payload ; The serialized component data ArraySegment to avoid unnecessary allocations Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SpawnMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SpawnMessage/#mirrorspawnmessage","text":"Inherits from NetworkMessage","title":"Mirror::SpawnMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SpawnMessage/#public-attributes","text":"Name uint netId netId of new or existing object bool isLocalPlayer Is the spawning object the local player. Sets ClientScene.localPlayer bool isOwner Sets hasAuthority on the spawned object ulong sceneId The id of the scene object to spawn Guid assetId The id of the prefab to spawn Vector3 position Local position Quaternion rotation Local rotation Vector3 scale Local scale ArraySegment< byte > payload The serialized component data ArraySegment to avoid unnecessary allocations","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SpawnMessage/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SpawnMessage/#variable-netid","text":"uint netId ; netId of new or existing object","title":"variable netId"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SpawnMessage/#variable-islocalplayer","text":"bool isLocalPlayer ; Is the spawning object the local player. Sets ClientScene.localPlayer","title":"variable isLocalPlayer"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SpawnMessage/#variable-isowner","text":"bool isOwner ; Sets hasAuthority on the spawned object","title":"variable isOwner"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SpawnMessage/#variable-sceneid","text":"ulong sceneId ; The id of the scene object to spawn","title":"variable sceneId"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SpawnMessage/#variable-assetid","text":"Guid assetId ; The id of the prefab to spawn If sceneId != 0 then it is used instead of assetId","title":"variable assetId"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SpawnMessage/#variable-position","text":"Vector3 position ; Local position","title":"variable position"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SpawnMessage/#variable-rotation","text":"Quaternion rotation ; Local rotation","title":"variable rotation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SpawnMessage/#variable-scale","text":"Vector3 scale ; Local scale","title":"variable scale"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SpawnMessage/#variable-payload","text":"ArraySegment < byte > payload ; The serialized component data ArraySegment to avoid unnecessary allocations Updated on 29 January 2021 at 18:34:48 UTC","title":"variable payload"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncIDictionary_1_1Change/","text":"Mirror::SyncIDictionary::Change Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncIDictionary::Change"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncIDictionary_1_1Change/#mirrorsyncidictionarychange","text":"Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncIDictionary::Change"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncList_1_1Change/","text":"Mirror::SyncList::Change Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncList::Change"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncList_1_1Change/#mirrorsynclistchange","text":"Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncList::Change"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncList_1_1Enumerator/","text":"Mirror::SyncList::Enumerator Inherits from IEnumerator< T > Public Functions Name Enumerator ( SyncList < T > list) bool MoveNext () void Reset () void Dispose () Public Properties Name T Current Public Attributes Name readonly SyncList < T > list int index object IEnumerator. Current Public Functions Documentation function Enumerator inline Enumerator ( SyncList < T > list ) function MoveNext inline bool MoveNext () function Reset void Reset () function Dispose inline void Dispose () Public Property Documentation property Current T Current ; Public Attributes Documentation variable list readonly SyncList < T > list ; variable index int index ; variable Current object IEnumerator . Current => Current ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncList::Enumerator"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncList_1_1Enumerator/#mirrorsynclistenumerator","text":"Inherits from IEnumerator< T >","title":"Mirror::SyncList::Enumerator"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncList_1_1Enumerator/#public-functions","text":"Name Enumerator ( SyncList < T > list) bool MoveNext () void Reset () void Dispose ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncList_1_1Enumerator/#public-properties","text":"Name T Current","title":"Public Properties"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncList_1_1Enumerator/#public-attributes","text":"Name readonly SyncList < T > list int index object IEnumerator. Current","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncList_1_1Enumerator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncList_1_1Enumerator/#function-enumerator","text":"inline Enumerator ( SyncList < T > list )","title":"function Enumerator"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncList_1_1Enumerator/#function-movenext","text":"inline bool MoveNext ()","title":"function MoveNext"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncList_1_1Enumerator/#function-reset","text":"void Reset ()","title":"function Reset"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncList_1_1Enumerator/#function-dispose","text":"inline void Dispose ()","title":"function Dispose"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncList_1_1Enumerator/#public-property-documentation","text":"","title":"Public Property Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncList_1_1Enumerator/#property-current","text":"T Current ;","title":"property Current"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncList_1_1Enumerator/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncList_1_1Enumerator/#variable-list","text":"readonly SyncList < T > list ;","title":"variable list"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncList_1_1Enumerator/#variable-index","text":"int index ;","title":"variable index"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncList_1_1Enumerator/#variable-current","text":"object IEnumerator . Current => Current ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable Current"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncSet_1_1Change/","text":"Mirror::SyncSet::Change Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncSet::Change"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1SyncSet_1_1Change/#mirrorsyncsetchange","text":"Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::SyncSet::Change"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UIntDecimal/","text":"Mirror::UIntDecimal Public Attributes Name ulong longValue1 ulong longValue2 decimal decimalValue Public Attributes Documentation variable longValue1 ulong longValue1 ; variable longValue2 ulong longValue2 ; variable decimalValue decimal decimalValue ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::UIntDecimal"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UIntDecimal/#mirroruintdecimal","text":"","title":"Mirror::UIntDecimal"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UIntDecimal/#public-attributes","text":"Name ulong longValue1 ulong longValue2 decimal decimalValue","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UIntDecimal/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UIntDecimal/#variable-longvalue1","text":"ulong longValue1 ;","title":"variable longValue1"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UIntDecimal/#variable-longvalue2","text":"ulong longValue2 ;","title":"variable longValue2"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UIntDecimal/#variable-decimalvalue","text":"decimal decimalValue ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable decimalValue"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UIntDouble/","text":"Mirror::UIntDouble Public Attributes Name double doubleValue ulong longValue Public Attributes Documentation variable doubleValue double doubleValue ; variable longValue ulong longValue ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::UIntDouble"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UIntDouble/#mirroruintdouble","text":"","title":"Mirror::UIntDouble"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UIntDouble/#public-attributes","text":"Name double doubleValue ulong longValue","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UIntDouble/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UIntDouble/#variable-doublevalue","text":"double doubleValue ;","title":"variable doubleValue"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UIntDouble/#variable-longvalue","text":"ulong longValue ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable longValue"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UIntFloat/","text":"Mirror::UIntFloat Public Attributes Name float floatValue uint intValue Public Attributes Documentation variable floatValue float floatValue ; variable intValue uint intValue ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::UIntFloat"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UIntFloat/#mirroruintfloat","text":"","title":"Mirror::UIntFloat"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UIntFloat/#public-attributes","text":"Name float floatValue uint intValue","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UIntFloat/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UIntFloat/#variable-floatvalue","text":"float floatValue ;","title":"variable floatValue"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UIntFloat/#variable-intvalue","text":"uint intValue ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable intValue"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UpdateVarsMessage/","text":"Mirror::UpdateVarsMessage Inherits from NetworkMessage Public Attributes Name uint netId ArraySegment< byte > payload Public Attributes Documentation variable netId uint netId ; variable payload ArraySegment < byte > payload ; Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::UpdateVarsMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UpdateVarsMessage/#mirrorupdatevarsmessage","text":"Inherits from NetworkMessage","title":"Mirror::UpdateVarsMessage"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UpdateVarsMessage/#public-attributes","text":"Name uint netId ArraySegment< byte > payload","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UpdateVarsMessage/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UpdateVarsMessage/#variable-netid","text":"uint netId ;","title":"variable netId"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1UpdateVarsMessage/#variable-payload","text":"ArraySegment < byte > payload ; Updated on 29 January 2021 at 18:34:48 UTC","title":"variable payload"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Weaver_1_1NetworkBehaviourProcessor_1_1ClientRpcResult/","text":"Mirror::Weaver::NetworkBehaviourProcessor::ClientRpcResult Public Attributes Name MethodDefinition method bool excludeOwner Public Attributes Documentation variable method MethodDefinition method ; variable excludeOwner bool excludeOwner ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::NetworkBehaviourProcessor::ClientRpcResult"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Weaver_1_1NetworkBehaviourProcessor_1_1ClientRpcResult/#mirrorweavernetworkbehaviourprocessorclientrpcresult","text":"","title":"Mirror::Weaver::NetworkBehaviourProcessor::ClientRpcResult"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Weaver_1_1NetworkBehaviourProcessor_1_1ClientRpcResult/#public-attributes","text":"Name MethodDefinition method bool excludeOwner","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Weaver_1_1NetworkBehaviourProcessor_1_1ClientRpcResult/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Weaver_1_1NetworkBehaviourProcessor_1_1ClientRpcResult/#variable-method","text":"MethodDefinition method ;","title":"variable method"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Weaver_1_1NetworkBehaviourProcessor_1_1ClientRpcResult/#variable-excludeowner","text":"bool excludeOwner ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable excludeOwner"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Weaver_1_1NetworkBehaviourProcessor_1_1CmdResult/","text":"Mirror::Weaver::NetworkBehaviourProcessor::CmdResult Public Attributes Name MethodDefinition method bool ignoreAuthority Public Attributes Documentation variable method MethodDefinition method ; variable ignoreAuthority bool ignoreAuthority ; Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver::NetworkBehaviourProcessor::CmdResult"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Weaver_1_1NetworkBehaviourProcessor_1_1CmdResult/#mirrorweavernetworkbehaviourprocessorcmdresult","text":"","title":"Mirror::Weaver::NetworkBehaviourProcessor::CmdResult"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Weaver_1_1NetworkBehaviourProcessor_1_1CmdResult/#public-attributes","text":"Name MethodDefinition method bool ignoreAuthority","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Weaver_1_1NetworkBehaviourProcessor_1_1CmdResult/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Weaver_1_1NetworkBehaviourProcessor_1_1CmdResult/#variable-method","text":"MethodDefinition method ;","title":"variable method"},{"location":"Cops%20And%20Robbers/Classes/structMirror_1_1Weaver_1_1NetworkBehaviourProcessor_1_1CmdResult/#variable-ignoreauthority","text":"bool ignoreAuthority ; Updated on 29 January 2021 at 18:34:49 UTC","title":"variable ignoreAuthority"},{"location":"Cops%20And%20Robbers/Classes/structTelepathy_1_1Message/","text":"Telepathy::Message Public Functions Name Message (int connectionId, EventType eventType, byte [] data) Public Attributes Name readonly int connectionId readonly EventType eventType readonly byte [] data Public Functions Documentation function Message inline Message ( int connectionId , EventType eventType , byte [] data ) Public Attributes Documentation variable connectionId readonly int connectionId ; variable eventType readonly EventType eventType ; variable data readonly byte [] data ; Updated on 29 January 2021 at 18:34:47 UTC","title":"Telepathy::Message"},{"location":"Cops%20And%20Robbers/Classes/structTelepathy_1_1Message/#telepathymessage","text":"","title":"Telepathy::Message"},{"location":"Cops%20And%20Robbers/Classes/structTelepathy_1_1Message/#public-functions","text":"Name Message (int connectionId, EventType eventType, byte [] data)","title":"Public Functions"},{"location":"Cops%20And%20Robbers/Classes/structTelepathy_1_1Message/#public-attributes","text":"Name readonly int connectionId readonly EventType eventType readonly byte [] data","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/Classes/structTelepathy_1_1Message/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/Classes/structTelepathy_1_1Message/#function-message","text":"inline Message ( int connectionId , EventType eventType , byte [] data )","title":"function Message"},{"location":"Cops%20And%20Robbers/Classes/structTelepathy_1_1Message/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/Classes/structTelepathy_1_1Message/#variable-connectionid","text":"readonly int connectionId ;","title":"variable connectionId"},{"location":"Cops%20And%20Robbers/Classes/structTelepathy_1_1Message/#variable-eventtype","text":"readonly EventType eventType ;","title":"variable eventType"},{"location":"Cops%20And%20Robbers/Classes/structTelepathy_1_1Message/#variable-data","text":"readonly byte [] data ; Updated on 29 January 2021 at 18:34:47 UTC","title":"variable data"},{"location":"Cops%20And%20Robbers/Classes/structkcp2k_1_1Kcp_1_1AckItem/","text":"kcp2k::Kcp::AckItem Updated on 29 January 2021 at 18:34:49 UTC","title":"kcp2k::Kcp::AckItem"},{"location":"Cops%20And%20Robbers/Classes/structkcp2k_1_1Kcp_1_1AckItem/#kcp2kkcpackitem","text":"Updated on 29 January 2021 at 18:34:49 UTC","title":"kcp2k::Kcp::AckItem"},{"location":"Cops%20And%20Robbers/Examples/","text":"Examples Updated on 29 January 2021 at 18:34:50 UTC","title":"Examples"},{"location":"Cops%20And%20Robbers/Examples/#examples","text":"Updated on 29 January 2021 at 18:34:50 UTC","title":"Examples"},{"location":"Cops%20And%20Robbers/Modules/","text":"Modules Updated on 29 January 2021 at 18:34:50 UTC","title":"Modules"},{"location":"Cops%20And%20Robbers/Modules/#modules","text":"Updated on 29 January 2021 at 18:34:50 UTC","title":"Modules"},{"location":"Cops%20And%20Robbers/Namespaces/","text":"Namespaces namespace AOT namespace Cinemachine namespace Conditional namespace Guid namespace JetBrains::Annotations namespace Me namespace DerangedSenators namespace CopsAndRobbers namespace Mirror namespace Authenticators namespace Cloud namespace ListServerService namespace Discovery namespace EditorScripts namespace Logging namespace Experimental namespace Logging namespace RemoteCalls namespace SimpleWeb namespace Weaver namespace Mono::CecilX namespace Mono::CecilX::Cil namespace Mono::CecilX::Rocks namespace Object namespace Stopwatch namespace Telepathy namespace Unity::Collections::LowLevel::Unsafe namespace UnityAssembly namespace UnityEditor namespace UnityEditor::Callbacks namespace UnityEditor::Compilation namespace UnityEditorInternal namespace kcp2k Updated on 29 January 2021 at 18:34:50 UTC","title":"Namespaces"},{"location":"Cops%20And%20Robbers/Namespaces/#namespaces","text":"namespace AOT namespace Cinemachine namespace Conditional namespace Guid namespace JetBrains::Annotations namespace Me namespace DerangedSenators namespace CopsAndRobbers namespace Mirror namespace Authenticators namespace Cloud namespace ListServerService namespace Discovery namespace EditorScripts namespace Logging namespace Experimental namespace Logging namespace RemoteCalls namespace SimpleWeb namespace Weaver namespace Mono::CecilX namespace Mono::CecilX::Cil namespace Mono::CecilX::Rocks namespace Object namespace Stopwatch namespace Telepathy namespace Unity::Collections::LowLevel::Unsafe namespace UnityAssembly namespace UnityEditor namespace UnityEditor::Callbacks namespace UnityEditor::Compilation namespace UnityEditorInternal namespace kcp2k Updated on 29 January 2021 at 18:34:50 UTC","title":"Namespaces"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceAOT/","text":"AOT Updated on 29 January 2021 at 18:34:50 UTC","title":"AOT"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceAOT/#aot","text":"Updated on 29 January 2021 at 18:34:50 UTC","title":"AOT"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceCinemachine/","text":"Cinemachine Updated on 29 January 2021 at 18:34:50 UTC","title":"Cinemachine"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceCinemachine/#cinemachine","text":"Updated on 29 January 2021 at 18:34:50 UTC","title":"Cinemachine"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceConditional/","text":"Conditional Updated on 29 January 2021 at 18:34:50 UTC","title":"Conditional"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceConditional/#conditional","text":"Updated on 29 January 2021 at 18:34:50 UTC","title":"Conditional"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceGuid/","text":"Guid Updated on 29 January 2021 at 18:34:50 UTC","title":"Guid"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceGuid/#guid","text":"Updated on 29 January 2021 at 18:34:50 UTC","title":"Guid"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceJetBrains_1_1Annotations/","text":"JetBrains::Annotations Updated on 29 January 2021 at 18:34:50 UTC","title":"JetBrains::Annotations"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceJetBrains_1_1Annotations/#jetbrainsannotations","text":"Updated on 29 January 2021 at 18:34:50 UTC","title":"JetBrains::Annotations"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMe/","text":"Me Namespaces Name Me::DerangedSenators Updated on 29 January 2021 at 18:34:49 UTC","title":"Me"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMe/#me","text":"","title":"Me"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMe/#namespaces","text":"Name Me::DerangedSenators Updated on 29 January 2021 at 18:34:49 UTC","title":"Namespaces"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMe_1_1DerangedSenators/","text":"Me::DerangedSenators Namespaces Name Me::DerangedSenators::CopsAndRobbers Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMe_1_1DerangedSenators/#mederangedsenators","text":"","title":"Me::DerangedSenators"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMe_1_1DerangedSenators/#namespaces","text":"Name Me::DerangedSenators::CopsAndRobbers Updated on 29 January 2021 at 18:34:49 UTC","title":"Namespaces"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMe_1_1DerangedSenators_1_1CopsAndRobbers/","text":"Me::DerangedSenators::CopsAndRobbers Classes Name class Me::DerangedSenators::CopsAndRobbers::AttackCircle class Me::DerangedSenators::CopsAndRobbers::AutoHostClient class Me::DerangedSenators::CopsAndRobbers::CameraController Camera Controller script class Me::DerangedSenators::CopsAndRobbers::CoinPickup Script for handling Coin Pickup Events class Me::DerangedSenators::CopsAndRobbers::EndOfRoundScript class Me::DerangedSenators::CopsAndRobbers::GameManager Singleton Class that manages the Game class Me::DerangedSenators::CopsAndRobbers::GameNetworkManager class Me::DerangedSenators::CopsAndRobbers::GameOverScript class Me::DerangedSenators::CopsAndRobbers::GenericSingleton Generic singleton Class. Extend this class to make singleton component. Example: class Me::DerangedSenators::CopsAndRobbers::HealthBar class Me::DerangedSenators::CopsAndRobbers::MainMenu class Me::DerangedSenators::CopsAndRobbers::Match class Me::DerangedSenators::CopsAndRobbers::MatchExtensions class Me::DerangedSenators::CopsAndRobbers::MatchMaker class Me::DerangedSenators::CopsAndRobbers::MoneyManager class Me::DerangedSenators::CopsAndRobbers::Player class Me::DerangedSenators::CopsAndRobbers::PlayerAttack class Me::DerangedSenators::CopsAndRobbers::PlayerCameraContoller Script which defines the follow attribute for the Cinemachine Virtual Camera class Me::DerangedSenators::CopsAndRobbers::PlayerControls class Me::DerangedSenators::CopsAndRobbers::PlayerHealth This script is responsible for the function of the health bar and damage class Me::DerangedSenators::CopsAndRobbers::PlayerMovement Script that controls Player Movement class Me::DerangedSenators::CopsAndRobbers::RoundBreakTimeManager class Me::DerangedSenators::CopsAndRobbers::SyncListGameObject class Me::DerangedSenators::CopsAndRobbers::SyncListMatch class Me::DerangedSenators::CopsAndRobbers::TimeManager class Me::DerangedSenators::CopsAndRobbers::TurnManager class Me::DerangedSenators::CopsAndRobbers::UILobby class Me::DerangedSenators::CopsAndRobbers::UIPlayer class Me::DerangedSenators::CopsAndRobbers::VirtualCameraSingleton Singleton Class to provide access to the Virtual Camera class Me::DerangedSenators::CopsAndRobbers::WeaponOffset Updated on 29 January 2021 at 18:34:49 UTC","title":"Me::DerangedSenators::CopsAndRobbers"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMe_1_1DerangedSenators_1_1CopsAndRobbers/#mederangedsenatorscopsandrobbers","text":"","title":"Me::DerangedSenators::CopsAndRobbers"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMe_1_1DerangedSenators_1_1CopsAndRobbers/#classes","text":"Name class Me::DerangedSenators::CopsAndRobbers::AttackCircle class Me::DerangedSenators::CopsAndRobbers::AutoHostClient class Me::DerangedSenators::CopsAndRobbers::CameraController Camera Controller script class Me::DerangedSenators::CopsAndRobbers::CoinPickup Script for handling Coin Pickup Events class Me::DerangedSenators::CopsAndRobbers::EndOfRoundScript class Me::DerangedSenators::CopsAndRobbers::GameManager Singleton Class that manages the Game class Me::DerangedSenators::CopsAndRobbers::GameNetworkManager class Me::DerangedSenators::CopsAndRobbers::GameOverScript class Me::DerangedSenators::CopsAndRobbers::GenericSingleton Generic singleton Class. Extend this class to make singleton component. Example: class Me::DerangedSenators::CopsAndRobbers::HealthBar class Me::DerangedSenators::CopsAndRobbers::MainMenu class Me::DerangedSenators::CopsAndRobbers::Match class Me::DerangedSenators::CopsAndRobbers::MatchExtensions class Me::DerangedSenators::CopsAndRobbers::MatchMaker class Me::DerangedSenators::CopsAndRobbers::MoneyManager class Me::DerangedSenators::CopsAndRobbers::Player class Me::DerangedSenators::CopsAndRobbers::PlayerAttack class Me::DerangedSenators::CopsAndRobbers::PlayerCameraContoller Script which defines the follow attribute for the Cinemachine Virtual Camera class Me::DerangedSenators::CopsAndRobbers::PlayerControls class Me::DerangedSenators::CopsAndRobbers::PlayerHealth This script is responsible for the function of the health bar and damage class Me::DerangedSenators::CopsAndRobbers::PlayerMovement Script that controls Player Movement class Me::DerangedSenators::CopsAndRobbers::RoundBreakTimeManager class Me::DerangedSenators::CopsAndRobbers::SyncListGameObject class Me::DerangedSenators::CopsAndRobbers::SyncListMatch class Me::DerangedSenators::CopsAndRobbers::TimeManager class Me::DerangedSenators::CopsAndRobbers::TurnManager class Me::DerangedSenators::CopsAndRobbers::UILobby class Me::DerangedSenators::CopsAndRobbers::UIPlayer class Me::DerangedSenators::CopsAndRobbers::VirtualCameraSingleton Singleton Class to provide access to the Virtual Camera class Me::DerangedSenators::CopsAndRobbers::WeaponOffset Updated on 29 January 2021 at 18:34:49 UTC","title":"Classes"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror/","text":"Mirror Namespaces Name Mirror::Authenticators Mirror::Cloud Mirror::Discovery Mirror::EditorScripts Mirror::Experimental Mirror::Logging Mirror::RemoteCalls Mirror::SimpleWeb Mirror::Weaver Classes Name struct Mirror::AddPlayerMessage class Mirror::Channels class Mirror::ClientAttribute Prevents the server from running this method. class Mirror::ClientCallbackAttribute Prevents the server from running this method. class Mirror::ClientRpcAttribute The server uses a Remote Procedure Call (RPC) to run this function on clients. class Mirror::ClientScene A client manager which contains static client information and functions. class Mirror::CommandAttribute Call this from a client to run this function on the server. struct Mirror::CommandMessage class Mirror::Compression Functions to Compress Quaternions and Floats struct Mirror::ConnectMessage struct Mirror::DisconnectMessage class Mirror::EditorHelper class Mirror::EnterPlayModeSettingsCheck struct Mirror::ErrorMessage class Mirror::ExponentialMovingAverage class Mirror::FallbackTransport class Mirror::ILoggerExtensions interface Mirror::IMessageBase class Mirror::InspectorHelper class Mirror::LLAPITransport class Mirror::LogFactory class Mirror::LogFilter class Mirror::MessageBase class Mirror::MessagePacker class Mirror::MiddlewareTransport Allows Middleware to override some of the transport methods or let the inner transport handle them. class Mirror::MultiplexTransport class Mirror::NetworkAnimator A component to synchronize Mecanim animation states for networked objects. class Mirror::NetworkAuthenticator Base class for implementing component-based authentication during the Connect phase class Mirror::NetworkBehaviour Base class which should be inherited by scripts which contain networking functionality. class Mirror::NetworkBehaviourInspector class Mirror::NetworkClient This is a network client class used by the networking system. It contains a NetworkConnection that is used to connect to a network server. class Mirror::NetworkConnection A High level network connection. This is used for connections from client-to-server and for connection from server-to-client. class Mirror::NetworkConnectionToClient class Mirror::NetworkConnectionToServer class Mirror::NetworkDiagnostics Provides profiling information from mirror A profiler can subscribe to these events and present the data in a friendly way to the user class Mirror::NetworkIdentity The NetworkIdentity identifies objects across the network, between server and clients. Its primary data is a NetworkInstanceId which is allocated by the server and then set on clients. This is used in network communications to be able to lookup game objects on different machines. class Mirror::NetworkInformationPreview class Mirror::NetworkLobbyManager This is a specialized NetworkManager that includes a networked lobby. class Mirror::NetworkLobbyPlayer This component works in conjunction with the NetworkLobbyManager to make up the multiplayer lobby system. class Mirror::NetworkManager class Mirror::NetworkManagerEditor class Mirror::NetworkManagerHUD An extension for the NetworkManager that displays a default HUD for controlling the network state of the game. class Mirror::NetworkMatchChecker Component that controls visibility of networked objects based on match id. interface Mirror::NetworkMessage class Mirror::NetworkOwnerChecker Component that limits visibility of networked objects to the authority client. class Mirror::NetworkPingDisplay Component that will display the clients ping in milliseconds struct Mirror::NetworkPingMessage struct Mirror::NetworkPongMessage class Mirror::NetworkProximityChecker Component that controls visibility of networked objects for players. class Mirror::NetworkReader Binary stream Reader. Supports simple types, buffers, arrays, structs, and nested types class Mirror::NetworkReaderExtensions class Mirror::NetworkReaderPool Pool of NetworkReaders class Mirror::NetworkRoomManager This is a specialized NetworkManager that includes a networked room. class Mirror::NetworkRoomPlayer This component works in conjunction with the NetworkRoomManager to make up the multiplayer room system. class Mirror::NetworkSceneChecker Component that controls visibility of networked objects between scenes. class Mirror::NetworkScenePostProcess class Mirror::NetworkServer The NetworkServer. class Mirror::NetworkStartPosition This component is used to make a gameObject a starting position for spawning player objects in multiplayer games. class Mirror::NetworkTime Synchronize time between the server and the clients class Mirror::NetworkTransform class Mirror::NetworkTransformBase class Mirror::NetworkTransformChild A component to synchronize the position of child transforms of networked objects. class Mirror::NetworkVisibility class Mirror::NetworkWriter Binary stream Writer. Supports simple types, buffers, arrays, structs, and nested types class Mirror::NetworkWriterExtensions class Mirror::NetworkWriterPool Pool of NetworkWriters struct Mirror::NotReadyMessage struct Mirror::ObjectDestroyMessage struct Mirror::ObjectHideMessage struct Mirror::ObjectSpawnFinishedMessage struct Mirror::ObjectSpawnStartedMessage class Mirror::Pool class Mirror::PooledNetworkReader NetworkReader to be used with [NetworkReaderPool] class Mirror::PooledNetworkWriter NetworkWriter to be used with [NetworkWriterPool] class Mirror::PreprocessorDefine class Mirror::Reader a class that holds readers for the different types Note that c# creates a different static variable for each type This will be populated by the weaver struct Mirror::ReadyMessage struct Mirror::RpcMessage class Mirror::SceneAttribute Converts a string property into a Scene property in the inspector class Mirror::SceneDrawer struct Mirror::SceneMessage class Mirror::ServerAttribute Prevents clients from running this method. class Mirror::ServerCallbackAttribute Prevents clients from running this method. class Mirror::ShowInInspectorAttribute Used to show private SyncList in the inspector, struct Mirror::SpawnMessage class Mirror::StringHash class Mirror::SyncDictionary class Mirror::SyncHashSet class Mirror::SyncIDictionary class Mirror::SyncList class Mirror::SyncListBool class Mirror::SyncListDrawer class Mirror::SyncListFloat class Mirror::SyncListInt class Mirror::SyncListString class Mirror::SyncListUInt interface Mirror::SyncObject A sync object is an object that can synchronize it's state between server and client, such as a SyncList class Mirror::SyncSet class Mirror::SyncSortedSet class Mirror::SyncVarAttribute SyncVars are used to synchronize a variable from the server to all clients automatically. class Mirror::SyncVarAttributeDrawer class Mirror::TargetRpcAttribute The server uses a Remote Procedure Call (RPC) to run this function on a specific client. class Mirror::TelepathyTransport class Mirror::Transport Abstract transport layer component class Mirror::ULocalConnectionToClient class Mirror::UnityEventNetworkConnection Unity Event for the NetworkConnection struct Mirror::UpdateVarsMessage class Mirror::Writer A class that holds writers for the different types Types Name enum SceneOperation { Normal, LoadAdditive, UnloadAdditive } enum SyncMode { Observers, Owner } Sync to everyone, or only to owner. enum ConnectState { None, Connecting, Connected, Disconnected } enum PlayerSpawnMethod { Random, RoundRobin } Enumeration of methods of where to spawn player objects in multiplayer games. enum NetworkManagerMode { Offline, ServerOnly, ClientOnly, Host } Enumeration of methods of current Network Manager state at runtime. enum MirrorInvokeType { Command, ClientRpc } enum Version { Current = 1 } Functions Name delegate void NetworkMessageDelegate ( NetworkConnection conn, NetworkReader reader, int channelId) delegate GameObject SpawnDelegate (Vector3 position, Guid assetId) delegate GameObject SpawnHandlerDelegate ( SpawnMessage msg) delegate void UnSpawnDelegate (GameObject spawned) Types Documentation enum SceneOperation Enumerator Value Description Normal LoadAdditive UnloadAdditive enum SyncMode Enumerator Value Description Observers Owner Sync to everyone, or only to owner. enum ConnectState Enumerator Value Description None Connecting Connected Disconnected enum PlayerSpawnMethod Enumerator Value Description Random RoundRobin Enumeration of methods of where to spawn player objects in multiplayer games. enum NetworkManagerMode Enumerator Value Description Offline ServerOnly ClientOnly Host Enumeration of methods of current Network Manager state at runtime. enum MirrorInvokeType Enumerator Value Description Command ClientRpc enum Version Enumerator Value Description Current 1 Functions Documentation function NetworkMessageDelegate delegate void NetworkMessageDelegate ( NetworkConnection conn , NetworkReader reader , int channelId ) function SpawnDelegate delegate GameObject SpawnDelegate ( Vector3 position , Guid assetId ) function SpawnHandlerDelegate delegate GameObject SpawnHandlerDelegate ( SpawnMessage msg ) function UnSpawnDelegate delegate void UnSpawnDelegate ( GameObject spawned ) Updated on 29 January 2021 at 18:34:47 UTC","title":"Mirror"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror/#mirror","text":"","title":"Mirror"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror/#namespaces","text":"Name Mirror::Authenticators Mirror::Cloud Mirror::Discovery Mirror::EditorScripts Mirror::Experimental Mirror::Logging Mirror::RemoteCalls Mirror::SimpleWeb Mirror::Weaver","title":"Namespaces"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror/#classes","text":"Name struct Mirror::AddPlayerMessage class Mirror::Channels class Mirror::ClientAttribute Prevents the server from running this method. class Mirror::ClientCallbackAttribute Prevents the server from running this method. class Mirror::ClientRpcAttribute The server uses a Remote Procedure Call (RPC) to run this function on clients. class Mirror::ClientScene A client manager which contains static client information and functions. class Mirror::CommandAttribute Call this from a client to run this function on the server. struct Mirror::CommandMessage class Mirror::Compression Functions to Compress Quaternions and Floats struct Mirror::ConnectMessage struct Mirror::DisconnectMessage class Mirror::EditorHelper class Mirror::EnterPlayModeSettingsCheck struct Mirror::ErrorMessage class Mirror::ExponentialMovingAverage class Mirror::FallbackTransport class Mirror::ILoggerExtensions interface Mirror::IMessageBase class Mirror::InspectorHelper class Mirror::LLAPITransport class Mirror::LogFactory class Mirror::LogFilter class Mirror::MessageBase class Mirror::MessagePacker class Mirror::MiddlewareTransport Allows Middleware to override some of the transport methods or let the inner transport handle them. class Mirror::MultiplexTransport class Mirror::NetworkAnimator A component to synchronize Mecanim animation states for networked objects. class Mirror::NetworkAuthenticator Base class for implementing component-based authentication during the Connect phase class Mirror::NetworkBehaviour Base class which should be inherited by scripts which contain networking functionality. class Mirror::NetworkBehaviourInspector class Mirror::NetworkClient This is a network client class used by the networking system. It contains a NetworkConnection that is used to connect to a network server. class Mirror::NetworkConnection A High level network connection. This is used for connections from client-to-server and for connection from server-to-client. class Mirror::NetworkConnectionToClient class Mirror::NetworkConnectionToServer class Mirror::NetworkDiagnostics Provides profiling information from mirror A profiler can subscribe to these events and present the data in a friendly way to the user class Mirror::NetworkIdentity The NetworkIdentity identifies objects across the network, between server and clients. Its primary data is a NetworkInstanceId which is allocated by the server and then set on clients. This is used in network communications to be able to lookup game objects on different machines. class Mirror::NetworkInformationPreview class Mirror::NetworkLobbyManager This is a specialized NetworkManager that includes a networked lobby. class Mirror::NetworkLobbyPlayer This component works in conjunction with the NetworkLobbyManager to make up the multiplayer lobby system. class Mirror::NetworkManager class Mirror::NetworkManagerEditor class Mirror::NetworkManagerHUD An extension for the NetworkManager that displays a default HUD for controlling the network state of the game. class Mirror::NetworkMatchChecker Component that controls visibility of networked objects based on match id. interface Mirror::NetworkMessage class Mirror::NetworkOwnerChecker Component that limits visibility of networked objects to the authority client. class Mirror::NetworkPingDisplay Component that will display the clients ping in milliseconds struct Mirror::NetworkPingMessage struct Mirror::NetworkPongMessage class Mirror::NetworkProximityChecker Component that controls visibility of networked objects for players. class Mirror::NetworkReader Binary stream Reader. Supports simple types, buffers, arrays, structs, and nested types class Mirror::NetworkReaderExtensions class Mirror::NetworkReaderPool Pool of NetworkReaders class Mirror::NetworkRoomManager This is a specialized NetworkManager that includes a networked room. class Mirror::NetworkRoomPlayer This component works in conjunction with the NetworkRoomManager to make up the multiplayer room system. class Mirror::NetworkSceneChecker Component that controls visibility of networked objects between scenes. class Mirror::NetworkScenePostProcess class Mirror::NetworkServer The NetworkServer. class Mirror::NetworkStartPosition This component is used to make a gameObject a starting position for spawning player objects in multiplayer games. class Mirror::NetworkTime Synchronize time between the server and the clients class Mirror::NetworkTransform class Mirror::NetworkTransformBase class Mirror::NetworkTransformChild A component to synchronize the position of child transforms of networked objects. class Mirror::NetworkVisibility class Mirror::NetworkWriter Binary stream Writer. Supports simple types, buffers, arrays, structs, and nested types class Mirror::NetworkWriterExtensions class Mirror::NetworkWriterPool Pool of NetworkWriters struct Mirror::NotReadyMessage struct Mirror::ObjectDestroyMessage struct Mirror::ObjectHideMessage struct Mirror::ObjectSpawnFinishedMessage struct Mirror::ObjectSpawnStartedMessage class Mirror::Pool class Mirror::PooledNetworkReader NetworkReader to be used with [NetworkReaderPool] class Mirror::PooledNetworkWriter NetworkWriter to be used with [NetworkWriterPool] class Mirror::PreprocessorDefine class Mirror::Reader a class that holds readers for the different types Note that c# creates a different static variable for each type This will be populated by the weaver struct Mirror::ReadyMessage struct Mirror::RpcMessage class Mirror::SceneAttribute Converts a string property into a Scene property in the inspector class Mirror::SceneDrawer struct Mirror::SceneMessage class Mirror::ServerAttribute Prevents clients from running this method. class Mirror::ServerCallbackAttribute Prevents clients from running this method. class Mirror::ShowInInspectorAttribute Used to show private SyncList in the inspector, struct Mirror::SpawnMessage class Mirror::StringHash class Mirror::SyncDictionary class Mirror::SyncHashSet class Mirror::SyncIDictionary class Mirror::SyncList class Mirror::SyncListBool class Mirror::SyncListDrawer class Mirror::SyncListFloat class Mirror::SyncListInt class Mirror::SyncListString class Mirror::SyncListUInt interface Mirror::SyncObject A sync object is an object that can synchronize it's state between server and client, such as a SyncList class Mirror::SyncSet class Mirror::SyncSortedSet class Mirror::SyncVarAttribute SyncVars are used to synchronize a variable from the server to all clients automatically. class Mirror::SyncVarAttributeDrawer class Mirror::TargetRpcAttribute The server uses a Remote Procedure Call (RPC) to run this function on a specific client. class Mirror::TelepathyTransport class Mirror::Transport Abstract transport layer component class Mirror::ULocalConnectionToClient class Mirror::UnityEventNetworkConnection Unity Event for the NetworkConnection struct Mirror::UpdateVarsMessage class Mirror::Writer A class that holds writers for the different types","title":"Classes"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror/#types","text":"Name enum SceneOperation { Normal, LoadAdditive, UnloadAdditive } enum SyncMode { Observers, Owner } Sync to everyone, or only to owner. enum ConnectState { None, Connecting, Connected, Disconnected } enum PlayerSpawnMethod { Random, RoundRobin } Enumeration of methods of where to spawn player objects in multiplayer games. enum NetworkManagerMode { Offline, ServerOnly, ClientOnly, Host } Enumeration of methods of current Network Manager state at runtime. enum MirrorInvokeType { Command, ClientRpc } enum Version { Current = 1 }","title":"Types"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror/#functions","text":"Name delegate void NetworkMessageDelegate ( NetworkConnection conn, NetworkReader reader, int channelId) delegate GameObject SpawnDelegate (Vector3 position, Guid assetId) delegate GameObject SpawnHandlerDelegate ( SpawnMessage msg) delegate void UnSpawnDelegate (GameObject spawned)","title":"Functions"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror/#types-documentation","text":"","title":"Types Documentation"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror/#enum-sceneoperation","text":"Enumerator Value Description Normal LoadAdditive UnloadAdditive","title":"enum SceneOperation"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror/#enum-syncmode","text":"Enumerator Value Description Observers Owner Sync to everyone, or only to owner.","title":"enum SyncMode"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror/#enum-connectstate","text":"Enumerator Value Description None Connecting Connected Disconnected","title":"enum ConnectState"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror/#enum-playerspawnmethod","text":"Enumerator Value Description Random RoundRobin Enumeration of methods of where to spawn player objects in multiplayer games.","title":"enum PlayerSpawnMethod"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror/#enum-networkmanagermode","text":"Enumerator Value Description Offline ServerOnly ClientOnly Host Enumeration of methods of current Network Manager state at runtime.","title":"enum NetworkManagerMode"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror/#enum-mirrorinvoketype","text":"Enumerator Value Description Command ClientRpc","title":"enum MirrorInvokeType"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror/#enum-version","text":"Enumerator Value Description Current 1","title":"enum Version"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror/#function-networkmessagedelegate","text":"delegate void NetworkMessageDelegate ( NetworkConnection conn , NetworkReader reader , int channelId )","title":"function NetworkMessageDelegate"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror/#function-spawndelegate","text":"delegate GameObject SpawnDelegate ( Vector3 position , Guid assetId )","title":"function SpawnDelegate"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror/#function-spawnhandlerdelegate","text":"delegate GameObject SpawnHandlerDelegate ( SpawnMessage msg )","title":"function SpawnHandlerDelegate"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror/#function-unspawndelegate","text":"delegate void UnSpawnDelegate ( GameObject spawned ) Updated on 29 January 2021 at 18:34:47 UTC","title":"function UnSpawnDelegate"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Authenticators/","text":"Mirror::Authenticators Classes Name class Mirror::Authenticators::BasicAuthenticator class Mirror::Authenticators::TimeoutAuthenticator An authenticator that disconnects connections if they don't authenticate within a specified time limit. Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Authenticators"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Authenticators/#mirrorauthenticators","text":"","title":"Mirror::Authenticators"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Authenticators/#classes","text":"Name class Mirror::Authenticators::BasicAuthenticator class Mirror::Authenticators::TimeoutAuthenticator An authenticator that disconnects connections if they don't authenticate within a specified time limit. Updated on 29 January 2021 at 18:34:48 UTC","title":"Classes"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Cloud/","text":"Mirror::Cloud Namespaces Name Mirror::Cloud::ListServerService Classes Name class Mirror::Cloud::ApiConnector Used to requests and responses from the mirror api class Mirror::Cloud::BaseApi struct Mirror::Cloud::CreatedIdJson struct Mirror::Cloud::EmptyJson struct Mirror::Cloud::ErrorJson class Mirror::Cloud::Extensions interface Mirror::Cloud::IApiConnector Used to requests and responses from the mirror api interface Mirror::Cloud::IBaseApi interface Mirror::Cloud::ICanBeJson Objects that can be sent to the Api must have this interface interface Mirror::Cloud::ICoroutineRunner interface Mirror::Cloud::IRequestCreator Methods to create and send UnityWebRequest interface Mirror::Cloud::IUnityEqualCheck Adds Extension to check if unity object is null. class Mirror::Cloud::Logger class Mirror::Cloud::MatchFoundEvent class Mirror::Cloud::RequestCreator Methods to create and send UnityWebRequest class Mirror::Cloud::ServerListEvent class Mirror::Cloud::UnityEqualCheckExtension Functions Name delegate void RequestSuccess (string responseBody) delegate void RequestFail (string responseBody) Functions Documentation function RequestSuccess delegate void RequestSuccess ( string responseBody ) function RequestFail delegate void RequestFail ( string responseBody ) Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Cloud/#mirrorcloud","text":"","title":"Mirror::Cloud"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Cloud/#namespaces","text":"Name Mirror::Cloud::ListServerService","title":"Namespaces"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Cloud/#classes","text":"Name class Mirror::Cloud::ApiConnector Used to requests and responses from the mirror api class Mirror::Cloud::BaseApi struct Mirror::Cloud::CreatedIdJson struct Mirror::Cloud::EmptyJson struct Mirror::Cloud::ErrorJson class Mirror::Cloud::Extensions interface Mirror::Cloud::IApiConnector Used to requests and responses from the mirror api interface Mirror::Cloud::IBaseApi interface Mirror::Cloud::ICanBeJson Objects that can be sent to the Api must have this interface interface Mirror::Cloud::ICoroutineRunner interface Mirror::Cloud::IRequestCreator Methods to create and send UnityWebRequest interface Mirror::Cloud::IUnityEqualCheck Adds Extension to check if unity object is null. class Mirror::Cloud::Logger class Mirror::Cloud::MatchFoundEvent class Mirror::Cloud::RequestCreator Methods to create and send UnityWebRequest class Mirror::Cloud::ServerListEvent class Mirror::Cloud::UnityEqualCheckExtension","title":"Classes"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Cloud/#functions","text":"Name delegate void RequestSuccess (string responseBody) delegate void RequestFail (string responseBody)","title":"Functions"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Cloud/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Cloud/#function-requestsuccess","text":"delegate void RequestSuccess ( string responseBody )","title":"function RequestSuccess"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Cloud/#function-requestfail","text":"delegate void RequestFail ( string responseBody ) Updated on 29 January 2021 at 18:34:48 UTC","title":"function RequestFail"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Cloud_1_1ListServerService/","text":"Mirror::Cloud::ListServerService Classes Name class Mirror::Cloud::ListServerService::CustomDataHelper interface Mirror::Cloud::ListServerService::IListServerClientApi interface Mirror::Cloud::ListServerService::IListServerServerApi struct Mirror::Cloud::ListServerService::KeyValue class Mirror::Cloud::ListServerService::ListServer class Mirror::Cloud::ListServerService::ListServerBaseApi class Mirror::Cloud::ListServerService::ListServerClientApi class Mirror::Cloud::ListServerService::ListServerServerApi struct Mirror::Cloud::ListServerService::PartialServerJson struct Mirror::Cloud::ListServerService::ServerCollectionJson struct Mirror::Cloud::ListServerService::ServerJson Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Cloud::ListServerService"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Cloud_1_1ListServerService/#mirrorcloudlistserverservice","text":"","title":"Mirror::Cloud::ListServerService"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Cloud_1_1ListServerService/#classes","text":"Name class Mirror::Cloud::ListServerService::CustomDataHelper interface Mirror::Cloud::ListServerService::IListServerClientApi interface Mirror::Cloud::ListServerService::IListServerServerApi struct Mirror::Cloud::ListServerService::KeyValue class Mirror::Cloud::ListServerService::ListServer class Mirror::Cloud::ListServerService::ListServerBaseApi class Mirror::Cloud::ListServerService::ListServerClientApi class Mirror::Cloud::ListServerService::ListServerServerApi struct Mirror::Cloud::ListServerService::PartialServerJson struct Mirror::Cloud::ListServerService::ServerCollectionJson struct Mirror::Cloud::ListServerService::ServerJson Updated on 29 January 2021 at 18:34:48 UTC","title":"Classes"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Discovery/","text":"Mirror::Discovery Classes Name class Mirror::Discovery::NetworkDiscovery class Mirror::Discovery::NetworkDiscoveryBase Base implementation for Network Discovery . Extend this component to provide custom discovery with game specific data NetworkDiscovery for a sample implementation class Mirror::Discovery::NetworkDiscoveryHUD class Mirror::Discovery::ServerFoundUnityEvent struct Mirror::Discovery::ServerRequest struct Mirror::Discovery::ServerResponse Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Discovery"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Discovery/#mirrordiscovery","text":"","title":"Mirror::Discovery"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Discovery/#classes","text":"Name class Mirror::Discovery::NetworkDiscovery class Mirror::Discovery::NetworkDiscoveryBase Base implementation for Network Discovery . Extend this component to provide custom discovery with game specific data NetworkDiscovery for a sample implementation class Mirror::Discovery::NetworkDiscoveryHUD class Mirror::Discovery::ServerFoundUnityEvent struct Mirror::Discovery::ServerRequest struct Mirror::Discovery::ServerResponse Updated on 29 January 2021 at 18:34:48 UTC","title":"Classes"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1EditorScripts/","text":"Mirror::EditorScripts Namespaces Name Mirror::EditorScripts::Logging Classes Name class Mirror::EditorScripts::ScriptableObjectUtility Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::EditorScripts"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1EditorScripts/#mirroreditorscripts","text":"","title":"Mirror::EditorScripts"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1EditorScripts/#namespaces","text":"Name Mirror::EditorScripts::Logging","title":"Namespaces"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1EditorScripts/#classes","text":"Name class Mirror::EditorScripts::ScriptableObjectUtility Updated on 29 January 2021 at 18:34:48 UTC","title":"Classes"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1EditorScripts_1_1Logging/","text":"Mirror::EditorScripts::Logging Classes Name class Mirror::EditorScripts::Logging::LogLevelsGUI class Mirror::EditorScripts::Logging::LogLevelWindow class Mirror::EditorScripts::Logging::LogSettingsEditor class Mirror::EditorScripts::Logging::NetworkLogSettingsEditor Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::EditorScripts::Logging"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1EditorScripts_1_1Logging/#mirroreditorscriptslogging","text":"","title":"Mirror::EditorScripts::Logging"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1EditorScripts_1_1Logging/#classes","text":"Name class Mirror::EditorScripts::Logging::LogLevelsGUI class Mirror::EditorScripts::Logging::LogLevelWindow class Mirror::EditorScripts::Logging::LogSettingsEditor class Mirror::EditorScripts::Logging::NetworkLogSettingsEditor Updated on 29 January 2021 at 18:34:48 UTC","title":"Classes"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Experimental/","text":"Mirror::Experimental Classes Name class Mirror::Experimental::NetworkLerpRigidbody class Mirror::Experimental::NetworkRigidbody class Mirror::Experimental::NetworkRigidbody2D class Mirror::Experimental::NetworkTransform class Mirror::Experimental::NetworkTransformBase class Mirror::Experimental::NetworkTransformChild A component to synchronize the position of child transforms of networked objects. Updated on 29 January 2021 at 18:34:48 UTC","title":"Mirror::Experimental"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Experimental/#mirrorexperimental","text":"","title":"Mirror::Experimental"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Experimental/#classes","text":"Name class Mirror::Experimental::NetworkLerpRigidbody class Mirror::Experimental::NetworkRigidbody class Mirror::Experimental::NetworkRigidbody2D class Mirror::Experimental::NetworkTransform class Mirror::Experimental::NetworkTransformBase class Mirror::Experimental::NetworkTransformChild A component to synchronize the position of child transforms of networked objects. Updated on 29 January 2021 at 18:34:48 UTC","title":"Classes"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Logging/","text":"Mirror::Logging Classes Name class Mirror::Logging::ConsoleColorLogHandler class Mirror::Logging::LogSettings class Mirror::Logging::LogSettingsExt class Mirror::Logging::NetworkHeadlessLogger Used to replace log hanlder with Console Color LogHandler class Mirror::Logging::NetworkLogSettings Used to load LogSettings in build Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Logging"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Logging/#mirrorlogging","text":"","title":"Mirror::Logging"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Logging/#classes","text":"Name class Mirror::Logging::ConsoleColorLogHandler class Mirror::Logging::LogSettings class Mirror::Logging::LogSettingsExt class Mirror::Logging::NetworkHeadlessLogger Used to replace log hanlder with Console Color LogHandler class Mirror::Logging::NetworkLogSettings Used to load LogSettings in build Updated on 29 January 2021 at 18:34:49 UTC","title":"Classes"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1RemoteCalls/","text":"Mirror::RemoteCalls Classes Name struct Mirror::RemoteCalls::CommandInfo class Mirror::RemoteCalls::Invoker class Mirror::RemoteCalls::RemoteCallHelper Used to help manage remote calls for NetworkBehaviours Functions Name delegate void CmdDelegate ( NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection) Delegate for Command functions. Functions Documentation function CmdDelegate delegate void CmdDelegate ( NetworkBehaviour obj , NetworkReader reader , NetworkConnectionToClient senderConnection ) Delegate for Command functions. Parameters : obj reader Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::RemoteCalls"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1RemoteCalls/#mirrorremotecalls","text":"","title":"Mirror::RemoteCalls"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1RemoteCalls/#classes","text":"Name struct Mirror::RemoteCalls::CommandInfo class Mirror::RemoteCalls::Invoker class Mirror::RemoteCalls::RemoteCallHelper Used to help manage remote calls for NetworkBehaviours","title":"Classes"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1RemoteCalls/#functions","text":"Name delegate void CmdDelegate ( NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection) Delegate for Command functions.","title":"Functions"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1RemoteCalls/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1RemoteCalls/#function-cmddelegate","text":"delegate void CmdDelegate ( NetworkBehaviour obj , NetworkReader reader , NetworkConnectionToClient senderConnection ) Delegate for Command functions. Parameters : obj reader Updated on 29 January 2021 at 18:34:49 UTC","title":"function CmdDelegate"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1SimpleWeb/","text":"Mirror::SimpleWeb Classes Name class Mirror::SimpleWeb::ArrayBuffer class Mirror::SimpleWeb::BufferPool Collection of different sized buffers interface Mirror::SimpleWeb::IBufferOwner class Mirror::SimpleWeb::Log struct Mirror::SimpleWeb::Message class Mirror::SimpleWeb::MessageProcessor class Mirror::SimpleWeb::ReadHelper class Mirror::SimpleWeb::ReadHelperException class Mirror::SimpleWeb::SendLoopConfig class Mirror::SimpleWeb::SimpleWebClient Client used to control websockets class Mirror::SimpleWeb::SimpleWebServer class Mirror::SimpleWeb::SimpleWebTransport struct Mirror::SimpleWeb::SslConfig struct Mirror::SimpleWeb::TcpConfig class Mirror::SimpleWeb::WebSocketClientStandAlone class Mirror::SimpleWeb::WebSocketClientWebGl class Mirror::SimpleWeb::WebSocketServer Types Name enum ClientState { NotConnected = 0, Connecting = 1, Connected = 2, Disconnecting = 3 } enum EventType { Connected, Data, Disconnected, Error } Types Documentation enum ClientState Enumerator Value Description NotConnected 0 Connecting 1 Connected 2 Disconnecting 3 enum EventType Enumerator Value Description Connected Data Disconnected Error Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::SimpleWeb"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1SimpleWeb/#mirrorsimpleweb","text":"","title":"Mirror::SimpleWeb"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1SimpleWeb/#classes","text":"Name class Mirror::SimpleWeb::ArrayBuffer class Mirror::SimpleWeb::BufferPool Collection of different sized buffers interface Mirror::SimpleWeb::IBufferOwner class Mirror::SimpleWeb::Log struct Mirror::SimpleWeb::Message class Mirror::SimpleWeb::MessageProcessor class Mirror::SimpleWeb::ReadHelper class Mirror::SimpleWeb::ReadHelperException class Mirror::SimpleWeb::SendLoopConfig class Mirror::SimpleWeb::SimpleWebClient Client used to control websockets class Mirror::SimpleWeb::SimpleWebServer class Mirror::SimpleWeb::SimpleWebTransport struct Mirror::SimpleWeb::SslConfig struct Mirror::SimpleWeb::TcpConfig class Mirror::SimpleWeb::WebSocketClientStandAlone class Mirror::SimpleWeb::WebSocketClientWebGl class Mirror::SimpleWeb::WebSocketServer","title":"Classes"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1SimpleWeb/#types","text":"Name enum ClientState { NotConnected = 0, Connecting = 1, Connected = 2, Disconnecting = 3 } enum EventType { Connected, Data, Disconnected, Error }","title":"Types"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1SimpleWeb/#types-documentation","text":"","title":"Types Documentation"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1SimpleWeb/#enum-clientstate","text":"Enumerator Value Description NotConnected 0 Connecting 1 Connected 2 Disconnecting 3","title":"enum ClientState"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1SimpleWeb/#enum-eventtype","text":"Enumerator Value Description Connected Data Disconnected Error Updated on 29 January 2021 at 18:34:49 UTC","title":"enum EventType"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Weaver/","text":"Mirror::Weaver Classes Name class Mirror::Weaver::CommandProcessor Processes [Command] methods in NetworkBehaviour class Mirror::Weaver::CompilationFinishedHook class Mirror::Weaver::Extensions class Mirror::Weaver::GenerateWriterException class Mirror::Weaver::Helpers class Mirror::Weaver::Log class Mirror::Weaver::MethodProcessor class Mirror::Weaver::MonoBehaviourProcessor only shows warnings in case we use SyncVars etc. for MonoBehaviour. class Mirror::Weaver::NetworkBehaviourProcessor processes SyncVars, Cmds, Rpcs, etc. of NetworkBehaviours class Mirror::Weaver::PropertySiteProcessor class Mirror::Weaver::Readers class Mirror::Weaver::ReaderWriterProcessor class Mirror::Weaver::Resolvers class Mirror::Weaver::RpcProcessor Processes [Rpc] methods in NetworkBehaviour class Mirror::Weaver::ServerClientAttributeProcessor class Mirror::Weaver::SyncObjectInitializer class Mirror::Weaver::SyncObjectProcessor class Mirror::Weaver::SyncVarProcessor Processes [SyncVar] in NetworkBehaviour class Mirror::Weaver::TargetRpcProcessor Processes [TargetRpc] methods in NetworkBehaviour class Mirror::Weaver::TypeReferenceComparer Comparers TypeReference using FullName class Mirror::Weaver::WeaverException class Mirror::Weaver::WeaverLists class Mirror::Weaver::WeaverTypes class Mirror::Weaver::Writers Types Name enum RemoteCallType { Command, ClientRpc, TargetRpc } Types Documentation enum RemoteCallType Enumerator Value Description Command ClientRpc TargetRpc Updated on 29 January 2021 at 18:34:49 UTC","title":"Mirror::Weaver"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Weaver/#mirrorweaver","text":"","title":"Mirror::Weaver"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Weaver/#classes","text":"Name class Mirror::Weaver::CommandProcessor Processes [Command] methods in NetworkBehaviour class Mirror::Weaver::CompilationFinishedHook class Mirror::Weaver::Extensions class Mirror::Weaver::GenerateWriterException class Mirror::Weaver::Helpers class Mirror::Weaver::Log class Mirror::Weaver::MethodProcessor class Mirror::Weaver::MonoBehaviourProcessor only shows warnings in case we use SyncVars etc. for MonoBehaviour. class Mirror::Weaver::NetworkBehaviourProcessor processes SyncVars, Cmds, Rpcs, etc. of NetworkBehaviours class Mirror::Weaver::PropertySiteProcessor class Mirror::Weaver::Readers class Mirror::Weaver::ReaderWriterProcessor class Mirror::Weaver::Resolvers class Mirror::Weaver::RpcProcessor Processes [Rpc] methods in NetworkBehaviour class Mirror::Weaver::ServerClientAttributeProcessor class Mirror::Weaver::SyncObjectInitializer class Mirror::Weaver::SyncObjectProcessor class Mirror::Weaver::SyncVarProcessor Processes [SyncVar] in NetworkBehaviour class Mirror::Weaver::TargetRpcProcessor Processes [TargetRpc] methods in NetworkBehaviour class Mirror::Weaver::TypeReferenceComparer Comparers TypeReference using FullName class Mirror::Weaver::WeaverException class Mirror::Weaver::WeaverLists class Mirror::Weaver::WeaverTypes class Mirror::Weaver::Writers","title":"Classes"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Weaver/#types","text":"Name enum RemoteCallType { Command, ClientRpc, TargetRpc }","title":"Types"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Weaver/#types-documentation","text":"","title":"Types Documentation"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMirror_1_1Weaver/#enum-remotecalltype","text":"Enumerator Value Description Command ClientRpc TargetRpc Updated on 29 January 2021 at 18:34:49 UTC","title":"enum RemoteCallType"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMono_1_1CecilX/","text":"Mono::CecilX Updated on 29 January 2021 at 18:34:47 UTC","title":"Mono::CecilX"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMono_1_1CecilX/#monocecilx","text":"Updated on 29 January 2021 at 18:34:47 UTC","title":"Mono::CecilX"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMono_1_1CecilX_1_1Cil/","text":"Mono::CecilX::Cil Updated on 29 January 2021 at 18:34:47 UTC","title":"Mono::CecilX::Cil"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMono_1_1CecilX_1_1Cil/#monocecilxcil","text":"Updated on 29 January 2021 at 18:34:47 UTC","title":"Mono::CecilX::Cil"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMono_1_1CecilX_1_1Rocks/","text":"Mono::CecilX::Rocks Updated on 29 January 2021 at 18:34:47 UTC","title":"Mono::CecilX::Rocks"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceMono_1_1CecilX_1_1Rocks/#monocecilxrocks","text":"Updated on 29 January 2021 at 18:34:47 UTC","title":"Mono::CecilX::Rocks"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceObject/","text":"Object Updated on 29 January 2021 at 18:34:47 UTC","title":"Object"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceObject/#object","text":"Updated on 29 January 2021 at 18:34:47 UTC","title":"Object"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceStopwatch/","text":"Stopwatch Updated on 29 January 2021 at 18:34:47 UTC","title":"Stopwatch"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceStopwatch/#stopwatch","text":"Updated on 29 January 2021 at 18:34:47 UTC","title":"Stopwatch"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceTelepathy/","text":"Telepathy Classes Name class Telepathy::Client class Telepathy::Common class Telepathy::Logger struct Telepathy::Message class Telepathy::NetworkStreamExtensions class Telepathy::SafeQueue class Telepathy::Server class Telepathy::ThreadExtensions class Telepathy::Utils Types Name enum EventType { Connected, Data, Disconnected } Types Documentation enum EventType Enumerator Value Description Connected Data Disconnected Updated on 29 January 2021 at 18:34:47 UTC","title":"Telepathy"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceTelepathy/#telepathy","text":"","title":"Telepathy"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceTelepathy/#classes","text":"Name class Telepathy::Client class Telepathy::Common class Telepathy::Logger struct Telepathy::Message class Telepathy::NetworkStreamExtensions class Telepathy::SafeQueue class Telepathy::Server class Telepathy::ThreadExtensions class Telepathy::Utils","title":"Classes"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceTelepathy/#types","text":"Name enum EventType { Connected, Data, Disconnected }","title":"Types"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceTelepathy/#types-documentation","text":"","title":"Types Documentation"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceTelepathy/#enum-eventtype","text":"Enumerator Value Description Connected Data Disconnected Updated on 29 January 2021 at 18:34:47 UTC","title":"enum EventType"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceUnityAssembly/","text":"UnityAssembly Updated on 29 January 2021 at 18:34:47 UTC","title":"UnityAssembly"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceUnityAssembly/#unityassembly","text":"Updated on 29 January 2021 at 18:34:47 UTC","title":"UnityAssembly"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceUnityEditor/","text":"UnityEditor Updated on 29 January 2021 at 18:34:47 UTC","title":"UnityEditor"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceUnityEditor/#unityeditor","text":"Updated on 29 January 2021 at 18:34:47 UTC","title":"UnityEditor"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceUnityEditorInternal/","text":"UnityEditorInternal Updated on 29 January 2021 at 18:34:47 UTC","title":"UnityEditorInternal"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceUnityEditorInternal/#unityeditorinternal","text":"Updated on 29 January 2021 at 18:34:47 UTC","title":"UnityEditorInternal"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceUnityEditor_1_1Callbacks/","text":"UnityEditor::Callbacks Updated on 29 January 2021 at 18:34:47 UTC","title":"UnityEditor::Callbacks"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceUnityEditor_1_1Callbacks/#unityeditorcallbacks","text":"Updated on 29 January 2021 at 18:34:47 UTC","title":"UnityEditor::Callbacks"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceUnityEditor_1_1Compilation/","text":"UnityEditor::Compilation Updated on 29 January 2021 at 18:34:47 UTC","title":"UnityEditor::Compilation"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceUnityEditor_1_1Compilation/#unityeditorcompilation","text":"Updated on 29 January 2021 at 18:34:47 UTC","title":"UnityEditor::Compilation"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceUnity_1_1Collections_1_1LowLevel_1_1Unsafe/","text":"Unity::Collections::LowLevel::Unsafe Updated on 29 January 2021 at 18:34:47 UTC","title":"Unity::Collections::LowLevel::Unsafe"},{"location":"Cops%20And%20Robbers/Namespaces/namespaceUnity_1_1Collections_1_1LowLevel_1_1Unsafe/#unitycollectionslowlevelunsafe","text":"Updated on 29 January 2021 at 18:34:47 UTC","title":"Unity::Collections::LowLevel::Unsafe"},{"location":"Cops%20And%20Robbers/Namespaces/namespacekcp2k/","text":"kcp2k Classes Name class kcp2k::Kcp class kcp2k::KcpClient class kcp2k::KcpClientConnection class kcp2k::KcpConnection class kcp2k::KcpServer class kcp2k::KcpServerConnection class kcp2k::KcpTransport class kcp2k::Log class kcp2k::Utils Types Name enum KcpChannel { Reliable = 0x01, Unreliable = 0x02 } enum KcpState { Connected, Authenticated, Disconnected } enum KcpHeader { Handshake = 0x01, Ping = 0x02, Data = 0x03, Disconnect = 0x04 } Types Documentation enum KcpChannel Enumerator Value Description Reliable 0x01 Unreliable 0x02 enum KcpState Enumerator Value Description Connected Authenticated Disconnected enum KcpHeader Enumerator Value Description Handshake 0x01 Ping 0x02 Data 0x03 Disconnect 0x04 Updated on 29 January 2021 at 18:34:49 UTC","title":"kcp2k"},{"location":"Cops%20And%20Robbers/Namespaces/namespacekcp2k/#kcp2k","text":"","title":"kcp2k"},{"location":"Cops%20And%20Robbers/Namespaces/namespacekcp2k/#classes","text":"Name class kcp2k::Kcp class kcp2k::KcpClient class kcp2k::KcpClientConnection class kcp2k::KcpConnection class kcp2k::KcpServer class kcp2k::KcpServerConnection class kcp2k::KcpTransport class kcp2k::Log class kcp2k::Utils","title":"Classes"},{"location":"Cops%20And%20Robbers/Namespaces/namespacekcp2k/#types","text":"Name enum KcpChannel { Reliable = 0x01, Unreliable = 0x02 } enum KcpState { Connected, Authenticated, Disconnected } enum KcpHeader { Handshake = 0x01, Ping = 0x02, Data = 0x03, Disconnect = 0x04 }","title":"Types"},{"location":"Cops%20And%20Robbers/Namespaces/namespacekcp2k/#types-documentation","text":"","title":"Types Documentation"},{"location":"Cops%20And%20Robbers/Namespaces/namespacekcp2k/#enum-kcpchannel","text":"Enumerator Value Description Reliable 0x01 Unreliable 0x02","title":"enum KcpChannel"},{"location":"Cops%20And%20Robbers/Namespaces/namespacekcp2k/#enum-kcpstate","text":"Enumerator Value Description Connected Authenticated Disconnected","title":"enum KcpState"},{"location":"Cops%20And%20Robbers/Namespaces/namespacekcp2k/#enum-kcpheader","text":"Enumerator Value Description Handshake 0x01 Ping 0x02 Data 0x03 Disconnect 0x04 Updated on 29 January 2021 at 18:34:49 UTC","title":"enum KcpHeader"},{"location":"Overview/collaboration/Effective%20Commits%20and%20Code%20Reviews/","text":"Effective Commits and Code Reviews This document will detail how to make the best commits and how to effectively review your peer's work Commits A commit is a term used for saving a change to a file or a set of files. There are several components to a commit. 1. The changes you have made to the files (additions and deletions) 2. A commit hash: A hash of the commit used to identify the commit 3. A commit message and summary(optional): The Commit message is a short (50 characters max) statement of the changes made in the commit and you can include a summary if you think that a wider explanation is neccessary. Please read the following for more information Comment Convention When commiting, make sure that each commit as consise as possible and DO NOT add more files than neccessary to each commit. This will cause a lot of headaches should you need to revert a small change in an unneccesarily large commit and it may also result in merge conflicts How to commit Once you have saved your changes, open your git client or terminal and stage the changes using git add <filename(s) or * for all changes> Commit all stage files using git commit -m \"MESSAGE HERE\" Push the changes to your github repository using git push Your files are now uploaded to github and are ready for peer review to be accepted into the main repository Creating a Pull Request Once you have uploaded your changes to Github, and the source is ready to be merged into the main repository (It could take many commits to reach this stage), Go ahead and open a pull request. Here you will have to add a title and a summary of the changes you have made. You must also add a reviewer (or multiple). This should be someone who knows the task and is able to provide a thorough review. You will also need to assign yourself and whoever worked with you on those commits to the pull request. Feel free to also include tags to make it easier to understand. Once you have filled out the form, you are ready to open the pull request Once you open a pull request, All changes that you make on that branch is tracked by the pull request so if you want to work on a different task, be sure to checkout a different branch Code Review Code review is a step of development when a peer goes through your changes before it is admitted into the main repository to keep the code as bug free and clean as possible. Effective code review is crucial for faster collaborative development. Reviewing Code When reviewing code, ensure that you fully understand the changes that have been made and if applicable, be sure to test those changes for bugs. Feel free to use the comments section to find out more and to provide feedback. Reviewers are able to accept, deny and request improvement on changes. Be sure to make full use of this to maintain the repository as best as possible If you are having your change reviewed, be sure to be active on the pull request page so that patches, if required can be submitted as fast as possible to spend as less time as you can on the code review phase. Updating Source As time goes on, others on the team will merge their changes into the main repository leaving yours behind. To ensure that your fork is up to date, you can do the following: # Add the remote, call it \"upstream\": git remote add upstream https://github.com/whoever/whatever.git # This should be a link to the main repository # Fetch all the branches of that remote into remote-tracking branches, # such as upstream/main: git fetch upstream # Make sure that you're on your main branch: git checkout main # Rewrite your main branch so that any commits of yours that # aren't already in upstream/main are replayed on top of that # other branch: git rebase upstream/main or git merge upstream/main if you don't want to rewrite history on your branch Once you have rebased locally, It is recommended to push the changes back onto your remote on Github. You can do that with: git push -f origin main You only need to use the -f flag the first time after a rebase Github Documentation for updating a Fork","title":"Effective Commits and Code Reviews"},{"location":"Overview/collaboration/Effective%20Commits%20and%20Code%20Reviews/#effective-commits-and-code-reviews","text":"This document will detail how to make the best commits and how to effectively review your peer's work","title":"Effective Commits and Code Reviews"},{"location":"Overview/collaboration/Effective%20Commits%20and%20Code%20Reviews/#commits","text":"A commit is a term used for saving a change to a file or a set of files. There are several components to a commit. 1. The changes you have made to the files (additions and deletions) 2. A commit hash: A hash of the commit used to identify the commit 3. A commit message and summary(optional): The Commit message is a short (50 characters max) statement of the changes made in the commit and you can include a summary if you think that a wider explanation is neccessary. Please read the following for more information Comment Convention When commiting, make sure that each commit as consise as possible and DO NOT add more files than neccessary to each commit. This will cause a lot of headaches should you need to revert a small change in an unneccesarily large commit and it may also result in merge conflicts","title":"Commits"},{"location":"Overview/collaboration/Effective%20Commits%20and%20Code%20Reviews/#how-to-commit","text":"Once you have saved your changes, open your git client or terminal and stage the changes using git add <filename(s) or * for all changes> Commit all stage files using git commit -m \"MESSAGE HERE\" Push the changes to your github repository using git push Your files are now uploaded to github and are ready for peer review to be accepted into the main repository","title":"How to commit"},{"location":"Overview/collaboration/Effective%20Commits%20and%20Code%20Reviews/#creating-a-pull-request","text":"Once you have uploaded your changes to Github, and the source is ready to be merged into the main repository (It could take many commits to reach this stage), Go ahead and open a pull request. Here you will have to add a title and a summary of the changes you have made. You must also add a reviewer (or multiple). This should be someone who knows the task and is able to provide a thorough review. You will also need to assign yourself and whoever worked with you on those commits to the pull request. Feel free to also include tags to make it easier to understand. Once you have filled out the form, you are ready to open the pull request Once you open a pull request, All changes that you make on that branch is tracked by the pull request so if you want to work on a different task, be sure to checkout a different branch","title":"Creating a Pull Request"},{"location":"Overview/collaboration/Effective%20Commits%20and%20Code%20Reviews/#code-review","text":"Code review is a step of development when a peer goes through your changes before it is admitted into the main repository to keep the code as bug free and clean as possible. Effective code review is crucial for faster collaborative development.","title":"Code Review"},{"location":"Overview/collaboration/Effective%20Commits%20and%20Code%20Reviews/#reviewing-code","text":"When reviewing code, ensure that you fully understand the changes that have been made and if applicable, be sure to test those changes for bugs. Feel free to use the comments section to find out more and to provide feedback. Reviewers are able to accept, deny and request improvement on changes. Be sure to make full use of this to maintain the repository as best as possible If you are having your change reviewed, be sure to be active on the pull request page so that patches, if required can be submitted as fast as possible to spend as less time as you can on the code review phase.","title":"Reviewing Code"},{"location":"Overview/collaboration/Effective%20Commits%20and%20Code%20Reviews/#updating-source","text":"As time goes on, others on the team will merge their changes into the main repository leaving yours behind. To ensure that your fork is up to date, you can do the following: # Add the remote, call it \"upstream\": git remote add upstream https://github.com/whoever/whatever.git # This should be a link to the main repository # Fetch all the branches of that remote into remote-tracking branches, # such as upstream/main: git fetch upstream # Make sure that you're on your main branch: git checkout main # Rewrite your main branch so that any commits of yours that # aren't already in upstream/main are replayed on top of that # other branch: git rebase upstream/main or git merge upstream/main if you don't want to rewrite history on your branch Once you have rebased locally, It is recommended to push the changes back onto your remote on Github. You can do that with: git push -f origin main You only need to use the -f flag the first time after a rebase Github Documentation for updating a Fork","title":"Updating Source"},{"location":"Overview/collaboration/Get%20Started/","text":"Getting started with Development Follow the following steps to get yourself ready for commiting changes to the repositories Get the source Fork the repository to your account Clone the newly forked repository to your computer with a git client (we are using gitkraken but anything will work) The source will be downloaded and you are ready for development. Good Luck Making Changes Once you have made changes, you will need to upload these to the main repository. By default, our repository does not allow direct pushing to keep the code clean and enforce peer review. You will therefore have to complete the following steps: Commit your changes using your git client. Smaller commits are generally better as they are easier to review and if needed easier to revert Push your changes to github From github, open a pull request to the main repository Fill out the pull request form and assign yourself and add a reviewer (can have multiple). Add other attributes as necessary Once you have opened the pull request, you will have to wait for reviewers to read and give feedback on your commits. If they request changes, then make them and merge into the request. Once they approve you can go ahead and merge your code providing there are no merge conflicts. If you find merge conflicts, then you will have to resolve these by picking which code to keep and what to let go","title":"Getting started with Development"},{"location":"Overview/collaboration/Get%20Started/#getting-started-with-development","text":"Follow the following steps to get yourself ready for commiting changes to the repositories","title":"Getting started with Development"},{"location":"Overview/collaboration/Get%20Started/#get-the-source","text":"Fork the repository to your account Clone the newly forked repository to your computer with a git client (we are using gitkraken but anything will work) The source will be downloaded and you are ready for development. Good Luck","title":"Get the source"},{"location":"Overview/collaboration/Get%20Started/#making-changes","text":"Once you have made changes, you will need to upload these to the main repository. By default, our repository does not allow direct pushing to keep the code clean and enforce peer review. You will therefore have to complete the following steps: Commit your changes using your git client. Smaller commits are generally better as they are easier to review and if needed easier to revert Push your changes to github From github, open a pull request to the main repository Fill out the pull request form and assign yourself and add a reviewer (can have multiple). Add other attributes as necessary Once you have opened the pull request, you will have to wait for reviewers to read and give feedback on your commits. If they request changes, then make them and merge into the request. Once they approve you can go ahead and merge your code providing there are no merge conflicts. If you find merge conflicts, then you will have to resolve these by picking which code to keep and what to let go","title":"Making Changes"},{"location":"Overview/collaboration/Project%20Design/","text":"Project Design for our Unity Project Use of Repositories Making use of multiple repositories is a great way to manage sub-projects within the main projects. Reusable components should be managed inside its own repository and then exported as a shared library ( .dll in Windows and .so in Linux). This will effectively make it easier to track changes and show our ability to think ahead as a \"startup company\" In our case, we could split our Game ( The code which directly interacts with Unity) and other components to acheive this Semantic Versioning Semantic Versioning is the process of assinging a unique version number. We will be applying semantic versioning on our releases. Semantic versioning will work as follows: <MAJOR>.<MINOR>.<PATCH> : The Major shows major changes to the Application which may break external application connections. Minor shows changes which will not break connections and Revision indicates bug fixes. Documenting Public APIs Public APIs expose features of the application/library to external application. These features must hold information so that they can be used correctly. C# Does this in a similar way to Java does with Javadoc albiet it does not generate webpages automatically. (I am looking into that). C# uses an XML syntax for documentation and you must be familiar with it if you are working with public APIs and it will come in handy for private methods and classes as it will allow team members to understand your code easier. Reference to C# Documentation Syntax","title":"Project Design for our Unity Project"},{"location":"Overview/collaboration/Project%20Design/#project-design-for-our-unity-project","text":"","title":"Project Design for our Unity Project"},{"location":"Overview/collaboration/Project%20Design/#use-of-repositories","text":"Making use of multiple repositories is a great way to manage sub-projects within the main projects. Reusable components should be managed inside its own repository and then exported as a shared library ( .dll in Windows and .so in Linux). This will effectively make it easier to track changes and show our ability to think ahead as a \"startup company\" In our case, we could split our Game ( The code which directly interacts with Unity) and other components to acheive this","title":"Use of Repositories"},{"location":"Overview/collaboration/Project%20Design/#semantic-versioning","text":"Semantic Versioning is the process of assinging a unique version number. We will be applying semantic versioning on our releases. Semantic versioning will work as follows: <MAJOR>.<MINOR>.<PATCH> : The Major shows major changes to the Application which may break external application connections. Minor shows changes which will not break connections and Revision indicates bug fixes.","title":"Semantic Versioning"},{"location":"Overview/collaboration/Project%20Design/#documenting-public-apis","text":"Public APIs expose features of the application/library to external application. These features must hold information so that they can be used correctly. C# Does this in a similar way to Java does with Javadoc albiet it does not generate webpages automatically. (I am looking into that). C# uses an XML syntax for documentation and you must be familiar with it if you are working with public APIs and it will come in handy for private methods and classes as it will allow team members to understand your code easier. Reference to C# Documentation Syntax","title":"Documenting Public APIs"},{"location":"Overview/collaboration/Releasing/","text":"Releases from Deranged Senators We will be adopting Semantic Versioning for the majority of our projects. Release tags will be detailed as follows: <MAJOR>.<MINOR>.<PATCH>.[TAG].[HHMMDDMMYY] Tags Each release will come with a tag. The current allowed tags are: Tag Definition Pre-Release Description R Release Used to Mark a release RC Release Candidate An internal release to check for critical problems before releasing OB Open Beta Public Beta Program CB Closed Beta Private Beta Program A Alpha Alpha Builds are used for userend products which have not yet attained beta level DP Developer Preview Developer Previews give the public access to unreleased APIs to allow developers to test and begin integrating them into their products Tag Formatting A tag will be formatted as follows: {TAG}{CUMULATIVE_VALUE} The Cumulative value is a number which increments each time with a particular tag release. The cumulative value resets to 1 whenever the major value increases. RC values also reset to 1 when the corresponding R tag is published. Changelogs Changelogs are files which contain a list of changes on the current relase.In our case, Changelogs must be kept in a CHANGELOG.md in the root of the repository. The GitHub Release action will automatically take this file and use it for the body of the release. It will also automatically wipe the file once the release has been published Principles They must be human readable They must be present with every release They must be categorised to make it easier to understand Types of changes Added : New Features Changed : For changes in existing functionality Deprecated : To mark soon-to-be removed features Removed : Removed features Fixed : Bug fixes Security : Security Vulnerability Fixes Issues : Known problems regarding the release","title":"Releases from Deranged Senators"},{"location":"Overview/collaboration/Releasing/#releases-from-deranged-senators","text":"We will be adopting Semantic Versioning for the majority of our projects. Release tags will be detailed as follows: <MAJOR>.<MINOR>.<PATCH>.[TAG].[HHMMDDMMYY]","title":"Releases from Deranged Senators"},{"location":"Overview/collaboration/Releasing/#tags","text":"Each release will come with a tag. The current allowed tags are: Tag Definition Pre-Release Description R Release Used to Mark a release RC Release Candidate An internal release to check for critical problems before releasing OB Open Beta Public Beta Program CB Closed Beta Private Beta Program A Alpha Alpha Builds are used for userend products which have not yet attained beta level DP Developer Preview Developer Previews give the public access to unreleased APIs to allow developers to test and begin integrating them into their products","title":"Tags"},{"location":"Overview/collaboration/Releasing/#tag-formatting","text":"A tag will be formatted as follows: {TAG}{CUMULATIVE_VALUE} The Cumulative value is a number which increments each time with a particular tag release. The cumulative value resets to 1 whenever the major value increases. RC values also reset to 1 when the corresponding R tag is published.","title":"Tag Formatting"},{"location":"Overview/collaboration/Releasing/#changelogs","text":"Changelogs are files which contain a list of changes on the current relase.In our case, Changelogs must be kept in a CHANGELOG.md in the root of the repository. The GitHub Release action will automatically take this file and use it for the body of the release. It will also automatically wipe the file once the release has been published","title":"Changelogs"},{"location":"Overview/collaboration/Releasing/#principles","text":"They must be human readable They must be present with every release They must be categorised to make it easier to understand","title":"Principles"},{"location":"Overview/collaboration/Releasing/#types-of-changes","text":"Added : New Features Changed : For changes in existing functionality Deprecated : To mark soon-to-be removed features Removed : Removed features Fixed : Bug fixes Security : Security Vulnerability Fixes Issues : Known problems regarding the release","title":"Types of changes"},{"location":"Overview/collaboration/Reusable%20Components/","text":"Reusable Components There is a core principle in software development known as DRY. DRY stands for Don't Repeat Yourself. This document will detail the steps you can take to ensure that all components in our project are written with this principle in mind. Reasoning Our project specification says that we are a startup company preparing to release our product into the market. Typically companies plan ahead and don't stick with a single product on their portfolios. This is something we should keep in mind when creating our product. Therefore, When you begin to create a component be it scripts or assets, you must think about the reusability of that compnent. Can it be implemented into a future product. If this is the case, you must think about developing it as a reusable component. Unity Unity offers a unique solution to the creation of reusable components through the use of Custom Packages . These packages can hold scripts, native objects, assets and more. It is widely recommended that you create a custom package when creating a Unity Reusable Component. Steps towards making a custom package Speak to another team member about converting an existing component or creating a new component as a package Create another repository on our github organisation to hold the package* Follow the steps found in the unity documentation to develop your component Once ready to include in the product, Include it as a Git Dependency in the product's packages.json file. This will allow the editor to fetch the latest version directly from git, simplifying the import process C/C++ Reusable C/C++ code must be compiled into a seperate shared or static library (depending on how it needs to be used) and then imported into the project.","title":"Reusable Components"},{"location":"Overview/collaboration/Reusable%20Components/#reusable-components","text":"There is a core principle in software development known as DRY. DRY stands for Don't Repeat Yourself. This document will detail the steps you can take to ensure that all components in our project are written with this principle in mind.","title":"Reusable Components"},{"location":"Overview/collaboration/Reusable%20Components/#reasoning","text":"Our project specification says that we are a startup company preparing to release our product into the market. Typically companies plan ahead and don't stick with a single product on their portfolios. This is something we should keep in mind when creating our product. Therefore, When you begin to create a component be it scripts or assets, you must think about the reusability of that compnent. Can it be implemented into a future product. If this is the case, you must think about developing it as a reusable component. Unity Unity offers a unique solution to the creation of reusable components through the use of Custom Packages . These packages can hold scripts, native objects, assets and more. It is widely recommended that you create a custom package when creating a Unity Reusable Component.","title":"Reasoning"},{"location":"Overview/collaboration/Reusable%20Components/#steps-towards-making-a-custom-package","text":"Speak to another team member about converting an existing component or creating a new component as a package Create another repository on our github organisation to hold the package* Follow the steps found in the unity documentation to develop your component Once ready to include in the product, Include it as a Git Dependency in the product's packages.json file. This will allow the editor to fetch the latest version directly from git, simplifying the import process C/C++ Reusable C/C++ code must be compiled into a seperate shared or static library (depending on how it needs to be used) and then imported into the project.","title":"Steps towards making a custom package"},{"location":"Overview/collaboration/Source%20Design%20Documents/C%23%20Design/","text":"C# Source Design Before you begin writing code in C# please take a moment to read this document as It contains the conventions that we, as a group will use throught C# classes. C# Naming Conventions Please take a look at this page for C# naming conventions Our namespace To the java package, we have namespaces in C#. This will take the form of our reverse domain all in lower case with consecutive words concatenated together: me.derangedsenators.<product>.<feature>.<subnamespace> more on namespaces here Code file structure A source file consists of, in order: License or copyright information, if present Import Statements Namespace declaration Exactly one top-level class Exactly one blank line seperating each section that is present Non-ASCII characters For non-ASCII characters, an actual Unicode or equivalent Unicode escape is used. The choice depends only on what makes the code easier to understand, although Unicode escapes outside string literals and comments are strongly discouraged. For Example: | Code | Comment | | ------------- |-------------| | string UnitAbbrev = \"\u03bcs\" | Best: perfectly clear even without a comment.| | string UnitAbbrev = \"\\u03bcs\"; // \"\u03bcs\" | Allowed, but there's no reason to do this. | | string UnitAbbrev = \"\\u03bcs\"; // Greek letter mu, \"s\" | Allowed, but awkward and prone to mistakes. | | string UnitAbbrev = \"\\u03bcs\"; | Poor: the reader has no idea what this is. | | return '\\ufeff' + Content; // byte order mark |Good: use escapes for non-printable characters, and comment if necessary. | Formatting Braces Braces are used with if , else , for , do and while statements, even when the body is empty or contains only a single statement. Variable Declaration Only have one variable per declaration Every variable declaration (field or local) declares only one variable: declarations such as int a, b; are not used. Exception: Multiple variable declarations are acceptable in the header of a for loop. Declare variables when requried Local variables are not habitually declared at the start of their containing block or block-like construct. Instead, local variables are declared close to the point they are first used (within reason), to minimize their scope. Local variable declarations typically have initializers, or are initialized immediately after declaration. Switch Statements Indentation As with all blocks, the contents of switch blocks are indented by 1 tab Deprecating Methods and Classes If code classes or methods are replaced by newer ones or are no longer maintained. The best way to do this should be: [Obsolete(\"Method1 is deprecated, please use Method2 instead.\")] // YOu must include a message here to inform developers. public void Method1() { \u2026 } If you also need this to cause an error during compilaton instead of a warning (enforcing changes to be made) add true to the obsolete attribute like this [Obsolete(\"Method1 is deprecated, please use Method2 instead.\", true)] Some parts have been adapted from (https://google.github.io/styleguide/javaguide.html) for C# Code Comments To ensure that code is self-explainable, It is recommended to add code comments. In C#, Code comments are written after a double slash for single ( // ) line or a slash and asterisk ( /* */ ) for multiline comments. Documentation Classes, Methods and functions can be documented using C# XML documentation which is automatically activated by most C# ides whenever a /// is typed above a class or method. Similar to HTML, XML makes use of tags which you can use to document your code. The description should be included in the <summary> tags.","title":"C# Source Design"},{"location":"Overview/collaboration/Source%20Design%20Documents/C%23%20Design/#c-source-design","text":"Before you begin writing code in C# please take a moment to read this document as It contains the conventions that we, as a group will use throught C# classes.","title":"C# Source Design"},{"location":"Overview/collaboration/Source%20Design%20Documents/C%23%20Design/#c-naming-conventions","text":"Please take a look at this page for C# naming conventions","title":"C# Naming Conventions"},{"location":"Overview/collaboration/Source%20Design%20Documents/C%23%20Design/#our-namespace","text":"To the java package, we have namespaces in C#. This will take the form of our reverse domain all in lower case with consecutive words concatenated together: me.derangedsenators.<product>.<feature>.<subnamespace> more on namespaces here","title":"Our namespace"},{"location":"Overview/collaboration/Source%20Design%20Documents/C%23%20Design/#code-file-structure","text":"A source file consists of, in order: License or copyright information, if present Import Statements Namespace declaration Exactly one top-level class Exactly one blank line seperating each section that is present","title":"Code file structure"},{"location":"Overview/collaboration/Source%20Design%20Documents/C%23%20Design/#non-ascii-characters","text":"For non-ASCII characters, an actual Unicode or equivalent Unicode escape is used. The choice depends only on what makes the code easier to understand, although Unicode escapes outside string literals and comments are strongly discouraged. For Example: | Code | Comment | | ------------- |-------------| | string UnitAbbrev = \"\u03bcs\" | Best: perfectly clear even without a comment.| | string UnitAbbrev = \"\\u03bcs\"; // \"\u03bcs\" | Allowed, but there's no reason to do this. | | string UnitAbbrev = \"\\u03bcs\"; // Greek letter mu, \"s\" | Allowed, but awkward and prone to mistakes. | | string UnitAbbrev = \"\\u03bcs\"; | Poor: the reader has no idea what this is. | | return '\\ufeff' + Content; // byte order mark |Good: use escapes for non-printable characters, and comment if necessary. |","title":"Non-ASCII characters"},{"location":"Overview/collaboration/Source%20Design%20Documents/C%23%20Design/#formatting","text":"","title":"Formatting"},{"location":"Overview/collaboration/Source%20Design%20Documents/C%23%20Design/#braces","text":"Braces are used with if , else , for , do and while statements, even when the body is empty or contains only a single statement.","title":"Braces"},{"location":"Overview/collaboration/Source%20Design%20Documents/C%23%20Design/#variable-declaration","text":"","title":"Variable Declaration"},{"location":"Overview/collaboration/Source%20Design%20Documents/C%23%20Design/#only-have-one-variable-per-declaration","text":"Every variable declaration (field or local) declares only one variable: declarations such as int a, b; are not used. Exception: Multiple variable declarations are acceptable in the header of a for loop.","title":"Only have one variable per declaration"},{"location":"Overview/collaboration/Source%20Design%20Documents/C%23%20Design/#declare-variables-when-requried","text":"Local variables are not habitually declared at the start of their containing block or block-like construct. Instead, local variables are declared close to the point they are first used (within reason), to minimize their scope. Local variable declarations typically have initializers, or are initialized immediately after declaration.","title":"Declare variables when requried"},{"location":"Overview/collaboration/Source%20Design%20Documents/C%23%20Design/#switch-statements","text":"","title":"Switch Statements"},{"location":"Overview/collaboration/Source%20Design%20Documents/C%23%20Design/#indentation","text":"As with all blocks, the contents of switch blocks are indented by 1 tab","title":"Indentation"},{"location":"Overview/collaboration/Source%20Design%20Documents/C%23%20Design/#deprecating-methods-and-classes","text":"If code classes or methods are replaced by newer ones or are no longer maintained. The best way to do this should be: [Obsolete(\"Method1 is deprecated, please use Method2 instead.\")] // YOu must include a message here to inform developers. public void Method1() { \u2026 } If you also need this to cause an error during compilaton instead of a warning (enforcing changes to be made) add true to the obsolete attribute like this [Obsolete(\"Method1 is deprecated, please use Method2 instead.\", true)] Some parts have been adapted from (https://google.github.io/styleguide/javaguide.html) for C#","title":"Deprecating Methods and Classes"},{"location":"Overview/collaboration/Source%20Design%20Documents/C%23%20Design/#code-comments","text":"To ensure that code is self-explainable, It is recommended to add code comments. In C#, Code comments are written after a double slash for single ( // ) line or a slash and asterisk ( /* */ ) for multiline comments.","title":"Code Comments"},{"location":"Overview/collaboration/Source%20Design%20Documents/C%23%20Design/#documentation","text":"Classes, Methods and functions can be documented using C# XML documentation which is automatically activated by most C# ides whenever a /// is typed above a class or method. Similar to HTML, XML makes use of tags which you can use to document your code. The description should be included in the <summary> tags.","title":"Documentation"},{"location":"Overview/collaboration/Source%20Design%20Documents/C%2B%2B%20Design/","text":"C++ Source Design More to Follow","title":"C++ Source Design"},{"location":"Overview/collaboration/Source%20Design%20Documents/C%2B%2B%20Design/#c-source-design","text":"More to Follow","title":"C++ Source Design"},{"location":"PlayerLink/","text":"PlayerLink PlayerLink is a native multiplayer API currently in development by Deranged Senators. This API will provide developers with a server 'game-room' environment to host online multiplayer games. Here, you will find the documentation for our source code which is also available on GitHub and is licensed with the Apache 2.0 license.","title":"PlayerLink"},{"location":"PlayerLink/#playerlink","text":"PlayerLink is a native multiplayer API currently in development by Deranged Senators. This API will provide developers with a server 'game-room' environment to host online multiplayer games. Here, you will find the documentation for our source code which is also available on GitHub and is licensed with the Apache 2.0 license.","title":"PlayerLink"},{"location":"PlayerLink/Open%20Source%20Licenses/","text":"Open Source Licenses Apache License, Version 2.0 (Apache 2.0) is the preferred license for PlayerLink, and the associated extensions and plugins related to PlayerLink, released by DerangedSenators is also licensed with Apache 2.0. While the project strives to adhere to the preferred license, there are exceptions, which are handled on a case-by-case basis.","title":"Open Source Licenses"},{"location":"PlayerLink/Open%20Source%20Licenses/#open-source-licenses","text":"Apache License, Version 2.0 (Apache 2.0) is the preferred license for PlayerLink, and the associated extensions and plugins related to PlayerLink, released by DerangedSenators is also licensed with Apache 2.0. While the project strives to adhere to the preferred license, there are exceptions, which are handled on a case-by-case basis.","title":"Open Source Licenses"},{"location":"PlayerLink/Architecture/Overlay%20System/","text":"PlayerLink Overlay System - Beta As PlayerLink is developed as a native cross-platform system, accomodations have had to be made for platform-specific code. As a result we have developed the overlay system. How it works An overlay is a static library created to be linked onto a PlayerLink library if conditions are met during runtime Example of Overlay One of the overlays we have created is the winsockinit overlay which holds code that needs to be included on top of PLAYERLINK_CORE_NET library for Windows devices ( winsockinit.h holds code required by Windows to initialise the Winsock2.dll library). The overlay was created as follows: Create a mirroring path within src/platfrom/microsoft/win32/overlays mirroring the src directory, In this case we had to add the following subfolders core/net . In this folder, add your source code. In the case of this example it was winsockinit.h and winsockinit.c . Create a CMakeLists.txt in the folder and add the following: add_library( PLAYERLINK_CORE_NET_WIN32 winsockinit.h winsockinit.c ) This creates the static library which will be linked into PLAYERLINK_CORE_NET Now you need to add some code in core/net/CMakeLists.txt to ensure that this library is compiled: IF(WIN32) include_directories(${CMAKE_SOURCE_DIR}/src/platform/microsoft/win32/overlays/core/net/) target_link_libraries(PLAYERLINK_CORE_NET PRIVATE PLAYERLINK_CORE_NET_WIN32) ENDIF() This chunk of code will link the overlay library if the compiler detects that it is compiling on a Win32 system. Now in your code, you will have to use macros to include the winsockinit.h file. For example: #ifdef WIN32 #include 'winsockinit.h' #endif This will ensure that the defined functions are included in the class that is using them. Nested Method Calls We are currently working on a solution to have efficient nested method calls using the overlay system but at the moment you may use pre-processor directives as a workaround Exclusive Classes and Methods At the moment we havent yet created a solution to allow for exclusive methods to existing PlayerLink classes but you can include classes using pre-processor directives","title":"PlayerLink Overlay System - Beta"},{"location":"PlayerLink/Architecture/Overlay%20System/#playerlink-overlay-system-beta","text":"As PlayerLink is developed as a native cross-platform system, accomodations have had to be made for platform-specific code. As a result we have developed the overlay system.","title":"PlayerLink Overlay System - Beta"},{"location":"PlayerLink/Architecture/Overlay%20System/#how-it-works","text":"An overlay is a static library created to be linked onto a PlayerLink library if conditions are met during runtime","title":"How it works"},{"location":"PlayerLink/Architecture/Overlay%20System/#example-of-overlay","text":"One of the overlays we have created is the winsockinit overlay which holds code that needs to be included on top of PLAYERLINK_CORE_NET library for Windows devices ( winsockinit.h holds code required by Windows to initialise the Winsock2.dll library). The overlay was created as follows: Create a mirroring path within src/platfrom/microsoft/win32/overlays mirroring the src directory, In this case we had to add the following subfolders core/net . In this folder, add your source code. In the case of this example it was winsockinit.h and winsockinit.c . Create a CMakeLists.txt in the folder and add the following: add_library( PLAYERLINK_CORE_NET_WIN32 winsockinit.h winsockinit.c ) This creates the static library which will be linked into PLAYERLINK_CORE_NET Now you need to add some code in core/net/CMakeLists.txt to ensure that this library is compiled: IF(WIN32) include_directories(${CMAKE_SOURCE_DIR}/src/platform/microsoft/win32/overlays/core/net/) target_link_libraries(PLAYERLINK_CORE_NET PRIVATE PLAYERLINK_CORE_NET_WIN32) ENDIF() This chunk of code will link the overlay library if the compiler detects that it is compiling on a Win32 system. Now in your code, you will have to use macros to include the winsockinit.h file. For example: #ifdef WIN32 #include 'winsockinit.h' #endif This will ensure that the defined functions are included in the class that is using them.","title":"Example of Overlay"},{"location":"PlayerLink/Architecture/Overlay%20System/#nested-method-calls","text":"We are currently working on a solution to have efficient nested method calls using the overlay system but at the moment you may use pre-processor directives as a workaround","title":"Nested Method Calls"},{"location":"PlayerLink/Architecture/Overlay%20System/#exclusive-classes-and-methods","text":"At the moment we havent yet created a solution to allow for exclusive methods to existing PlayerLink classes but you can include classes using pre-processor directives","title":"Exclusive Classes and Methods"},{"location":"PlayerLink/Architecture/PlayerLink%20Repository/","text":"The PlayerLink Repository The PlayerLink repository contains the source code for both server and client base implementation of PlayerLink. PlayerLink is built using CMake, a cross-platform C/C++ build system. Repository Layout The Repository is layed out as follows: \ud83d\udcc2 \ud83d\udce6 \u2523 \u2503 ``` \ud83d\udce6 PlayerLink \u2503 \u2523 \ud83d\udcc2 include \u2503 \u2523 *.cmake //These files will host cmake functions to import additional libraries such as boost \u2503 \u2523 \ud83d\udcc2 Libraries \u2503 \u2523 \ud83d\udcc2 dynlibs \u2503 \u2503 \u2523 \ud83d\udcc2 win //Windows DLLs \u2503 \u2503 \u2523 \ud83d\udcc2 linux //Linux .so files \u2503 \u2503 \u2523 \ud83d\udcc2 mac // dynlibs for MacOS \u2503 \u2523 \ud83d\udcc2 static \u2503 \u2523 \ud83d\udcc2 win //Windows Static libs \u2503 \u2523 \ud83d\udcc2 linux //Linux Static libs \u2503 \u2523 \ud83d\udcc2 mac // dynlibs Static libs \u2523 \ud83d\udcc2 src \u2523 \ud83d\udcc2client // PlayerLink Client system \u2503 \u2523 \ud83d\udcc2net // Client Network Code \u2523 \ud83d\udcc2core // PlayerLink Core Library \u2503 \u2523 \ud83d\udcc2crypto // Cryptography Functions \u2503 \u2523 \ud83d\udcc2net // Networking code \u2503 \u2523 \ud83d\udcc2utils // PlayerLink Utility Code \u2503 \u2503 \u2523 \ud83d\udcc2exceptions //PlayerLink Exceptions Library \u2503 \u2503 \u2523 \ud83d\udcc2logger // PlayerLink Logger \u2523 \ud83d\udcc2platform \u2503 \u2523 \ud83d\udcc2ieee \u2503 \u2503 \u2517 \ud83d\udcc2posix // Posix Specific code \u2503 \u2523 \ud83d\udcc2microsoft \u2503 \u2503 \u2517 \ud83d\udcc2win32 //Win32 specific code \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2overlays \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcc2core \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2net \u2503 \u2517 \ud83d\udcc2unix // Unix specific code \u2517 \ud83d\udcc2server // PlayerLink Server \u2503 \u2523 \ud83d\udcc2net // Network sources \u2503 \u2523 \ud83d\udcc2room //GameRoom sources","title":"The PlayerLink Repository"},{"location":"PlayerLink/Architecture/PlayerLink%20Repository/#the-playerlink-repository","text":"The PlayerLink repository contains the source code for both server and client base implementation of PlayerLink. PlayerLink is built using CMake, a cross-platform C/C++ build system.","title":"The PlayerLink Repository"},{"location":"PlayerLink/Architecture/PlayerLink%20Repository/#repository-layout","text":"The Repository is layed out as follows: \ud83d\udcc2 \ud83d\udce6 \u2523 \u2503 ``` \ud83d\udce6 PlayerLink \u2503 \u2523 \ud83d\udcc2 include \u2503 \u2523 *.cmake //These files will host cmake functions to import additional libraries such as boost \u2503 \u2523 \ud83d\udcc2 Libraries \u2503 \u2523 \ud83d\udcc2 dynlibs \u2503 \u2503 \u2523 \ud83d\udcc2 win //Windows DLLs \u2503 \u2503 \u2523 \ud83d\udcc2 linux //Linux .so files \u2503 \u2503 \u2523 \ud83d\udcc2 mac // dynlibs for MacOS \u2503 \u2523 \ud83d\udcc2 static \u2503 \u2523 \ud83d\udcc2 win //Windows Static libs \u2503 \u2523 \ud83d\udcc2 linux //Linux Static libs \u2503 \u2523 \ud83d\udcc2 mac // dynlibs Static libs \u2523 \ud83d\udcc2 src \u2523 \ud83d\udcc2client // PlayerLink Client system \u2503 \u2523 \ud83d\udcc2net // Client Network Code \u2523 \ud83d\udcc2core // PlayerLink Core Library \u2503 \u2523 \ud83d\udcc2crypto // Cryptography Functions \u2503 \u2523 \ud83d\udcc2net // Networking code \u2503 \u2523 \ud83d\udcc2utils // PlayerLink Utility Code \u2503 \u2503 \u2523 \ud83d\udcc2exceptions //PlayerLink Exceptions Library \u2503 \u2503 \u2523 \ud83d\udcc2logger // PlayerLink Logger \u2523 \ud83d\udcc2platform \u2503 \u2523 \ud83d\udcc2ieee \u2503 \u2503 \u2517 \ud83d\udcc2posix // Posix Specific code \u2503 \u2523 \ud83d\udcc2microsoft \u2503 \u2503 \u2517 \ud83d\udcc2win32 //Win32 specific code \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2overlays \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcc2core \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2net \u2503 \u2517 \ud83d\udcc2unix // Unix specific code \u2517 \ud83d\udcc2server // PlayerLink Server \u2503 \u2523 \ud83d\udcc2net // Network sources \u2503 \u2523 \ud83d\udcc2room //GameRoom sources","title":"Repository Layout"},{"location":"PlayerLink/Classes/","text":"Classes struct DFHValues namespace PlayerLink Root Namespace for the PlayerLink API. namespace Client Shared Library which will be implemented by the client application. class Client Client Class which is connected to the game and provides an interface to connect to the server. namespace Core Contains source code which is shared by both PlayerLink Server and PlayerLink Client . Compiles to a static library. class Logger A Singelton Logger class which will be used by PlayerLink to create logs based on a severity level and append to a logfile. class RuntimeException exception class for Runtime environment, throws exceptions whenver an issue occurs with connectivity or any other runtime related error occurs class SHA256 class Socket Lowest socket implementation. This class will be used by top level socket implementations. class TCPSocket namespace Server Shared Library which will be implemented by the server application. class Client class GameRoom class GameServer A GameServer object which is used to host a game or lobby. It uses three threads to efficiently do this; An accept thread to allow new players to join, a read thread to read packets sent by players to the server and a write thread to relay those messages to the other players. struct Message struct Player class ServerSocket class TCPServer Updated on 29 January 2021 at 18:34:44 UTC","title":"Classes"},{"location":"PlayerLink/Classes/#classes","text":"struct DFHValues namespace PlayerLink Root Namespace for the PlayerLink API. namespace Client Shared Library which will be implemented by the client application. class Client Client Class which is connected to the game and provides an interface to connect to the server. namespace Core Contains source code which is shared by both PlayerLink Server and PlayerLink Client . Compiles to a static library. class Logger A Singelton Logger class which will be used by PlayerLink to create logs based on a severity level and append to a logfile. class RuntimeException exception class for Runtime environment, throws exceptions whenver an issue occurs with connectivity or any other runtime related error occurs class SHA256 class Socket Lowest socket implementation. This class will be used by top level socket implementations. class TCPSocket namespace Server Shared Library which will be implemented by the server application. class Client class GameRoom class GameServer A GameServer object which is used to host a game or lobby. It uses three threads to efficiently do this; An accept thread to allow new players to join, a read thread to read packets sent by players to the server and a write thread to relay those messages to the other players. struct Message struct Player class ServerSocket class TCPServer Updated on 29 January 2021 at 18:34:44 UTC","title":"Classes"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Client_1_1Client/","text":"PlayerLink::Client::Client Client Class which is connected to the game and provides an interface to connect to the server. More... #include <Client.h> Public Functions Name Client (std::string serveraddr, std::string port =DEFAULT_TCP_PORT) Constructs a Client Instance. Currently only TCP functionality is available. ~Client () bool login (std::string usrname) Creates a Session with the server using the provided username. void logout () Logs the user out and disconnects the connection from the server. void addMsgToBuffer (unsigned char * message) Adds a message to the buffer to be sent to the server. Detailed Description class PlayerLink :: Client :: Client ; Client Class which is connected to the game and provides an interface to connect to the server. Author : Hanzalah Ravat Public Functions Documentation function Client Client ( std :: string serveraddr , std :: string port = DEFAULT_TCP_PORT ) Constructs a Client Instance. Currently only TCP functionality is available. Parameters : serveraddr The address of the server port The port to use to connect to the server Return : A Client Type which can be used to access client functions and methods function ~Client ~ Client () function login bool login ( std :: string usrname ) Creates a Session with the server using the provided username. Parameters : usrName This Users username Return : 0 if the session runs and exits successfully function logout void logout () Logs the user out and disconnects the connection from the server. function addMsgToBuffer void addMsgToBuffer ( unsigned char * message ) Adds a message to the buffer to be sent to the server. Parameters : message The byte array to be sent to the server Updated on 29 January 2021 at 18:34:44 UTC","title":"PlayerLink::Client::Client"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Client_1_1Client/#playerlinkclientclient","text":"Client Class which is connected to the game and provides an interface to connect to the server. More... #include <Client.h>","title":"PlayerLink::Client::Client"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Client_1_1Client/#public-functions","text":"Name Client (std::string serveraddr, std::string port =DEFAULT_TCP_PORT) Constructs a Client Instance. Currently only TCP functionality is available. ~Client () bool login (std::string usrname) Creates a Session with the server using the provided username. void logout () Logs the user out and disconnects the connection from the server. void addMsgToBuffer (unsigned char * message) Adds a message to the buffer to be sent to the server.","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Client_1_1Client/#detailed-description","text":"class PlayerLink :: Client :: Client ; Client Class which is connected to the game and provides an interface to connect to the server. Author : Hanzalah Ravat","title":"Detailed Description"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Client_1_1Client/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Client_1_1Client/#function-client","text":"Client ( std :: string serveraddr , std :: string port = DEFAULT_TCP_PORT ) Constructs a Client Instance. Currently only TCP functionality is available. Parameters : serveraddr The address of the server port The port to use to connect to the server Return : A Client Type which can be used to access client functions and methods","title":"function Client"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Client_1_1Client/#function-client_1","text":"~ Client ()","title":"function ~Client"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Client_1_1Client/#function-login","text":"bool login ( std :: string usrname ) Creates a Session with the server using the provided username. Parameters : usrName This Users username Return : 0 if the session runs and exits successfully","title":"function login"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Client_1_1Client/#function-logout","text":"void logout () Logs the user out and disconnects the connection from the server.","title":"function logout"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Client_1_1Client/#function-addmsgtobuffer","text":"void addMsgToBuffer ( unsigned char * message ) Adds a message to the buffer to be sent to the server. Parameters : message The byte array to be sent to the server Updated on 29 January 2021 at 18:34:44 UTC","title":"function addMsgToBuffer"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Logger/","text":"PlayerLink::Core::Logger A Singelton Logger class which will be used by PlayerLink to create logs based on a severity level and append to a logfile. More... #include <Logger.h> Public Functions Name Logger ( Logger & otherLogger) void operator= (const Logger & ) void log ( LogSeverity severity, std::string message, const boost::source_location & location =BOOST_CURRENT_LOCATION) Logger * getLogger () Detailed Description class PlayerLink :: Core :: Logger ; A Singelton Logger class which will be used by PlayerLink to create logs based on a severity level and append to a logfile. Author : Hanzalah Ravat Ashwin Jaimal Public Functions Documentation function Logger Logger ( Logger & otherLogger ) Singleton Class should not be cloneable. Constructor used to prevent multiple instances of Logger function operator= void operator = ( const Logger & ) Singleton classes must not be assignable. This method will prevent the class from being assingned function log void log ( LogSeverity severity , std :: string message , const boost :: source_location & location = BOOST_CURRENT_LOCATION ) Parameters : severity The Severity level of the log message The message which will be written into the logfile Method used to log an event function getLogger static Logger * getLogger () Return : A pointer to the Logger Instance in memory Gets the running logger instance pointer Updated on 29 January 2021 at 18:34:44 UTC","title":"PlayerLink::Core::Logger"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Logger/#playerlinkcorelogger","text":"A Singelton Logger class which will be used by PlayerLink to create logs based on a severity level and append to a logfile. More... #include <Logger.h>","title":"PlayerLink::Core::Logger"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Logger/#public-functions","text":"Name Logger ( Logger & otherLogger) void operator= (const Logger & ) void log ( LogSeverity severity, std::string message, const boost::source_location & location =BOOST_CURRENT_LOCATION) Logger * getLogger ()","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Logger/#detailed-description","text":"class PlayerLink :: Core :: Logger ; A Singelton Logger class which will be used by PlayerLink to create logs based on a severity level and append to a logfile. Author : Hanzalah Ravat Ashwin Jaimal","title":"Detailed Description"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Logger/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Logger/#function-logger","text":"Logger ( Logger & otherLogger ) Singleton Class should not be cloneable. Constructor used to prevent multiple instances of Logger","title":"function Logger"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Logger/#function-operator","text":"void operator = ( const Logger & ) Singleton classes must not be assignable. This method will prevent the class from being assingned","title":"function operator="},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Logger/#function-log","text":"void log ( LogSeverity severity , std :: string message , const boost :: source_location & location = BOOST_CURRENT_LOCATION ) Parameters : severity The Severity level of the log message The message which will be written into the logfile Method used to log an event","title":"function log"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Logger/#function-getlogger","text":"static Logger * getLogger () Return : A pointer to the Logger Instance in memory Gets the running logger instance pointer Updated on 29 January 2021 at 18:34:44 UTC","title":"function getLogger"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1RuntimeException/","text":"PlayerLink::Core::RuntimeException exception class for Runtime environment, throws exceptions whenver an issue occurs with connectivity or any other runtime related error occurs More... #include <RuntimeException.h> Inherits from runtime_error Public Functions Name RuntimeException (const char * message, const boost::source_location & location =BOOST_CURRENT_LOCATION) const char * what () const Detailed Description class PlayerLink :: Core :: RuntimeException ; exception class for Runtime environment, throws exceptions whenver an issue occurs with connectivity or any other runtime related error occurs Author : Ash Jaimal Hanzalah Ravat Public Functions Documentation function RuntimeException RuntimeException ( const char * message , const boost :: source_location & location = BOOST_CURRENT_LOCATION ) Parameters : message The error message location The Location of the error. This is an optional parameter and is typically taken by default Creates a Runtime Exception function what const char * what () const Updated on 29 January 2021 at 18:34:44 UTC","title":"PlayerLink::Core::RuntimeException"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1RuntimeException/#playerlinkcoreruntimeexception","text":"exception class for Runtime environment, throws exceptions whenver an issue occurs with connectivity or any other runtime related error occurs More... #include <RuntimeException.h> Inherits from runtime_error","title":"PlayerLink::Core::RuntimeException"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1RuntimeException/#public-functions","text":"Name RuntimeException (const char * message, const boost::source_location & location =BOOST_CURRENT_LOCATION) const char * what () const","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1RuntimeException/#detailed-description","text":"class PlayerLink :: Core :: RuntimeException ; exception class for Runtime environment, throws exceptions whenver an issue occurs with connectivity or any other runtime related error occurs Author : Ash Jaimal Hanzalah Ravat","title":"Detailed Description"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1RuntimeException/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1RuntimeException/#function-runtimeexception","text":"RuntimeException ( const char * message , const boost :: source_location & location = BOOST_CURRENT_LOCATION ) Parameters : message The error message location The Location of the error. This is an optional parameter and is typically taken by default Creates a Runtime Exception","title":"function RuntimeException"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1RuntimeException/#function-what","text":"const char * what () const Updated on 29 January 2021 at 18:34:44 UTC","title":"function what"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/","text":"PlayerLink::Core::SHA256 Protected Types Name typedef unsigned char uint8 typedef unsigned int uint32 typedef unsigned long long uint64 Public Functions Name void init () void update (const unsigned char * message, unsigned int len) void final (unsigned char * digest) Protected Functions Name void transform (const unsigned char * message, unsigned int block_nb) Public Attributes Name const unsigned int DIGEST_SIZE Protected Attributes Name const uint32 sha256_k const unsigned int SHA224_256_BLOCK_SIZE unsigned int m_tot_len unsigned int m_len unsigned char m_block uint32 m_h Protected Types Documentation typedef uint8 typedef unsigned char uint8 ; typedef uint32 typedef unsigned int uint32 ; typedef uint64 typedef unsigned long long uint64 ; Public Functions Documentation function init void init () function update void update ( const unsigned char * message , unsigned int len ) function final void final ( unsigned char * digest ) Protected Functions Documentation function transform void transform ( const unsigned char * message , unsigned int block_nb ) Public Attributes Documentation variable DIGEST_SIZE static const unsigned int DIGEST_SIZE = ( 256 / 8 ); Protected Attributes Documentation variable sha256_k static const uint32 sha256_k = { 0x428a2f98 , 0x71374491 , 0xb5c0fbcf , 0xe9b5dba5 , 0x3956c25b , 0x59f111f1 , 0x923f82a4 , 0xab1c5ed5 , 0xd807aa98 , 0x12835b01 , 0x243185be , 0x550c7dc3 , 0x72be5d74 , 0x80deb1fe , 0x9bdc06a7 , 0xc19bf174 , 0xe49b69c1 , 0xefbe4786 , 0x0fc19dc6 , 0x240ca1cc , 0x2de92c6f , 0x4a7484aa , 0x5cb0a9dc , 0x76f988da , 0x983e5152 , 0xa831c66d , 0xb00327c8 , 0xbf597fc7 , 0xc6e00bf3 , 0xd5a79147 , 0x06ca6351 , 0x14292967 , 0x27b70a85 , 0x2e1b2138 , 0x4d2c6dfc , 0x53380d13 , 0x650a7354 , 0x766a0abb , 0x81c2c92e , 0x92722c85 , 0xa2bfe8a1 , 0xa81a664b , 0xc24b8b70 , 0xc76c51a3 , 0xd192e819 , 0xd6990624 , 0xf40e3585 , 0x106aa070 , 0x19a4c116 , 0x1e376c08 , 0x2748774c , 0x34b0bcb5 , 0x391c0cb3 , 0x4ed8aa4a , 0x5b9cca4f , 0x682e6ff3 , 0x748f82ee , 0x78a5636f , 0x84c87814 , 0x8cc70208 , 0x90befffa , 0xa4506ceb , 0xbef9a3f7 , 0xc67178f2 }; variable SHA224_256_BLOCK_SIZE static const unsigned int SHA224_256_BLOCK_SIZE = ( 512 / 8 ); variable m_tot_len unsigned int m_tot_len ; variable m_len unsigned int m_len ; variable m_block unsigned char m_block ; variable m_h uint32 m_h ; Updated on 29 January 2021 at 18:34:44 UTC","title":"PlayerLink::Core::SHA256"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#playerlinkcoresha256","text":"","title":"PlayerLink::Core::SHA256"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#protected-types","text":"Name typedef unsigned char uint8 typedef unsigned int uint32 typedef unsigned long long uint64","title":"Protected Types"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#public-functions","text":"Name void init () void update (const unsigned char * message, unsigned int len) void final (unsigned char * digest)","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#protected-functions","text":"Name void transform (const unsigned char * message, unsigned int block_nb)","title":"Protected Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#public-attributes","text":"Name const unsigned int DIGEST_SIZE","title":"Public Attributes"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#protected-attributes","text":"Name const uint32 sha256_k const unsigned int SHA224_256_BLOCK_SIZE unsigned int m_tot_len unsigned int m_len unsigned char m_block uint32 m_h","title":"Protected Attributes"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#protected-types-documentation","text":"","title":"Protected Types Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#typedef-uint8","text":"typedef unsigned char uint8 ;","title":"typedef uint8"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#typedef-uint32","text":"typedef unsigned int uint32 ;","title":"typedef uint32"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#typedef-uint64","text":"typedef unsigned long long uint64 ;","title":"typedef uint64"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#function-init","text":"void init ()","title":"function init"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#function-update","text":"void update ( const unsigned char * message , unsigned int len )","title":"function update"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#function-final","text":"void final ( unsigned char * digest )","title":"function final"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#function-transform","text":"void transform ( const unsigned char * message , unsigned int block_nb )","title":"function transform"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#variable-digest_size","text":"static const unsigned int DIGEST_SIZE = ( 256 / 8 );","title":"variable DIGEST_SIZE"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#variable-sha256_k","text":"static const uint32 sha256_k = { 0x428a2f98 , 0x71374491 , 0xb5c0fbcf , 0xe9b5dba5 , 0x3956c25b , 0x59f111f1 , 0x923f82a4 , 0xab1c5ed5 , 0xd807aa98 , 0x12835b01 , 0x243185be , 0x550c7dc3 , 0x72be5d74 , 0x80deb1fe , 0x9bdc06a7 , 0xc19bf174 , 0xe49b69c1 , 0xefbe4786 , 0x0fc19dc6 , 0x240ca1cc , 0x2de92c6f , 0x4a7484aa , 0x5cb0a9dc , 0x76f988da , 0x983e5152 , 0xa831c66d , 0xb00327c8 , 0xbf597fc7 , 0xc6e00bf3 , 0xd5a79147 , 0x06ca6351 , 0x14292967 , 0x27b70a85 , 0x2e1b2138 , 0x4d2c6dfc , 0x53380d13 , 0x650a7354 , 0x766a0abb , 0x81c2c92e , 0x92722c85 , 0xa2bfe8a1 , 0xa81a664b , 0xc24b8b70 , 0xc76c51a3 , 0xd192e819 , 0xd6990624 , 0xf40e3585 , 0x106aa070 , 0x19a4c116 , 0x1e376c08 , 0x2748774c , 0x34b0bcb5 , 0x391c0cb3 , 0x4ed8aa4a , 0x5b9cca4f , 0x682e6ff3 , 0x748f82ee , 0x78a5636f , 0x84c87814 , 0x8cc70208 , 0x90befffa , 0xa4506ceb , 0xbef9a3f7 , 0xc67178f2 };","title":"variable sha256_k"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#variable-sha224_256_block_size","text":"static const unsigned int SHA224_256_BLOCK_SIZE = ( 512 / 8 );","title":"variable SHA224_256_BLOCK_SIZE"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#variable-m_tot_len","text":"unsigned int m_tot_len ;","title":"variable m_tot_len"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#variable-m_len","text":"unsigned int m_len ;","title":"variable m_len"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#variable-m_block","text":"unsigned char m_block ;","title":"variable m_block"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1SHA256/#variable-m_h","text":"uint32 m_h ; Updated on 29 January 2021 at 18:34:44 UTC","title":"variable m_h"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/","text":"PlayerLink::Core::Socket Lowest socket implementation. This class will be used by top level socket implementations. More... #include <Socket.h> Inherited by TCPSocket , TCPServer Public Functions Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const Returns the IP Address of the remote device. uint32_t getPort () const int getSocketDescriptor () const bool close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError () Protected Attributes Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance. Detailed Description class PlayerLink :: Core :: Socket ; Lowest socket implementation. This class will be used by top level socket implementations. Author : Hanzalah Ravat Public Functions Documentation function Socket Socket ( int family , int type , int flag ) Constructs a Socket object. Parameters : family Address Family. type The type specification for the new socket flag The protocol used for data transmission Return : If no error occurs, socket returns a descriptor referencing the new socket. Otherwise, a value of -1 Attention : Winsock2.dll is automatically initialised when using this method on a Windows Device function Socket explicit Socket ( int fd ) function getAddress std :: string getAddress () const Returns the IP Address of the remote device. Return : Gets the address of the remote device function getPort uint32_t getPort () const Return : The port number used for this connection function getSocketDescriptor int getSocketDescriptor () const Return : The socket descriptor used for this socket function close bool close () Closes the connection. Return : True if socket closes or false if there was an error while closing the socket function isClosed bool isClosed () Return : true if the socket connection has been closed or false if it is still open function setBlocking bool setBlocking ( bool swtch ) Allows you to set the blocking mode for this file descriptor. Parameters : swtch Sets the blocking value Return : The result of the blocking, True if blocking was successful or false if there was an issue with changing the blocking status function getLastError int getLastError () Return : The last error number Protected Attributes Documentation variable mSocketFD int mSocketFD ; File Descriptor for this socket instance. variable socketIsClosed bool socketIsClosed ; Flag if socket is open or closed. variable isBlocked bool isBlocked ; Boolean to determine if blocking is enabled on this socket instance. Updated on 29 January 2021 at 18:34:44 UTC","title":"PlayerLink::Core::Socket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#playerlinkcoresocket","text":"Lowest socket implementation. This class will be used by top level socket implementations. More... #include <Socket.h> Inherited by TCPSocket , TCPServer","title":"PlayerLink::Core::Socket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#public-functions","text":"Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const Returns the IP Address of the remote device. uint32_t getPort () const int getSocketDescriptor () const bool close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError ()","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#protected-attributes","text":"Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance.","title":"Protected Attributes"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#detailed-description","text":"class PlayerLink :: Core :: Socket ; Lowest socket implementation. This class will be used by top level socket implementations. Author : Hanzalah Ravat","title":"Detailed Description"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#function-socket","text":"Socket ( int family , int type , int flag ) Constructs a Socket object. Parameters : family Address Family. type The type specification for the new socket flag The protocol used for data transmission Return : If no error occurs, socket returns a descriptor referencing the new socket. Otherwise, a value of -1 Attention : Winsock2.dll is automatically initialised when using this method on a Windows Device","title":"function Socket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#function-socket_1","text":"explicit Socket ( int fd )","title":"function Socket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#function-getaddress","text":"std :: string getAddress () const Returns the IP Address of the remote device. Return : Gets the address of the remote device","title":"function getAddress"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#function-getport","text":"uint32_t getPort () const Return : The port number used for this connection","title":"function getPort"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#function-getsocketdescriptor","text":"int getSocketDescriptor () const Return : The socket descriptor used for this socket","title":"function getSocketDescriptor"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#function-close","text":"bool close () Closes the connection. Return : True if socket closes or false if there was an error while closing the socket","title":"function close"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#function-isclosed","text":"bool isClosed () Return : true if the socket connection has been closed or false if it is still open","title":"function isClosed"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#function-setblocking","text":"bool setBlocking ( bool swtch ) Allows you to set the blocking mode for this file descriptor. Parameters : swtch Sets the blocking value Return : The result of the blocking, True if blocking was successful or false if there was an issue with changing the blocking status","title":"function setBlocking"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#function-getlasterror","text":"int getLastError () Return : The last error number","title":"function getLastError"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#variable-msocketfd","text":"int mSocketFD ; File Descriptor for this socket instance.","title":"variable mSocketFD"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#variable-socketisclosed","text":"bool socketIsClosed ; Flag if socket is open or closed.","title":"variable socketIsClosed"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1Socket/#variable-isblocked","text":"bool isBlocked ; Boolean to determine if blocking is enabled on this socket instance. Updated on 29 January 2021 at 18:34:44 UTC","title":"variable isBlocked"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/","text":"PlayerLink::Core::TCPSocket More... #include <tcpsocket.h> Inherits from Socket Public Functions Name TCPSocket (int fd) TCPSocket () bool connect (std::string address, std::string port) Connects to an address and port. bool connectWithTimeout (std::string address, std::string port, int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS) Connects to an address and port with a timeout. bool canReceive (int timeout =10000) Checks if the remote machine can recieve. size_t recieve (void * buffer, size_t bufferLength) size_t recieveAll (void * buffer, size_t bufferLength) unsigned char * recieveBytes () Recieves bytes from the remote. bool setRecvTimeout (int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS) size_t send (void const * buffer, size_t bufferLength) size_t sendAll (void const * buffer, size_t bufferLength) bool sendBytes (unsigned char * message) Sends bytes to remote. bool setSendTimeout (int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS) Additional inherited members Public Functions inherited from Socket Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const Returns the IP Address of the remote device. uint32_t getPort () const int getSocketDescriptor () const bool close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError () Protected Attributes inherited from Socket Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance. Detailed Description class PlayerLink :: Core :: TCPSocket ; TCPSocket Class extends the base socket class Public Functions Documentation function TCPSocket explicit TCPSocket ( int fd ) function TCPSocket explicit TCPSocket () function connect bool connect ( std :: string address , std :: string port ) Connects to an address and port. Parameters : address The destination address port The destination port Return : True if connection was successful and false if there was a problem function connectWithTimeout bool connectWithTimeout ( std :: string address , std :: string port , int seconds = TIMEOUT_SECONDS , int microseconds = TIMEOUT_MICROSECONDS ) Connects to an address and port with a timeout. Parameters : address The destination address port The destination port seconds The number of seconds to wait for a reply microseconds The number of microseconds to wait for a reply Return : True if connection was successful and false if there was a problem function canReceive bool canReceive ( int timeout = 10000 ) Checks if the remote machine can recieve. Parameters : timeout The number of microseconds to wait before returning false Return : True if remote is able to recieve packets and false if it can't or does not respond function recieve size_t recieve ( void * buffer , size_t bufferLength ) function recieveAll size_t recieveAll ( void * buffer , size_t bufferLength ) function recieveBytes unsigned char * recieveBytes () Recieves bytes from the remote. Return : an char* type used to hold incoming bytes function setRecvTimeout bool setRecvTimeout ( int seconds = TIMEOUT_SECONDS , int microseconds = TIMEOUT_MICROSECONDS ) function send size_t send ( void const * buffer , size_t bufferLength ) function sendAll size_t sendAll ( void const * buffer , size_t bufferLength ) function sendBytes bool sendBytes ( unsigned char * message ) Sends bytes to remote. Parameters : message The bytes in a unsigned char* Return : True if message was recieved successfully function setSendTimeout bool setSendTimeout ( int seconds = TIMEOUT_SECONDS , int microseconds = TIMEOUT_MICROSECONDS ) Updated on 29 January 2021 at 18:34:44 UTC","title":"PlayerLink::Core::TCPSocket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#playerlinkcoretcpsocket","text":"More... #include <tcpsocket.h> Inherits from Socket","title":"PlayerLink::Core::TCPSocket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#public-functions","text":"Name TCPSocket (int fd) TCPSocket () bool connect (std::string address, std::string port) Connects to an address and port. bool connectWithTimeout (std::string address, std::string port, int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS) Connects to an address and port with a timeout. bool canReceive (int timeout =10000) Checks if the remote machine can recieve. size_t recieve (void * buffer, size_t bufferLength) size_t recieveAll (void * buffer, size_t bufferLength) unsigned char * recieveBytes () Recieves bytes from the remote. bool setRecvTimeout (int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS) size_t send (void const * buffer, size_t bufferLength) size_t sendAll (void const * buffer, size_t bufferLength) bool sendBytes (unsigned char * message) Sends bytes to remote. bool setSendTimeout (int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS)","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#additional-inherited-members","text":"Public Functions inherited from Socket Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const Returns the IP Address of the remote device. uint32_t getPort () const int getSocketDescriptor () const bool close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError () Protected Attributes inherited from Socket Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance.","title":"Additional inherited members"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#detailed-description","text":"class PlayerLink :: Core :: TCPSocket ; TCPSocket Class extends the base socket class","title":"Detailed Description"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-tcpsocket","text":"explicit TCPSocket ( int fd )","title":"function TCPSocket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-tcpsocket_1","text":"explicit TCPSocket ()","title":"function TCPSocket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-connect","text":"bool connect ( std :: string address , std :: string port ) Connects to an address and port. Parameters : address The destination address port The destination port Return : True if connection was successful and false if there was a problem","title":"function connect"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-connectwithtimeout","text":"bool connectWithTimeout ( std :: string address , std :: string port , int seconds = TIMEOUT_SECONDS , int microseconds = TIMEOUT_MICROSECONDS ) Connects to an address and port with a timeout. Parameters : address The destination address port The destination port seconds The number of seconds to wait for a reply microseconds The number of microseconds to wait for a reply Return : True if connection was successful and false if there was a problem","title":"function connectWithTimeout"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-canreceive","text":"bool canReceive ( int timeout = 10000 ) Checks if the remote machine can recieve. Parameters : timeout The number of microseconds to wait before returning false Return : True if remote is able to recieve packets and false if it can't or does not respond","title":"function canReceive"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-recieve","text":"size_t recieve ( void * buffer , size_t bufferLength )","title":"function recieve"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-recieveall","text":"size_t recieveAll ( void * buffer , size_t bufferLength )","title":"function recieveAll"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-recievebytes","text":"unsigned char * recieveBytes () Recieves bytes from the remote. Return : an char* type used to hold incoming bytes","title":"function recieveBytes"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-setrecvtimeout","text":"bool setRecvTimeout ( int seconds = TIMEOUT_SECONDS , int microseconds = TIMEOUT_MICROSECONDS )","title":"function setRecvTimeout"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-send","text":"size_t send ( void const * buffer , size_t bufferLength )","title":"function send"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-sendall","text":"size_t sendAll ( void const * buffer , size_t bufferLength )","title":"function sendAll"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-sendbytes","text":"bool sendBytes ( unsigned char * message ) Sends bytes to remote. Parameters : message The bytes in a unsigned char* Return : True if message was recieved successfully","title":"function sendBytes"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Core_1_1TCPSocket/#function-setsendtimeout","text":"bool setSendTimeout ( int seconds = TIMEOUT_SECONDS , int microseconds = TIMEOUT_MICROSECONDS ) Updated on 29 January 2021 at 18:34:44 UTC","title":"function setSendTimeout"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1Client/","text":"PlayerLink::Server::Client Public Functions Name Client (int playerID, sockaddr_in sockaddrIn) Public Functions Documentation function Client Client ( int playerID , sockaddr_in sockaddrIn ) Parameters : playerID A unique ID for the player sockaddrIn SockAddr information for the client Constructs a Client Type Updated on 29 January 2021 at 18:34:44 UTC","title":"PlayerLink::Server::Client"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1Client/#playerlinkserverclient","text":"","title":"PlayerLink::Server::Client"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1Client/#public-functions","text":"Name Client (int playerID, sockaddr_in sockaddrIn)","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1Client/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1Client/#function-client","text":"Client ( int playerID , sockaddr_in sockaddrIn ) Parameters : playerID A unique ID for the player sockaddrIn SockAddr information for the client Constructs a Client Type Updated on 29 January 2021 at 18:34:44 UTC","title":"function Client"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameRoom/","text":"PlayerLink::Server::GameRoom More... #include <GameRoom.h> Public Functions Name void broadcast (char * message) Detailed Description class PlayerLink :: Server :: GameRoom ; A GameRoom is a class which holds all players in a game Public Functions Documentation function broadcast void broadcast ( char * message ) Parameters : message Broadcasts a message to all participants of a room Updated on 29 January 2021 at 18:34:44 UTC","title":"PlayerLink::Server::GameRoom"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameRoom/#playerlinkservergameroom","text":"More... #include <GameRoom.h>","title":"PlayerLink::Server::GameRoom"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameRoom/#public-functions","text":"Name void broadcast (char * message)","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameRoom/#detailed-description","text":"class PlayerLink :: Server :: GameRoom ; A GameRoom is a class which holds all players in a game","title":"Detailed Description"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameRoom/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameRoom/#function-broadcast","text":"void broadcast ( char * message ) Parameters : message Broadcasts a message to all participants of a room Updated on 29 January 2021 at 18:34:44 UTC","title":"function broadcast"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameServer/","text":"PlayerLink::Server::GameServer A GameServer object which is used to host a game or lobby. It uses three threads to efficiently do this; An accept thread to allow new players to join, a read thread to read packets sent by players to the server and a write thread to relay those messages to the other players. #include <GameServer.h> Public Functions Name GameServer () Constructs a GameServer . ~GameServer () void start (std::string name) Starts the GameServer . Public Functions Documentation function GameServer GameServer () Constructs a GameServer . Return : function ~GameServer ~ GameServer () function start void start ( std :: string name ) Starts the GameServer . Parameters : name Updated on 29 January 2021 at 18:34:44 UTC","title":"PlayerLink::Server::GameServer"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameServer/#playerlinkservergameserver","text":"A GameServer object which is used to host a game or lobby. It uses three threads to efficiently do this; An accept thread to allow new players to join, a read thread to read packets sent by players to the server and a write thread to relay those messages to the other players. #include <GameServer.h>","title":"PlayerLink::Server::GameServer"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameServer/#public-functions","text":"Name GameServer () Constructs a GameServer . ~GameServer () void start (std::string name) Starts the GameServer .","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameServer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameServer/#function-gameserver","text":"GameServer () Constructs a GameServer . Return :","title":"function GameServer"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameServer/#function-gameserver_1","text":"~ GameServer ()","title":"function ~GameServer"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1GameServer/#function-start","text":"void start ( std :: string name ) Starts the GameServer . Parameters : name Updated on 29 January 2021 at 18:34:44 UTC","title":"function start"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1ServerSocket/","text":"PlayerLink::Server::ServerSocket Public Functions Name ServerSocket (Protocols protocol, int port) ServerSocket (Protocols protocol) Public Functions Documentation function ServerSocket ServerSocket ( Protocols protocol , int port ) Parameters : protocol The Stream Protocol port The Port that the client is expected to connect to Constructs a ServerSocket with a specified listening port function ServerSocket ServerSocket ( Protocols protocol ) Parameters : protocol The Stream Protocol Constructs a ServerSocket Updated on 29 January 2021 at 18:34:44 UTC","title":"PlayerLink::Server::ServerSocket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1ServerSocket/#playerlinkserverserversocket","text":"","title":"PlayerLink::Server::ServerSocket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1ServerSocket/#public-functions","text":"Name ServerSocket (Protocols protocol, int port) ServerSocket (Protocols protocol)","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1ServerSocket/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1ServerSocket/#function-serversocket","text":"ServerSocket ( Protocols protocol , int port ) Parameters : protocol The Stream Protocol port The Port that the client is expected to connect to Constructs a ServerSocket with a specified listening port","title":"function ServerSocket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1ServerSocket/#function-serversocket_1","text":"ServerSocket ( Protocols protocol ) Parameters : protocol The Stream Protocol Constructs a ServerSocket Updated on 29 January 2021 at 18:34:44 UTC","title":"function ServerSocket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/","text":"PlayerLink::Server::TCPServer Inherits from Socket Public Functions Name TCPServer () Constructs a TCPServer object. void listen (std::string port, int backlog =5) Listens to incoming bytes on a specified port. TCPSocket accept () Method to accept incomming connection request. void monitorSocket ( TCPSocket & fd) Monitors the provided socket. void unmonitor ( TCPSocket & fd) Stops monitoring the provided socket. std::vector< TCPSocket > getSocketEvents (int timeout =10000) Gets the socket Events. Additional inherited members Public Functions inherited from Socket Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const Returns the IP Address of the remote device. uint32_t getPort () const int getSocketDescriptor () const bool close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError () Protected Attributes inherited from Socket Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance. Public Functions Documentation function TCPServer TCPServer () Constructs a TCPServer object. Return : function listen void listen ( std :: string port , int backlog = 5 ) Listens to incoming bytes on a specified port. Parameters : port The port you wish to monitor backlog function accept TCPSocket accept () Method to accept incomming connection request. Return : TCPSocket Object used to hold information and methods to send/recieve information from them function monitorSocket void monitorSocket ( TCPSocket & fd ) Monitors the provided socket. Parameters : fd The File Descriptor for the socket you want to monitor function unmonitor void unmonitor ( TCPSocket & fd ) Stops monitoring the provided socket. Parameters : fd The File Descriptor for the socket you no longer want to monitor function getSocketEvents std :: vector < TCPSocket > getSocketEvents ( int timeout = 10000 ) Gets the socket Events. Parameters : timeout Return : SocketEvents in a vector Updated on 29 January 2021 at 18:34:44 UTC","title":"PlayerLink::Server::TCPServer"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/#playerlinkservertcpserver","text":"Inherits from Socket","title":"PlayerLink::Server::TCPServer"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/#public-functions","text":"Name TCPServer () Constructs a TCPServer object. void listen (std::string port, int backlog =5) Listens to incoming bytes on a specified port. TCPSocket accept () Method to accept incomming connection request. void monitorSocket ( TCPSocket & fd) Monitors the provided socket. void unmonitor ( TCPSocket & fd) Stops monitoring the provided socket. std::vector< TCPSocket > getSocketEvents (int timeout =10000) Gets the socket Events.","title":"Public Functions"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/#additional-inherited-members","text":"Public Functions inherited from Socket Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const Returns the IP Address of the remote device. uint32_t getPort () const int getSocketDescriptor () const bool close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError () Protected Attributes inherited from Socket Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance.","title":"Additional inherited members"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/#function-tcpserver","text":"TCPServer () Constructs a TCPServer object. Return :","title":"function TCPServer"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/#function-listen","text":"void listen ( std :: string port , int backlog = 5 ) Listens to incoming bytes on a specified port. Parameters : port The port you wish to monitor backlog","title":"function listen"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/#function-accept","text":"TCPSocket accept () Method to accept incomming connection request. Return : TCPSocket Object used to hold information and methods to send/recieve information from them","title":"function accept"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/#function-monitorsocket","text":"void monitorSocket ( TCPSocket & fd ) Monitors the provided socket. Parameters : fd The File Descriptor for the socket you want to monitor","title":"function monitorSocket"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/#function-unmonitor","text":"void unmonitor ( TCPSocket & fd ) Stops monitoring the provided socket. Parameters : fd The File Descriptor for the socket you no longer want to monitor","title":"function unmonitor"},{"location":"PlayerLink/Classes/classPlayerLink_1_1Server_1_1TCPServer/#function-getsocketevents","text":"std :: vector < TCPSocket > getSocketEvents ( int timeout = 10000 ) Gets the socket Events. Parameters : timeout Return : SocketEvents in a vector Updated on 29 January 2021 at 18:34:44 UTC","title":"function getSocketEvents"},{"location":"PlayerLink/Classes/structDFHValues/","text":"DFHValues More... Public Attributes Name unsigned long commonPrime unsigned long secret int baseG Detailed Description struct DFHValues ; Diffie Hellman Key Exchange WIP Public Attributes Documentation variable commonPrime unsigned long commonPrime ; variable secret unsigned long secret ; variable baseG int baseG ; Updated on 29 January 2021 at 18:34:44 UTC","title":"DFHValues"},{"location":"PlayerLink/Classes/structDFHValues/#dfhvalues","text":"More...","title":"DFHValues"},{"location":"PlayerLink/Classes/structDFHValues/#public-attributes","text":"Name unsigned long commonPrime unsigned long secret int baseG","title":"Public Attributes"},{"location":"PlayerLink/Classes/structDFHValues/#detailed-description","text":"struct DFHValues ; Diffie Hellman Key Exchange WIP","title":"Detailed Description"},{"location":"PlayerLink/Classes/structDFHValues/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"PlayerLink/Classes/structDFHValues/#variable-commonprime","text":"unsigned long commonPrime ;","title":"variable commonPrime"},{"location":"PlayerLink/Classes/structDFHValues/#variable-secret","text":"unsigned long secret ;","title":"variable secret"},{"location":"PlayerLink/Classes/structDFHValues/#variable-baseg","text":"int baseG ; Updated on 29 January 2021 at 18:34:44 UTC","title":"variable baseG"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Message/","text":"PlayerLink::Server::Message Public Functions Name Message () Message (int sock_id, unsigned char * bytes) Public Attributes Name int mSockID unsigned char * mBytes Public Functions Documentation function Message inline Message () function Message inline Message ( int sock_id , unsigned char * bytes ) Public Attributes Documentation variable mSockID int mSockID ; variable mBytes unsigned char * mBytes ; Updated on 29 January 2021 at 18:34:44 UTC","title":"PlayerLink::Server::Message"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Message/#playerlinkservermessage","text":"","title":"PlayerLink::Server::Message"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Message/#public-functions","text":"Name Message () Message (int sock_id, unsigned char * bytes)","title":"Public Functions"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Message/#public-attributes","text":"Name int mSockID unsigned char * mBytes","title":"Public Attributes"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Message/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Message/#function-message","text":"inline Message ()","title":"function Message"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Message/#function-message_1","text":"inline Message ( int sock_id , unsigned char * bytes )","title":"function Message"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Message/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Message/#variable-msockid","text":"int mSockID ;","title":"variable mSockID"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Message/#variable-mbytes","text":"unsigned char * mBytes ; Updated on 29 January 2021 at 18:34:44 UTC","title":"variable mBytes"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/","text":"PlayerLink::Server::Player Public Functions Name Player () Player (std::string id, char userName, std::string ip) Public Attributes Name std::string mID std::string mIP char mUserName Public Functions Documentation function Player inline Player () function Player inline Player ( std :: string id , char userName , std :: string ip ) Public Attributes Documentation variable mID std :: string mID ; variable mIP std :: string mIP ; variable mUserName char mUserName ; Updated on 29 January 2021 at 18:34:44 UTC","title":"PlayerLink::Server::Player"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/#playerlinkserverplayer","text":"","title":"PlayerLink::Server::Player"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/#public-functions","text":"Name Player () Player (std::string id, char userName, std::string ip)","title":"Public Functions"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/#public-attributes","text":"Name std::string mID std::string mIP char mUserName","title":"Public Attributes"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/#function-player","text":"inline Player ()","title":"function Player"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/#function-player_1","text":"inline Player ( std :: string id , char userName , std :: string ip )","title":"function Player"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/#variable-mid","text":"std :: string mID ;","title":"variable mID"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/#variable-mip","text":"std :: string mIP ;","title":"variable mIP"},{"location":"PlayerLink/Classes/structPlayerLink_1_1Server_1_1Player/#variable-musername","text":"char mUserName ; Updated on 29 January 2021 at 18:34:44 UTC","title":"variable mUserName"},{"location":"PlayerLink/Examples/","text":"Examples Updated on 29 January 2021 at 18:34:44 UTC","title":"Examples"},{"location":"PlayerLink/Examples/#examples","text":"Updated on 29 January 2021 at 18:34:44 UTC","title":"Examples"},{"location":"PlayerLink/Modules/","text":"Modules Updated on 29 January 2021 at 18:34:44 UTC","title":"Modules"},{"location":"PlayerLink/Modules/#modules","text":"Updated on 29 January 2021 at 18:34:44 UTC","title":"Modules"},{"location":"PlayerLink/Namespaces/","text":"Namespaces namespace PlayerLink Root Namespace for the PlayerLink API. namespace Client Shared Library which will be implemented by the client application. namespace Core Contains source code which is shared by both PlayerLink Server and PlayerLink Client . Compiles to a static library. namespace Server Shared Library which will be implemented by the server application. Updated on 29 January 2021 at 18:34:44 UTC","title":"Namespaces"},{"location":"PlayerLink/Namespaces/#namespaces","text":"namespace PlayerLink Root Namespace for the PlayerLink API. namespace Client Shared Library which will be implemented by the client application. namespace Core Contains source code which is shared by both PlayerLink Server and PlayerLink Client . Compiles to a static library. namespace Server Shared Library which will be implemented by the server application. Updated on 29 January 2021 at 18:34:44 UTC","title":"Namespaces"},{"location":"PlayerLink/Namespaces/namespacePlayerLink/","text":"PlayerLink Root Namespace for the PlayerLink API. Namespaces Name PlayerLink::Client Shared Library which will be implemented by the client application. PlayerLink::Core Contains source code which is shared by both PlayerLink Server and PlayerLink Client . Compiles to a static library. PlayerLink::Server Shared Library which will be implemented by the server application. Updated on 29 January 2021 at 18:34:44 UTC","title":"PlayerLink"},{"location":"PlayerLink/Namespaces/namespacePlayerLink/#playerlink","text":"Root Namespace for the PlayerLink API.","title":"PlayerLink"},{"location":"PlayerLink/Namespaces/namespacePlayerLink/#namespaces","text":"Name PlayerLink::Client Shared Library which will be implemented by the client application. PlayerLink::Core Contains source code which is shared by both PlayerLink Server and PlayerLink Client . Compiles to a static library. PlayerLink::Server Shared Library which will be implemented by the server application. Updated on 29 January 2021 at 18:34:44 UTC","title":"Namespaces"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Client/","text":"PlayerLink::Client Shared Library which will be implemented by the client application. Classes Name class PlayerLink::Client::Client Client Class which is connected to the game and provides an interface to connect to the server. Updated on 29 January 2021 at 18:34:44 UTC","title":"PlayerLink::Client"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Client/#playerlinkclient","text":"Shared Library which will be implemented by the client application.","title":"PlayerLink::Client"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Client/#classes","text":"Name class PlayerLink::Client::Client Client Class which is connected to the game and provides an interface to connect to the server. Updated on 29 January 2021 at 18:34:44 UTC","title":"Classes"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/","text":"PlayerLink::Core Contains source code which is shared by both PlayerLink Server and PlayerLink Client . Compiles to a static library. Classes Name class PlayerLink::Core::Logger A Singelton Logger class which will be used by PlayerLink to create logs based on a severity level and append to a logfile. class PlayerLink::Core::RuntimeException exception class for Runtime environment, throws exceptions whenver an issue occurs with connectivity or any other runtime related error occurs class PlayerLink::Core::SHA256 class PlayerLink::Core::Socket Lowest socket implementation. This class will be used by top level socket implementations. class PlayerLink::Core::TCPSocket Types Name enum Protocols { TCP, UDP } enum LogSeverity { FATAL, ERROR, WARNING, INFO, DEBUG, TRACE } A LogSeverity Enum to determine the severity levels of a log to help organise and filter logfiles. typedef char rawType Functions Name std::string sha256 (std::string input) Types Documentation enum Protocols Enumerator Value Description TCP UDP enum LogSeverity Enumerator Value Description FATAL ERROR WARNING INFO DEBUG TRACE A LogSeverity Enum to determine the severity levels of a log to help organise and filter logfiles. Author : Hanzalah Ravat typedef rawType typedef char rawType ; Functions Documentation function sha256 std :: string sha256 ( std :: string input ) Updated on 29 January 2021 at 18:34:44 UTC","title":"PlayerLink::Core"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/#playerlinkcore","text":"Contains source code which is shared by both PlayerLink Server and PlayerLink Client . Compiles to a static library.","title":"PlayerLink::Core"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/#classes","text":"Name class PlayerLink::Core::Logger A Singelton Logger class which will be used by PlayerLink to create logs based on a severity level and append to a logfile. class PlayerLink::Core::RuntimeException exception class for Runtime environment, throws exceptions whenver an issue occurs with connectivity or any other runtime related error occurs class PlayerLink::Core::SHA256 class PlayerLink::Core::Socket Lowest socket implementation. This class will be used by top level socket implementations. class PlayerLink::Core::TCPSocket","title":"Classes"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/#types","text":"Name enum Protocols { TCP, UDP } enum LogSeverity { FATAL, ERROR, WARNING, INFO, DEBUG, TRACE } A LogSeverity Enum to determine the severity levels of a log to help organise and filter logfiles. typedef char rawType","title":"Types"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/#functions","text":"Name std::string sha256 (std::string input)","title":"Functions"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/#types-documentation","text":"","title":"Types Documentation"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/#enum-protocols","text":"Enumerator Value Description TCP UDP","title":"enum Protocols"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/#enum-logseverity","text":"Enumerator Value Description FATAL ERROR WARNING INFO DEBUG TRACE A LogSeverity Enum to determine the severity levels of a log to help organise and filter logfiles. Author : Hanzalah Ravat","title":"enum LogSeverity"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/#typedef-rawtype","text":"typedef char rawType ;","title":"typedef rawType"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Core/#function-sha256","text":"std :: string sha256 ( std :: string input ) Updated on 29 January 2021 at 18:34:44 UTC","title":"function sha256"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Server/","text":"PlayerLink::Server Shared Library which will be implemented by the server application. Classes Name class PlayerLink::Server::Client class PlayerLink::Server::GameRoom class PlayerLink::Server::GameServer A GameServer object which is used to host a game or lobby. It uses three threads to efficiently do this; An accept thread to allow new players to join, a read thread to read packets sent by players to the server and a write thread to relay those messages to the other players. struct PlayerLink::Server::Message struct PlayerLink::Server::Player class PlayerLink::Server::ServerSocket class PlayerLink::Server::TCPServer Types Name typedef struct PlayerLink::Server::Message PlayerMessage typedef struct PlayerLink::Server::Player Player Types Documentation typedef PlayerMessage typedef struct PlayerLink :: Server :: Message PlayerMessage ; typedef Player typedef struct PlayerLink :: Server :: Player Player ; Updated on 29 January 2021 at 18:34:44 UTC","title":"PlayerLink::Server"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Server/#playerlinkserver","text":"Shared Library which will be implemented by the server application.","title":"PlayerLink::Server"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Server/#classes","text":"Name class PlayerLink::Server::Client class PlayerLink::Server::GameRoom class PlayerLink::Server::GameServer A GameServer object which is used to host a game or lobby. It uses three threads to efficiently do this; An accept thread to allow new players to join, a read thread to read packets sent by players to the server and a write thread to relay those messages to the other players. struct PlayerLink::Server::Message struct PlayerLink::Server::Player class PlayerLink::Server::ServerSocket class PlayerLink::Server::TCPServer","title":"Classes"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Server/#types","text":"Name typedef struct PlayerLink::Server::Message PlayerMessage typedef struct PlayerLink::Server::Player Player","title":"Types"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Server/#types-documentation","text":"","title":"Types Documentation"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Server/#typedef-playermessage","text":"typedef struct PlayerLink :: Server :: Message PlayerMessage ;","title":"typedef PlayerMessage"},{"location":"PlayerLink/Namespaces/namespacePlayerLink_1_1Server/#typedef-player","text":"typedef struct PlayerLink :: Server :: Player Player ; Updated on 29 January 2021 at 18:34:44 UTC","title":"typedef Player"}]}